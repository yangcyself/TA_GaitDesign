/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:58:55 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t109;
  double t86;
  double t135;
  double t145;
  double t5952;
  double t6109;
  double t6512;
  double t6570;
  double t8566;
  double t9315;
  double t9512;
  double t10719;
  double t10727;
  double t10747;
  double t10748;
  double t10751;
  double t158;
  double t161;
  double t162;
  double t140;
  double t146;
  double t149;
  double t6057;
  double t6211;
  double t6306;
  double t6442;
  double t8864;
  double t8902;
  double t8967;
  double t8981;
  double t8990;
  double t8999;
  double t9011;
  double t9014;
  double t9916;
  double t10645;
  double t10691;
  double t9438;
  double t9530;
  double t9538;
  double t10720;
  double t10734;
  double t10740;
  double t10742;
  double t10752;
  double t10756;
  double t10772;
  double t10787;
  double t10802;
  double t10804;
  double t10834;
  double t10836;
  double t11305;
  double t11307;
  double t11309;
  double t11313;
  double t11324;
  double t11325;
  double t11328;
  double t11330;
  double t11338;
  double t11357;
  double t11358;
  double t13911;
  double t13943;
  double t13947;
  double t13950;
  double t13952;
  double t14045;
  double t14050;
  double t14063;
  double t14070;
  double t14071;
  double t14033;
  double t14100;
  double t14101;
  double t14113;
  double t14129;
  double t14130;
  double t14133;
  double t10855;
  double t10856;
  double t10857;
  double t10846;
  double t10848;
  double t10849;
  double t14387;
  double t14394;
  double t14397;
  double t10865;
  double t10867;
  double t14361;
  double t14363;
  double t14373;
  double t14378;
  double t10916;
  double t10919;
  double t10921;
  double t10876;
  double t10878;
  double t10879;
  double t14304;
  double t14319;
  double t14320;
  double t14337;
  double t11235;
  double t11270;
  double t14253;
  double t14254;
  double t14266;
  double t14268;
  double t14270;
  double t2693;
  double t10711;
  double t11285;
  double t11287;
  double t11294;
  double t11296;
  double t11301;
  double t11337;
  double t12331;
  double t13375;
  double t13824;
  double t13860;
  double t13881;
  double t13962;
  double t13966;
  double t13967;
  double t13982;
  double t14001;
  double t14011;
  double t14022;
  double t14124;
  double t14160;
  double t14161;
  double t14173;
  double t14191;
  double t14192;
  double t14446;
  double t14454;
  double t14462;
  double t16686;
  double t16690;
  double t16935;
  double t16936;
  double t16937;
  double t16938;
  double t16939;
  double t16781;
  double t16782;
  double t16783;
  double t16784;
  double t16826;
  double t16830;
  double t16836;
  double t16837;
  double t16841;
  double t16842;
  double t16843;
  double t16844;
  double t16849;
  double t16850;
  double t16855;
  double t16922;
  double t16923;
  double t16925;
  double t16960;
  double t16961;
  double t16962;
  double t16942;
  double t16943;
  double t16944;
  double t16947;
  double t16948;
  double t16951;
  double t16952;
  double t16953;
  double t16954;
  double t16955;
  double t16956;
  double t16959;
  double t16964;
  double t16967;
  double t16971;
  double t16995;
  double t16996;
  double t16973;
  double t16998;
  double t16999;
  double t16975;
  double t16729;
  double t16737;
  double t16769;
  double t16770;
  double t16774;
  double t17010;
  double t17011;
  double t17012;
  double t17013;
  double t17014;
  double t16801;
  double t16807;
  double t16866;
  double t16867;
  double t16868;
  double t16869;
  double t16870;
  double t16880;
  double t16881;
  double t16884;
  double t16889;
  double t16928;
  double t16929;
  double t17041;
  double t17042;
  double t17043;
  double t17044;
  double t17048;
  double t17049;
  double t17015;
  double t17016;
  double t17017;
  double t17020;
  double t17021;
  double t17024;
  double t17025;
  double t17026;
  double t17027;
  double t17028;
  double t17029;
  double t17040;
  double t17046;
  double t17047;
  double t17053;
  double t17078;
  double t17079;
  double t17055;
  double t17081;
  double t17082;
  double t17057;
  double t91;
  double t123;
  double t153;
  double t8951;
  double t9045;
  double t9835;
  double t10758;
  double t10842;
  double t10851;
  double t10853;
  double t10859;
  double t10875;
  double t10882;
  double t10902;
  double t10923;
  double t11272;
  double t11275;
  double t100;
  double t128;
  double t5943;
  double t16859;
  double t16861;
  double t10712;
  double t16899;
  double t16904;
  double t16856;
  double t16857;
  double t16863;
  double t16864;
  double t16890;
  double t16895;
  double t16911;
  double t16912;
  double t16858;
  double t16860;
  double t16862;
  double t16865;
  double t16898;
  double t16900;
  double t16908;
  double t16915;
  double t16920;
  double t11277;
  double t17157;
  double t17168;
  double t16957;
  double t17177;
  double t16963;
  double t16968;
  double t16969;
  double t16972;
  double t16974;
  double t16976;
  double t17187;
  double t16985;
  double t16986;
  double t16987;
  double t17188;
  double t16981;
  double t16982;
  double t16983;
  double t17189;
  double t17192;
  double t17193;
  double t16993;
  double t17197;
  double t16997;
  double t17000;
  double t17001;
  double t17199;
  double t17003;
  double t17004;
  double t17005;
  double t17163;
  double t17171;
  double t17030;
  double t17180;
  double t17036;
  double t17037;
  double t17038;
  double t17032;
  double t17033;
  double t17034;
  double t17181;
  double t17045;
  double t17050;
  double t17051;
  double t17054;
  double t17056;
  double t17058;
  double t17216;
  double t17068;
  double t17069;
  double t17070;
  double t17063;
  double t17064;
  double t17065;
  double t17066;
  double t17217;
  double t17218;
  double t17221;
  double t17222;
  double t17076;
  double t17228;
  double t17080;
  double t17083;
  double t17084;
  double t17230;
  double t17086;
  double t17087;
  double t17088;
  double t17102;
  double t17103;
  double t17104;
  double t17105;
  double t17106;
  double t17107;
  double t17108;
  double t17109;
  double t17110;
  double t17093;
  double t17094;
  double t16924;
  double t16926;
  double t16927;
  double t16930;
  double t16931;
  double t16932;
  double t16694;
  double t16715;
  double t16716;
  double t16775;
  double t16776;
  double t16777;
  double t11304;
  double t13810;
  double t13891;
  double t13969;
  double t14023;
  double t14162;
  double t14203;
  double t14206;
  double t17137;
  double t17138;
  double t17139;
  double t17140;
  double t17141;
  double t17142;
  double t17143;
  double t17144;
  double t17145;
  double t17178;
  double t17179;
  double t17182;
  double t17183;
  double t17184;
  double t17198;
  double t17200;
  double t17201;
  double t16970;
  double t16977;
  double t16978;
  double t17211;
  double t17212;
  double t17213;
  double t17002;
  double t17006;
  double t17007;
  double t17278;
  double t17279;
  double t17280;
  double t17281;
  double t17282;
  double t17283;
  double t17284;
  double t17288;
  double t17289;
  double t17290;
  double t17291;
  double t17292;
  double t17293;
  double t17294;
  double t17226;
  double t17227;
  double t17229;
  double t17231;
  double t17232;
  double t17035;
  double t17039;
  double t17052;
  double t17059;
  double t17060;
  double t17242;
  double t17243;
  double t17244;
  double t17085;
  double t17089;
  double t17090;
  double t17111;
  double t17112;
  double t17113;
  double t17114;
  double t17115;
  double t17116;
  double t17117;
  double t17118;
  double t17119;
  double t17250;
  double t17252;
  double t17254;
  double t17256;
  double t17258;
  double t17260;
  double t17262;
  double t17277;
  double t17349;
  double t14359;
  double t14384;
  double t14430;
  double t14431;
  double t17151;
  double t17152;
  double t17153;
  double t17154;
  double t17271;
  double t17272;
  double t17273;
  double t17274;
  double t17158;
  double t17159;
  double t17160;
  double t17190;
  double t16945;
  double t17301;
  double t17302;
  double t17303;
  double t17204;
  double t17205;
  double t17206;
  double t16984;
  double t16988;
  double t16989;
  double t17313;
  double t17314;
  double t17315;
  double t17316;
  double t17317;
  double t17120;
  double t17121;
  double t17122;
  double t17123;
  double t17383;
  double t17384;
  double t17385;
  double t17386;
  double t17407;
  double t17409;
  double t14445;
  double t17155;
  double t17275;
  double t17276;
  double t17412;
  double t17413;
  double t17439;
  double t17440;
  double t17124;
  double t17248;
  double t17387;
  double t17388;
  double t17433;
  double t17434;
  double t14245;
  double t14282;
  double t14340;
  double t14353;
  double t17146;
  double t17147;
  double t17148;
  double t17149;
  double t17265;
  double t17266;
  double t17267;
  double t17268;
  double t17327;
  double t17328;
  double t17329;
  double t17330;
  double t17331;
  double t17332;
  double t17164;
  double t17165;
  double t17166;
  double t17219;
  double t17018;
  double t17333;
  double t17334;
  double t17335;
  double t17336;
  double t17348;
  double t17350;
  double t17351;
  double t17352;
  double t17353;
  double t17354;
  double t17355;
  double t17356;
  double t17357;
  double t17358;
  double t17359;
  double t17360;
  double t17361;
  double t17235;
  double t17236;
  double t17237;
  double t17067;
  double t17071;
  double t17072;
  double t17362;
  double t17363;
  double t17364;
  double t17365;
  double t17366;
  double t17125;
  double t17126;
  double t17127;
  double t17128;
  double t17389;
  double t17390;
  double t17391;
  double t17392;
  double t17445;
  double t17447;
  double t17395;
  double t17396;
  double t17397;
  double t17398;
  double t17399;
  double t17402;
  double t17403;
  double t17404;
  double t17405;
  double t14355;
  double t17150;
  double t17269;
  double t17270;
  double t17450;
  double t17451;
  double t17480;
  double t17481;
  double t17129;
  double t17249;
  double t17393;
  double t17394;
  double t17471;
  double t17472;
  double t17485;
  t109 = Sin(var2[2]);
  t86 = Cos(var2[2]);
  t135 = Cos(var2[3]);
  t145 = Sin(var2[3]);
  t5952 = Cos(var2[4]);
  t6109 = Sin(var2[4]);
  t6512 = t135*t5952;
  t6570 = -1.*t145*t6109;
  t8566 = t6512 + t6570;
  t9315 = Cos(var2[5]);
  t9512 = Sin(var2[5]);
  t10719 = Cos(var2[6]);
  t10727 = Sin(var2[6]);
  t10747 = t9315*t10719;
  t10748 = -1.*t9512*t10727;
  t10751 = t10747 + t10748;
  t158 = t86*t135;
  t161 = -1.*t109*t145;
  t162 = t158 + t161;
  t140 = t135*t109;
  t146 = t86*t145;
  t149 = t140 + t146;
  t6057 = -1.*t5952*t145;
  t6211 = -1.*t135*t6109;
  t6306 = t6057 + t6211;
  t6442 = t109*t6306;
  t8864 = t86*t8566;
  t8902 = t6442 + t8864;
  t8967 = t5952*t145;
  t8981 = t135*t6109;
  t8990 = t8967 + t8981;
  t8999 = t86*t8990;
  t9011 = t109*t8566;
  t9014 = t8999 + t9011;
  t9916 = t86*t9315;
  t10645 = -1.*t109*t9512;
  t10691 = t9916 + t10645;
  t9438 = t9315*t109;
  t9530 = t86*t9512;
  t9538 = t9438 + t9530;
  t10720 = -1.*t10719*t9512;
  t10734 = -1.*t9315*t10727;
  t10740 = t10720 + t10734;
  t10742 = t109*t10740;
  t10752 = t86*t10751;
  t10756 = t10742 + t10752;
  t10772 = t10719*t9512;
  t10787 = t9315*t10727;
  t10802 = t10772 + t10787;
  t10804 = t86*t10802;
  t10834 = t109*t10751;
  t10836 = t10804 + t10834;
  t11305 = -1.*t5952;
  t11307 = 1. + t11305;
  t11309 = 0.4*t11307;
  t11313 = 0.64*t5952;
  t11324 = t11309 + t11313;
  t11325 = t11324*t145;
  t11328 = 0.24*t135*t6109;
  t11330 = t11325 + t11328;
  t11338 = t135*t11324;
  t11357 = -0.24*t145*t6109;
  t11358 = t11338 + t11357;
  t13911 = -1.*t9315;
  t13943 = 1. + t13911;
  t13947 = 0.63*t13943;
  t13950 = 0.74*t9315;
  t13952 = t13947 + t13950;
  t14045 = -1.*t10719;
  t14050 = 1. + t14045;
  t14063 = 1.03*t14050;
  t14070 = 1.27*t10719;
  t14071 = t14063 + t14070;
  t14033 = -0.63*t9512;
  t14100 = t14071*t9512;
  t14101 = 0.24*t9315*t10727;
  t14113 = t14033 + t14100 + t14101;
  t14129 = t9315*t14071;
  t14130 = -0.24*t9512*t10727;
  t14133 = t13947 + t14129 + t14130;
  t10855 = t86*t6306;
  t10856 = -1.*t109*t8566;
  t10857 = t10855 + t10856;
  t10846 = -1.*t135*t109;
  t10848 = -1.*t86*t145;
  t10849 = t10846 + t10848;
  t14387 = t11324*t6109;
  t14394 = -0.24*t5952*t6109;
  t14397 = t14387 + t14394;
  t10865 = -1.*t109*t8990;
  t10867 = t10865 + t8864;
  t14361 = t11324*t5952;
  t14363 = Power(t6109,2);
  t14373 = 0.24*t14363;
  t14378 = t14361 + t14373;
  t10916 = t86*t10740;
  t10919 = -1.*t109*t10751;
  t10921 = t10916 + t10919;
  t10876 = -1.*t9315*t109;
  t10878 = -1.*t86*t9512;
  t10879 = t10876 + t10878;
  t14304 = -0.63*t10727;
  t14319 = -0.24*t10719*t10727;
  t14320 = t14071*t10727;
  t14337 = t14304 + t14319 + t14320;
  t11235 = -1.*t109*t10802;
  t11270 = t11235 + t10752;
  t14253 = -0.63*t10719;
  t14254 = t10719*t14071;
  t14266 = Power(t10727,2);
  t14268 = 0.24*t14266;
  t14270 = t14253 + t14254 + t14268;
  t2693 = Power(t162,2);
  t10711 = Power(t10691,2);
  t11285 = Power(t135,2);
  t11287 = 0.11*t11285;
  t11294 = Power(t145,2);
  t11296 = 0.11*t11294;
  t11301 = t11287 + t11296;
  t11337 = -1.*t11330*t8566;
  t12331 = -1.*t6306*t11358;
  t13375 = t11337 + t12331;
  t13824 = t11330*t8990;
  t13860 = t8566*t11358;
  t13881 = t13824 + t13860;
  t13962 = t13952*t9512;
  t13966 = -0.11*t9315*t9512;
  t13967 = t13962 + t13966;
  t13982 = t13952*t9315;
  t14001 = Power(t9512,2);
  t14011 = 0.11*t14001;
  t14022 = t13982 + t14011;
  t14124 = -1.*t14113*t10751;
  t14160 = -1.*t10740*t14133;
  t14161 = t14124 + t14160;
  t14173 = t14113*t10802;
  t14191 = t10751*t14133;
  t14192 = t14173 + t14191;
  t14446 = -1.*var1[6];
  t14454 = var3[4] + t14446;
  t14462 = -1.*var1[5];
  t16686 = var3[3] + t14462;
  t16690 = 0.748*t10849;
  t16935 = -1.*t135*t5952;
  t16936 = t145*t6109;
  t16937 = t16935 + t16936;
  t16938 = t109*t16937;
  t16939 = t10855 + t16938;
  t16781 = -1.*var1[0];
  t16782 = var3[0] + t16781;
  t16783 = 13.6*t10849*t162;
  t16784 = 13.6*t149*t162;
  t16826 = -1.*var1[1];
  t16830 = var3[1] + t16826;
  t16836 = Power(t10849,2);
  t16837 = 6.8*t16836;
  t16841 = 6.8*t10849*t149;
  t16842 = 6.8*t2693;
  t16843 = -1.*t86*t135;
  t16844 = t109*t145;
  t16849 = t16843 + t16844;
  t16850 = 6.8*t162*t16849;
  t16855 = -1.*t109*t6306;
  t16922 = -1.*var1[2];
  t16923 = var3[2] + t16922;
  t16925 = 6.8*t10849*t11301;
  t16960 = -1.*t11324*t145;
  t16961 = -0.24*t135*t6109;
  t16962 = t16960 + t16961;
  t16942 = 0.768*t14454*t16939;
  t16943 = 3.2*t14397*t8902;
  t16944 = 3.2*t14378*t16939;
  t16947 = 6.4*t8902*t9014;
  t16948 = 6.4*t8902*t16939;
  t16951 = 3.2*t8902*t10867;
  t16952 = 3.2*t10857*t9014;
  t16953 = t86*t16937;
  t16954 = t16855 + t16953;
  t16955 = 3.2*t8902*t16954;
  t16956 = 3.2*t10857*t16939;
  t16959 = 3.2*t8902*t13375;
  t16964 = t11330*t8566;
  t16967 = t6306*t11358;
  t16971 = 3.2*t13881*t16939;
  t16995 = -0.24*t5952*t145;
  t16996 = t16995 + t16961;
  t16973 = -1.*t6306*t11330;
  t16998 = 0.24*t135*t5952;
  t16999 = t16998 + t11357;
  t16975 = -1.*t11358*t16937;
  t16729 = -1.*var1[4];
  t16737 = var3[6] + t16729;
  t16769 = -1.*var1[3];
  t16770 = var3[5] + t16769;
  t16774 = 0.748*t10879;
  t17010 = -1.*t9315*t10719;
  t17011 = t9512*t10727;
  t17012 = t17010 + t17011;
  t17013 = t109*t17012;
  t17014 = t10916 + t17013;
  t16801 = 13.6*t10879*t10691;
  t16807 = 13.6*t9538*t10691;
  t16866 = Power(t10879,2);
  t16867 = 6.8*t16866;
  t16868 = 6.8*t10879*t9538;
  t16869 = 6.8*t10711;
  t16870 = -1.*t86*t9315;
  t16880 = t109*t9512;
  t16881 = t16870 + t16880;
  t16884 = 6.8*t10691*t16881;
  t16889 = -1.*t109*t10740;
  t16928 = 6.8*t13967*t10691;
  t16929 = 6.8*t10879*t14022;
  t17041 = 0.63*t9512;
  t17042 = -1.*t14071*t9512;
  t17043 = -0.24*t9315*t10727;
  t17044 = t17041 + t17042 + t17043;
  t17048 = -0.63*t9315;
  t17049 = t17048 + t14129 + t14130;
  t17015 = 0.768*t16737*t17014;
  t17016 = 3.2*t14337*t10756;
  t17017 = 3.2*t14270*t17014;
  t17020 = 6.4*t10756*t10836;
  t17021 = 6.4*t10756*t17014;
  t17024 = 3.2*t10756*t11270;
  t17025 = 3.2*t10921*t10836;
  t17026 = t86*t17012;
  t17027 = t16889 + t17026;
  t17028 = 3.2*t10756*t17027;
  t17029 = 3.2*t10921*t17014;
  t17040 = 3.2*t10756*t14161;
  t17046 = t14113*t10751;
  t17047 = t10740*t14133;
  t17053 = 3.2*t14192*t17014;
  t17078 = -0.24*t10719*t9512;
  t17079 = t17078 + t17043;
  t17055 = -1.*t10740*t14113;
  t17081 = 0.24*t9315*t10719;
  t17082 = t17081 + t14130;
  t17057 = -1.*t14133*t17012;
  t91 = Power(t86,2);
  t123 = Power(t109,2);
  t153 = Power(t149,2);
  t8951 = Power(t8902,2);
  t9045 = Power(t9014,2);
  t9835 = Power(t9538,2);
  t10758 = Power(t10756,2);
  t10842 = Power(t10836,2);
  t10851 = -6.8*t10849*t162;
  t10853 = -6.8*t149*t162;
  t10859 = -3.2*t8902*t10857;
  t10875 = -3.2*t10867*t9014;
  t10882 = -6.8*t10879*t10691;
  t10902 = -6.8*t9538*t10691;
  t10923 = -3.2*t10756*t10921;
  t11272 = -3.2*t11270*t10836;
  t11275 = t10851 + t10853 + t10859 + t10875 + t10882 + t10902 + t10923 + t11272;
  t100 = -12.*t91;
  t128 = -12.*t123;
  t5943 = -6.8*t2693;
  t16859 = Power(t10867,2);
  t16861 = Power(t10857,2);
  t10712 = -6.8*t10711;
  t16899 = Power(t11270,2);
  t16904 = Power(t10921,2);
  t16856 = -1.*t86*t8566;
  t16857 = t16855 + t16856;
  t16863 = -1.*t86*t8990;
  t16864 = t16863 + t10856;
  t16890 = -1.*t86*t10751;
  t16895 = t16889 + t16890;
  t16911 = -1.*t86*t10802;
  t16912 = t16911 + t10919;
  t16858 = 3.2*t16857*t8902;
  t16860 = 3.2*t16859;
  t16862 = 3.2*t16861;
  t16865 = 3.2*t16864*t9014;
  t16898 = 3.2*t16895*t10756;
  t16900 = 3.2*t16899;
  t16908 = 3.2*t16904;
  t16915 = 3.2*t16912*t10836;
  t16920 = t16837 + t16841 + t16842 + t16850 + t16858 + t16860 + t16862 + t16865 + t16867 + t16868 + t16869 + t16884 + t16898 + t16900 + t16908 + t16915;
  t11277 = -2.88*t86;
  t17157 = 0.748*t16849;
  t17168 = 13.6*t10849*t16849;
  t16957 = t16837 + t16841 + t16842 + t16850 + t16951 + t16952 + t16955 + t16956;
  t17177 = 6.8*t16849*t11301;
  t16963 = t16962*t8566;
  t16968 = t8990*t11358;
  t16969 = t16963 + t16964 + t16967 + t16968;
  t16972 = -1.*t6306*t16962;
  t16974 = -1.*t8566*t11358;
  t16976 = t16972 + t16973 + t16974 + t16975;
  t17187 = 0.768*t14454*t16954;
  t16985 = Power(t5952,2);
  t16986 = -0.24*t16985;
  t16987 = t14361 + t16986;
  t17188 = 3.2*t14397*t10857;
  t16981 = -1.*t11324*t6109;
  t16982 = 0.24*t5952*t6109;
  t16983 = t16981 + t16982;
  t17189 = 3.2*t14378*t16954;
  t17192 = 6.4*t10867*t10857;
  t17193 = 6.4*t10857*t16954;
  t16993 = t16951 + t16952 + t16955 + t16956;
  t17197 = 3.2*t10857*t13375;
  t16997 = t16996*t8566;
  t17000 = t8990*t16999;
  t17001 = t16997 + t16964 + t16967 + t17000;
  t17199 = 3.2*t13881*t16954;
  t17003 = -1.*t6306*t16996;
  t17004 = -1.*t8566*t16999;
  t17005 = t17003 + t16973 + t17004 + t16975;
  t17163 = 0.748*t16881;
  t17171 = 13.6*t10879*t16881;
  t17030 = t16867 + t16868 + t16869 + t16884 + t17024 + t17025 + t17028 + t17029;
  t17180 = 6.8*t10879*t13967;
  t17036 = -1.*t13952*t9512;
  t17037 = 0.11*t9315*t9512;
  t17038 = t17036 + t17037;
  t17032 = Power(t9315,2);
  t17033 = -0.11*t17032;
  t17034 = t13982 + t17033;
  t17181 = 6.8*t16881*t14022;
  t17045 = t17044*t10751;
  t17050 = t10802*t17049;
  t17051 = t17045 + t17046 + t17047 + t17050;
  t17054 = -1.*t10740*t17044;
  t17056 = -1.*t10751*t17049;
  t17058 = t17054 + t17055 + t17056 + t17057;
  t17216 = 0.768*t16737*t17027;
  t17068 = Power(t10719,2);
  t17069 = -0.24*t17068;
  t17070 = t14253 + t17069 + t14254;
  t17063 = 0.63*t10727;
  t17064 = 0.24*t10719*t10727;
  t17065 = -1.*t14071*t10727;
  t17066 = t17063 + t17064 + t17065;
  t17217 = 3.2*t14337*t10921;
  t17218 = 3.2*t14270*t17027;
  t17221 = 6.4*t11270*t10921;
  t17222 = 6.4*t10921*t17027;
  t17076 = t17024 + t17025 + t17028 + t17029;
  t17228 = 3.2*t10921*t14161;
  t17080 = t17079*t10751;
  t17083 = t10802*t17082;
  t17084 = t17080 + t17046 + t17083 + t17047;
  t17230 = 3.2*t14192*t17027;
  t17086 = -1.*t10740*t17079;
  t17087 = -1.*t10751*t17082;
  t17088 = t17086 + t17055 + t17087 + t17057;
  t17102 = 6.8*t10849*t162;
  t17103 = 6.8*t149*t162;
  t17104 = 3.2*t8902*t10857;
  t17105 = 3.2*t10867*t9014;
  t17106 = 6.8*t10879*t10691;
  t17107 = 6.8*t9538*t10691;
  t17108 = 3.2*t10756*t10921;
  t17109 = 3.2*t11270*t10836;
  t17110 = t17102 + t17103 + t17104 + t17105 + t17106 + t17107 + t17108 + t17109;
  t17093 = 12.*t91;
  t17094 = 12.*t123;
  t16924 = -2.88*t109;
  t16926 = 3.2*t10867*t13375;
  t16927 = 3.2*t10857*t13881;
  t16930 = 3.2*t11270*t14161;
  t16931 = 3.2*t10921*t14192;
  t16932 = t16924 + t16925 + t16926 + t16927 + t16928 + t16929 + t16930 + t16931;
  t16694 = 3.2*t14397*t10867;
  t16715 = 3.2*t14378*t10857;
  t16716 = t16690 + t16694 + t16715;
  t16775 = 3.2*t14337*t11270;
  t16776 = 3.2*t14270*t10921;
  t16777 = t16774 + t16775 + t16776;
  t11304 = -6.8*t162*t11301;
  t13810 = -3.2*t9014*t13375;
  t13891 = -3.2*t8902*t13881;
  t13969 = -6.8*t9538*t13967;
  t14023 = -6.8*t10691*t14022;
  t14162 = -3.2*t10836*t14161;
  t14203 = -3.2*t10756*t14192;
  t14206 = t11277 + t11304 + t13810 + t13891 + t13969 + t14023 + t14162 + t14203;
  t17137 = 2.88*t109;
  t17138 = -6.8*t10849*t11301;
  t17139 = -3.2*t10867*t13375;
  t17140 = -3.2*t10857*t13881;
  t17141 = -6.8*t13967*t10691;
  t17142 = -6.8*t10879*t14022;
  t17143 = -3.2*t11270*t14161;
  t17144 = -3.2*t10921*t14192;
  t17145 = t17137 + t17138 + t17139 + t17140 + t17141 + t17142 + t17143 + t17144;
  t17178 = 3.2*t16864*t13375;
  t17179 = 3.2*t16857*t13881;
  t17182 = 3.2*t16912*t14161;
  t17183 = 3.2*t16895*t14192;
  t17184 = t11277 + t17177 + t17178 + t17179 + t17180 + t17181 + t17182 + t17183;
  t17198 = 3.2*t10857*t16969;
  t17200 = 3.2*t10867*t16976;
  t17201 = t17177 + t17197 + t17198 + t17199 + t17200;
  t16970 = 3.2*t8902*t16969;
  t16977 = 3.2*t9014*t16976;
  t16978 = t16925 + t16959 + t16970 + t16971 + t16977;
  t17211 = 3.2*t10857*t17001;
  t17212 = 3.2*t10867*t17005;
  t17213 = t17197 + t17211 + t17199 + t17212;
  t17002 = 3.2*t8902*t17001;
  t17006 = 3.2*t9014*t17005;
  t17007 = t16959 + t17002 + t16971 + t17006;
  t17278 = -0.63*t109*t9512;
  t17279 = 1.03*t14050*t16881;
  t17280 = -1.03*t9538*t10727;
  t17281 = t10719*t16881;
  t17282 = t9538*t10727;
  t17283 = t17281 + t17282;
  t17284 = 1.43*t17283;
  t17288 = 0.63*t86*t9512;
  t17289 = 1.03*t14050*t10879;
  t17290 = -1.03*t16881*t10727;
  t17291 = t10719*t10879;
  t17292 = t16881*t10727;
  t17293 = t17291 + t17292;
  t17294 = 1.43*t17293;
  t17226 = 6.8*t10879*t17038;
  t17227 = 6.8*t17034*t10691;
  t17229 = 3.2*t10921*t17051;
  t17231 = 3.2*t11270*t17058;
  t17232 = t17180 + t17226 + t17227 + t17181 + t17228 + t17229 + t17230 + t17231;
  t17035 = 6.8*t17034*t9538;
  t17039 = 6.8*t17038*t10691;
  t17052 = 3.2*t10756*t17051;
  t17059 = 3.2*t10836*t17058;
  t17060 = t17035 + t16928 + t17039 + t16929 + t17040 + t17052 + t17053 + t17059;
  t17242 = 3.2*t10921*t17084;
  t17243 = 3.2*t11270*t17088;
  t17244 = t17228 + t17242 + t17230 + t17243;
  t17085 = 3.2*t10756*t17084;
  t17089 = 3.2*t10836*t17088;
  t17090 = t17040 + t17085 + t17053 + t17089;
  t17111 = 2.88*t86;
  t17112 = 6.8*t162*t11301;
  t17113 = 3.2*t9014*t13375;
  t17114 = 3.2*t8902*t13881;
  t17115 = 6.8*t9538*t13967;
  t17116 = 6.8*t10691*t14022;
  t17117 = 3.2*t10836*t14161;
  t17118 = 3.2*t10756*t14192;
  t17119 = t17111 + t17112 + t17113 + t17114 + t17115 + t17116 + t17117 + t17118;
  t17250 = Power(t11301,2);
  t17252 = Power(t13375,2);
  t17254 = Power(t13881,2);
  t17256 = Power(t13967,2);
  t17258 = Power(t14022,2);
  t17260 = Power(t14161,2);
  t17262 = Power(t14192,2);
  t17277 = -0.63*t86*t13943;
  t17349 = 1.03*t10879*t10727;
  t14359 = -0.748*t162;
  t14384 = -3.2*t14378*t8902;
  t14430 = -3.2*t14397*t9014;
  t14431 = t14359 + t14384 + t14430;
  t17151 = -0.748*t10849;
  t17152 = -3.2*t14397*t10867;
  t17153 = -3.2*t14378*t10857;
  t17154 = t17151 + t17152 + t17153;
  t17271 = -0.748*t11301;
  t17272 = -3.2*t14397*t13375;
  t17273 = -3.2*t14378*t13881;
  t17274 = -0.67 + t17271 + t17272 + t17273;
  t17158 = 3.2*t14378*t16857;
  t17159 = 3.2*t14397*t16864;
  t17160 = t17157 + t17158 + t17159;
  t17190 = t17157 + t17188 + t17189;
  t16945 = t16690 + t16943 + t16944;
  t17301 = 3.2*t14378*t16969;
  t17302 = 3.2*t14397*t16976;
  t17303 = t17301 + t17302;
  t17204 = 3.2*t16987*t10867;
  t17205 = 3.2*t16983*t10857;
  t17206 = t17204 + t17188 + t17205 + t17189;
  t16984 = 3.2*t16983*t8902;
  t16988 = 3.2*t16987*t9014;
  t16989 = t16943 + t16984 + t16988 + t16944;
  t17313 = 3.2*t16987*t13375;
  t17314 = 3.2*t16983*t13881;
  t17315 = 3.2*t14378*t17001;
  t17316 = 3.2*t14397*t17005;
  t17317 = t17313 + t17314 + t17315 + t17316;
  t17120 = 0.748*t162;
  t17121 = 3.2*t14378*t8902;
  t17122 = 3.2*t14397*t9014;
  t17123 = t17120 + t17121 + t17122;
  t17383 = 0.748*t11301;
  t17384 = 3.2*t14397*t13375;
  t17385 = 3.2*t14378*t13881;
  t17386 = 0.67 + t17383 + t17384 + t17385;
  t17407 = Power(t14397,2);
  t17409 = Power(t14378,2);
  t14445 = -0.768*t8902;
  t17155 = -0.768*t10857;
  t17275 = -0.768*t13881;
  t17276 = -0.2 + t17275;
  t17412 = -0.768*t14378;
  t17413 = -0.2 + t17412;
  t17439 = 0.768*t16830*t16954;
  t17440 = 0.768*t16782*t16939;
  t17124 = 0.768*t8902;
  t17248 = 0.768*t10857;
  t17387 = 0.768*t13881;
  t17388 = 0.2 + t17387;
  t17433 = 0.768*t14378;
  t17434 = 0.2 + t17433;
  t14245 = -0.748*t10691;
  t14282 = -3.2*t14270*t10756;
  t14340 = -3.2*t14337*t10836;
  t14353 = t14245 + t14282 + t14340;
  t17146 = -0.748*t10879;
  t17147 = -3.2*t14337*t11270;
  t17148 = -3.2*t14270*t10921;
  t17149 = t17146 + t17147 + t17148;
  t17265 = -0.748*t14022;
  t17266 = -3.2*t14337*t14161;
  t17267 = -3.2*t14270*t14192;
  t17268 = -0.67 + t17265 + t17266 + t17267;
  t17327 = 0.63*t86*t9315;
  t17328 = t17327 + t17278 + t17279 + t17280 + t17284;
  t17329 = -1.*var4[2]*t17328;
  t17330 = 0.63*t9315*t109;
  t17331 = t17330 + t17288 + t17289 + t17290 + t17294;
  t17332 = -1.*var4[0]*t17331;
  t17164 = 3.2*t14270*t16895;
  t17165 = 3.2*t14337*t16912;
  t17166 = t17163 + t17164 + t17165;
  t17219 = t17163 + t17217 + t17218;
  t17018 = t16774 + t17016 + t17017;
  t17333 = 0.748*t17038;
  t17334 = 3.2*t14270*t17051;
  t17335 = 3.2*t14337*t17058;
  t17336 = t17333 + t17334 + t17335;
  t17348 = -1.03*t10719*t16881;
  t17350 = -1.*t10879*t10727;
  t17351 = t17281 + t17350;
  t17352 = 1.43*t17351;
  t17353 = t17348 + t17349 + t17352;
  t17354 = -1.*var4[2]*t17353;
  t17355 = -1.03*t10719*t10879;
  t17356 = 1.03*t10691*t10727;
  t17357 = -1.*t10691*t10727;
  t17358 = t17291 + t17357;
  t17359 = 1.43*t17358;
  t17360 = t17355 + t17356 + t17359;
  t17361 = -1.*var4[0]*t17360;
  t17235 = 3.2*t17070*t11270;
  t17236 = 3.2*t17066*t10921;
  t17237 = t17235 + t17236 + t17217 + t17218;
  t17067 = 3.2*t17066*t10756;
  t17071 = 3.2*t17070*t10836;
  t17072 = t17067 + t17016 + t17071 + t17017;
  t17362 = 3.2*t17070*t14161;
  t17363 = 3.2*t14270*t17084;
  t17364 = 3.2*t17066*t14192;
  t17365 = 3.2*t14337*t17088;
  t17366 = t17362 + t17363 + t17364 + t17365;
  t17125 = 0.748*t10691;
  t17126 = 3.2*t14270*t10756;
  t17127 = 3.2*t14337*t10836;
  t17128 = t17125 + t17126 + t17127;
  t17389 = 0.748*t14022;
  t17390 = 3.2*t14337*t14161;
  t17391 = 3.2*t14270*t14192;
  t17392 = 0.67 + t17389 + t17390 + t17391;
  t17445 = Power(t14337,2);
  t17447 = Power(t14270,2);
  t17395 = -1.03*t14050*t10691;
  t17396 = t10719*t10691;
  t17397 = t10879*t10727;
  t17398 = t17396 + t17397;
  t17399 = -1.43*t17398;
  t17402 = -0.63*t86*t9512;
  t17403 = -1.03*t14050*t10879;
  t17404 = 1.03*t16881*t10727;
  t17405 = -1.43*t17293;
  t14355 = -0.768*t10756;
  t17150 = -0.768*t10921;
  t17269 = -0.768*t14192;
  t17270 = -0.2 + t17269;
  t17450 = -0.768*t14270;
  t17451 = -0.2 + t17450;
  t17480 = 0.768*t16830*t17027;
  t17481 = 0.768*t16782*t17014;
  t17129 = 0.768*t10756;
  t17249 = 0.768*t10921;
  t17393 = 0.768*t14192;
  t17394 = 0.2 + t17393;
  t17471 = 0.768*t14270;
  t17472 = 0.2 + t17471;
  t17485 = 1.03*t10719*t10691;
  p_output1[0]=t100 + t10712 - 3.2*t10758 - 3.2*t10842 + t128 - 6.8*t153 + t5943 - 3.2*t8951 - 3.2*t9045 - 6.8*t9835;
  p_output1[1]=t11275;
  p_output1[2]=t14206;
  p_output1[3]=t14353;
  p_output1[4]=t14355;
  p_output1[5]=t14431;
  p_output1[6]=t14445;
  p_output1[7]=0.768*t10857*t14454 + t16686*t16716 + 0.768*t10921*t16737 + t16770*t16777 + t16830*t16920 + t16923*t16932 + t16782*(6.4*t10756*t10921 + 6.4*t10836*t11270 + t16783 + t16784 + t16801 + t16807 + 6.4*t10857*t8902 + 6.4*t10867*t9014);
  p_output1[8]=t16942 + t16686*t16945 + t16782*(t16783 + t16784 + t16947 + t16948) + t16830*t16957 + t16923*t16978;
  p_output1[9]=t16942 + t16782*(t16947 + t16948) + t16686*t16989 + t16830*t16993 + t16923*t17007;
  p_output1[10]=t17015 + t16770*t17018 + t16782*(t16801 + t16807 + t17020 + t17021) + t16830*t17030 + t16923*t17060;
  p_output1[11]=t17015 + t16782*(t17020 + t17021) + t16770*t17072 + t16830*t17076 + t16923*t17090;
  p_output1[12]=3.2*t10758 + 3.2*t10842 + 6.8*t153 + t16842 + t16869 + t17093 + t17094 + 3.2*t8951 + 3.2*t9045 + 6.8*t9835;
  p_output1[13]=t17110;
  p_output1[14]=t17119;
  p_output1[15]=t17123;
  p_output1[16]=t17124;
  p_output1[17]=t17128;
  p_output1[18]=t17129;
  p_output1[19]=-1.;
  p_output1[20]=t11275;
  p_output1[21]=t100 + t10712 + t128 - 6.8*t16836 - 3.2*t16859 - 3.2*t16861 - 6.8*t16866 - 3.2*t16899 - 3.2*t16904 + t5943;
  p_output1[22]=t17145;
  p_output1[23]=t17149;
  p_output1[24]=t17150;
  p_output1[25]=t17154;
  p_output1[26]=t17155;
  p_output1[27]=0.768*t14454*t16857 + 0.768*t16737*t16895 + t16782*t16920 + t16686*t17160 + t16770*t17166 + t16830*(t16783 + t16801 + 6.4*t10857*t16857 + 6.4*t10867*t16864 + 6.4*t10921*t16895 + 6.4*t11270*t16912 + t17168 + t17171) + t16923*t17184;
  p_output1[28]=t16782*t16957 + t17187 + t16686*t17190 + t16830*(t16783 + t17168 + t17192 + t17193) + t16923*t17201;
  p_output1[29]=t16782*t16993 + t17187 + t16830*(t17192 + t17193) + t16686*t17206 + t16923*t17213;
  p_output1[30]=t16782*t17030 + t17216 + t16770*t17219 + t16830*(t16801 + t17171 + t17221 + t17222) + t16923*t17232;
  p_output1[31]=t16782*t17076 + t17216 + t16830*(t17221 + t17222) + t16770*t17237 + t16923*t17244;
  p_output1[32]=t17110;
  p_output1[33]=t16837 + t16842 + t16860 + t16862 + t16867 + t16869 + t16900 + t16908 + t17093 + t17094;
  p_output1[34]=t16932;
  p_output1[35]=t16716;
  p_output1[36]=t17248;
  p_output1[37]=t16777;
  p_output1[38]=t17249;
  p_output1[39]=-1.;
  p_output1[40]=t14206;
  p_output1[41]=t17145;
  p_output1[42]=-3.3612 - 6.8*t17250 - 3.2*t17252 - 3.2*t17254 - 6.8*t17256 - 6.8*t17258 - 3.2*t17260 - 3.2*t17262;
  p_output1[43]=t17268;
  p_output1[44]=t17270;
  p_output1[45]=t17274;
  p_output1[46]=t17276;
  p_output1[47]=t16782*t16932 + t16830*t17184 - 1.*(-0.63*t109*t13943 + t17288 + t17289 + t17290 + t17294)*var4[0] - 1.*(t17277 + t17278 + t17279 + t17280 + t17284)*var4[2];
  p_output1[48]=0.768*t14454*t16969 + t16923*(6.4*t13881*t16969 + 6.4*t13375*t16976) + t16782*t16978 + t16830*t17201 + t16686*t17303;
  p_output1[49]=0.768*t14454*t17001 + t16923*(6.4*t13881*t17001 + 6.4*t13375*t17005) + t16782*t17007 + t16830*t17213 + t16686*t17317;
  p_output1[50]=0.768*t16737*t17051 + t16923*(13.6*t13967*t17034 + 13.6*t14022*t17038 + 6.4*t14192*t17051 + 6.4*t14161*t17058) + t16782*t17060 + t16830*t17232 + t17329 + t17332 + t16770*t17336;
  p_output1[51]=0.768*t16737*t17084 + t16923*(6.4*t14192*t17084 + 6.4*t14161*t17088) + t16782*t17090 + t16830*t17244 + t17354 + t17361 + t16770*t17366;
  p_output1[52]=t17119;
  p_output1[53]=t16932;
  p_output1[54]=3.3612 + 6.8*t17250 + 3.2*t17252 + 3.2*t17254 + 6.8*t17256 + 6.8*t17258 + 3.2*t17260 + 3.2*t17262;
  p_output1[55]=t17386;
  p_output1[56]=t17388;
  p_output1[57]=t17392;
  p_output1[58]=t17394;
  p_output1[59]=t17277 + t17278 + t17349 + t17395 + t17399;
  p_output1[60]=0.63*t109*t13943 + t17402 + t17403 + t17404 + t17405;
  p_output1[61]=t14431;
  p_output1[62]=t17154;
  p_output1[63]=t17274;
  p_output1[64]=-1.58228 - 3.2*t17407 - 3.2*t17409;
  p_output1[65]=t17413;
  p_output1[66]=t16716*t16782 + t16830*t17160;
  p_output1[67]=t16782*t16945 + t16830*t17190 + t16923*t17303;
  p_output1[68]=0.768*t14454*t16983 + t16686*(6.4*t14378*t16983 + 6.4*t14397*t16987) + t16782*t16989 + t16830*t17206 + t16923*t17317;
  p_output1[69]=t17123;
  p_output1[70]=t16716;
  p_output1[71]=t17386;
  p_output1[72]=1.58228 + 3.2*t17407 + 3.2*t17409;
  p_output1[73]=t17434;
  p_output1[74]=t14445;
  p_output1[75]=t17155;
  p_output1[76]=t17276;
  p_output1[77]=t17413;
  p_output1[78]=-1.2143199999999998;
  p_output1[79]=0.768*t10857*t16782 + 0.768*t16830*t16857;
  p_output1[80]=0.768*t16923*t16969 + t17439 + t17440;
  p_output1[81]=0.768*t16686*t16983 + 0.768*t16923*t17001 + t17439 + t17440;
  p_output1[82]=t17124;
  p_output1[83]=t17248;
  p_output1[84]=t17388;
  p_output1[85]=t17434;
  p_output1[86]=1.2143199999999998;
  p_output1[87]=t14353;
  p_output1[88]=t17149;
  p_output1[89]=t17268;
  p_output1[90]=-1.58228 - 3.2*t17445 - 3.2*t17447;
  p_output1[91]=t17451;
  p_output1[92]=t16777*t16782 + t16830*t17166 + t17329 + t17332;
  p_output1[93]=t16782*t17018 + t16830*t17219 + t17329 + t17332 + t16923*t17336;
  p_output1[94]=0.768*t16737*t17066 + t16770*(6.4*t14270*t17066 + 6.4*t14337*t17070) + t16782*t17072 + t16830*t17237 + t17354 + t17361 + t16923*t17366;
  p_output1[95]=t17128;
  p_output1[96]=t16777;
  p_output1[97]=t17392;
  p_output1[98]=1.58228 + 3.2*t17445 + 3.2*t17447;
  p_output1[99]=t17472;
  p_output1[100]=t17278 + t17327 + t17349 + t17395 + t17399;
  p_output1[101]=t17402 + t17403 + t17404 + t17405 - 0.63*t109*t9315;
  p_output1[102]=t14355;
  p_output1[103]=t17150;
  p_output1[104]=t17270;
  p_output1[105]=t17451;
  p_output1[106]=-1.2143199999999998;
  p_output1[107]=0.768*t10921*t16782 + 0.768*t16830*t16895 + t17354 + t17361;
  p_output1[108]=0.768*t16923*t17051 + t17354 + t17361 + t17480 + t17481;
  p_output1[109]=0.768*t16770*t17066 + 0.768*t16923*t17084 + t17480 + t17481 - 1.*(t17356 + 1.03*t10719*t9538 + 1.43*(t17357 - 1.*t10719*t9538))*var4[0] - 1.*(t17349 + 1.43*(-1.*t10691*t10719 + t17350) + t17485)*var4[2];
  p_output1[110]=t17129;
  p_output1[111]=t17249;
  p_output1[112]=t17394;
  p_output1[113]=t17472;
  p_output1[114]=1.2143199999999998;
  p_output1[115]=t17280 + t17485 - 1.43*(t17396 - 1.*t10727*t9538);
  p_output1[116]=-1.03*t10691*t10727 + 1.03*t10719*t10879 - 1.43*t17358;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapLeftImpact.hh"

namespace LeftImpact
{

void J_dxDiscreteMapLeftImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
