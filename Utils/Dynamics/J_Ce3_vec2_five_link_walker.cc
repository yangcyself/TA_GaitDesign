/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:57:08 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1753;
  double t177;
  double t217;
  double t1856;
  double t2788;
  double t130;
  double t2828;
  double t2945;
  double t3051;
  double t6541;
  double t6595;
  double t6598;
  double t6619;
  double t6645;
  double t1123;
  double t2026;
  double t2031;
  double t2774;
  double t3212;
  double t5819;
  double t6785;
  double t6781;
  double t6782;
  double t6789;
  double t6797;
  double t6800;
  double t6811;
  double t6841;
  double t6842;
  double t6844;
  double t6845;
  double t6847;
  double t6783;
  double t6792;
  double t6793;
  double t6794;
  double t6815;
  double t6818;
  double t6919;
  double t6929;
  double t6947;
  double t6360;
  double t6451;
  double t6480;
  double t6978;
  double t6980;
  double t6984;
  double t6721;
  double t6669;
  double t6697;
  double t6714;
  double t6720;
  double t6722;
  double t7059;
  double t7082;
  double t7083;
  double t7085;
  double t6825;
  double t6828;
  double t6829;
  double t7109;
  double t7116;
  double t7126;
  double t6859;
  double t6853;
  double t6854;
  double t6856;
  double t6857;
  double t6861;
  double t7148;
  double t6962;
  double t6966;
  double t6975;
  double t7021;
  double t7026;
  double t7073;
  double t7079;
  double t7039;
  double t7041;
  double t7045;
  double t7057;
  double t7063;
  double t7100;
  double t7101;
  double t7107;
  double t7132;
  double t7134;
  double t7163;
  double t7167;
  double t7140;
  double t7141;
  double t7142;
  double t7147;
  double t7152;
  double t7313;
  double t7325;
  double t7327;
  double t7334;
  double t7338;
  double t7343;
  double t7368;
  double t7369;
  double t7370;
  double t7371;
  double t7377;
  double t8740;
  double t8742;
  double t8743;
  double t8744;
  double t8755;
  double t8756;
  double t8757;
  double t6482;
  double t6649;
  double t6658;
  double t6661;
  double t6737;
  double t6741;
  double t6752;
  double t6755;
  double t10379;
  double t10547;
  double t10571;
  double t10599;
  double t10600;
  double t6954;
  double t6959;
  double t6960;
  double t6989;
  double t6992;
  double t7008;
  double t7188;
  double t7197;
  double t7199;
  double t7205;
  double t7211;
  double t7212;
  double t7225;
  double t7231;
  double t10666;
  double t10670;
  double t7293;
  double t7294;
  double t7298;
  double t7301;
  double t7304;
  double t7309;
  double t7330;
  double t7345;
  double t7351;
  double t7355;
  double t7357;
  double t7358;
  double t10799;
  double t10800;
  double t10817;
  double t10601;
  double t10603;
  double t10613;
  double t10664;
  double t10665;
  double t10674;
  double t10677;
  double t10681;
  double t10683;
  double t10684;
  double t10689;
  double t10692;
  double t10700;
  double t10701;
  double t10702;
  double t10745;
  double t10826;
  double t10844;
  double t11895;
  double t14936;
  double t14953;
  double t12062;
  double t14958;
  double t14959;
  double t12072;
  double t6830;
  double t6833;
  double t6836;
  double t6849;
  double t6852;
  double t6879;
  double t6881;
  double t6885;
  double t6892;
  double t6899;
  double t15207;
  double t15212;
  double t15213;
  double t15218;
  double t15222;
  double t7086;
  double t7087;
  double t7099;
  double t7127;
  double t7128;
  double t7131;
  double t7261;
  double t7264;
  double t7265;
  double t7272;
  double t7277;
  double t7278;
  double t7281;
  double t7282;
  double t15259;
  double t15260;
  double t8735;
  double t7403;
  double t7407;
  double t7411;
  double t8734;
  double t8736;
  double t8737;
  double t8738;
  double t8739;
  double t8745;
  double t8901;
  double t8912;
  double t8979;
  double t8998;
  double t9023;
  double t15309;
  double t15310;
  double t15311;
  double t15312;
  double t15359;
  double t15365;
  double t15226;
  double t15227;
  double t15228;
  double t15257;
  double t15258;
  double t15261;
  double t15262;
  double t15269;
  double t15276;
  double t15277;
  double t15284;
  double t15285;
  double t15288;
  double t15289;
  double t15290;
  double t15308;
  double t15352;
  double t15353;
  double t15369;
  double t15399;
  double t15401;
  double t15372;
  double t15406;
  double t15407;
  double t15374;
  double t15435;
  double t15436;
  double t15437;
  double t15438;
  double t15441;
  double t15442;
  double t15444;
  double t15449;
  double t15450;
  double t15452;
  double t15453;
  double t15454;
  double t15455;
  double t15457;
  double t15458;
  double t15459;
  double t15461;
  double t15462;
  double t15463;
  double t15464;
  double t15465;
  double t15466;
  double t15505;
  double t15545;
  double t15546;
  double t15547;
  double t15548;
  double t15549;
  double t15550;
  double t15551;
  double t15552;
  double t15556;
  double t15515;
  double t15523;
  double t15524;
  double t15525;
  double t15529;
  double t15530;
  double t15531;
  double t15532;
  double t10629;
  double t10633;
  double t10678;
  double t10680;
  double t10703;
  double t10704;
  double t10822;
  double t10860;
  double t10874;
  double t10899;
  double t11959;
  double t12071;
  double t12080;
  double t12138;
  double t12156;
  double t12190;
  double t12263;
  double t12279;
  double t15568;
  double t15596;
  double t15597;
  double t15598;
  double t15569;
  double t14846;
  double t14878;
  double t14883;
  double t15570;
  double t12352;
  double t12414;
  double t14630;
  double t15571;
  double t15574;
  double t15575;
  double t15576;
  double t15577;
  double t15578;
  double t15581;
  double t15582;
  double t15583;
  double t15584;
  double t15585;
  double t15586;
  double t15587;
  double t15590;
  double t14955;
  double t14960;
  double t14961;
  double t15592;
  double t15595;
  double t15601;
  double t14982;
  double t14986;
  double t15026;
  double t15606;
  double t15629;
  double t15630;
  double t15610;
  double t15534;
  double t15535;
  double t15649;
  double t15650;
  double t15651;
  double t15652;
  double t15653;
  double t15663;
  double t15664;
  double t15665;
  double t15666;
  double t15667;
  double t15656;
  double t15657;
  double t15658;
  double t14804;
  double t14887;
  double t14890;
  double t14891;
  double t14892;
  double t14918;
  double t14930;
  double t14935;
  double t14962;
  double t15030;
  double t15031;
  double t15032;
  double t15033;
  double t15034;
  double t15617;
  double t15618;
  double t15619;
  double t15620;
  double t15621;
  double t15622;
  double t15623;
  double t15624;
  double t15625;
  double t15626;
  double t15627;
  double t15628;
  double t15631;
  double t15632;
  double t15633;
  double t15634;
  double t15635;
  double t15636;
  double t15637;
  double t15638;
  double t15639;
  double t15640;
  double t15641;
  double t15642;
  double t15643;
  double t15644;
  double t15645;
  double t15646;
  double t15647;
  double t15648;
  double t15655;
  double t15696;
  double t15705;
  double t15706;
  double t15707;
  double t15698;
  double t15699;
  double t15700;
  double t15672;
  double t15246;
  double t15256;
  double t15263;
  double t15268;
  double t15295;
  double t15296;
  double t15298;
  double t15299;
  double t15300;
  double t15301;
  double t15303;
  double t15304;
  double t15305;
  double t15307;
  double t15349;
  double t15366;
  double t15367;
  double t15368;
  double t15371;
  double t15373;
  double t15375;
  double t15376;
  double t15377;
  double t15378;
  double t15379;
  double t15380;
  double t15712;
  double t15747;
  double t15748;
  double t15749;
  double t15750;
  double t15713;
  double t15386;
  double t15387;
  double t15388;
  double t15381;
  double t15382;
  double t15383;
  double t15384;
  double t15714;
  double t15715;
  double t15718;
  double t15719;
  double t15720;
  double t15721;
  double t15722;
  double t15725;
  double t15726;
  double t15727;
  double t15728;
  double t15729;
  double t15730;
  double t15731;
  double t15741;
  double t15405;
  double t15408;
  double t15409;
  double t15743;
  double t15745;
  double t15753;
  double t15415;
  double t15422;
  double t15423;
  double t15758;
  double t15782;
  double t15783;
  double t15762;
  double t15538;
  double t15539;
  double t15803;
  double t15804;
  double t15805;
  double t15806;
  double t15807;
  double t15817;
  double t15818;
  double t15819;
  double t15820;
  double t15821;
  double t15822;
  double t15823;
  double t15810;
  double t15811;
  double t15812;
  double t15385;
  double t15389;
  double t15390;
  double t15391;
  double t15392;
  double t15393;
  double t15397;
  double t15398;
  double t15414;
  double t15430;
  double t15431;
  double t15432;
  double t15433;
  double t15434;
  double t15769;
  double t15770;
  double t15771;
  double t15772;
  double t15773;
  double t15774;
  double t15775;
  double t15776;
  double t15777;
  double t15778;
  double t15779;
  double t15780;
  double t15781;
  double t15784;
  double t15785;
  double t15786;
  double t15787;
  double t15788;
  double t15789;
  double t15790;
  double t15791;
  double t15792;
  double t15793;
  double t15794;
  double t15795;
  double t15796;
  double t15797;
  double t15798;
  double t15799;
  double t15800;
  double t15801;
  double t15802;
  double t15809;
  double t15853;
  double t15862;
  double t15863;
  double t15864;
  double t15855;
  double t15856;
  double t15857;
  double t15828;
  t1753 = Cos(var1[3]);
  t177 = Cos(var1[4]);
  t217 = Sin(var1[3]);
  t1856 = Sin(var1[4]);
  t2788 = Sin(var1[2]);
  t130 = Cos(var1[2]);
  t2828 = t1753*t177;
  t2945 = -1.*t217*t1856;
  t3051 = t2828 + t2945;
  t6541 = -1.*t177;
  t6595 = 1. + t6541;
  t6598 = 0.4*t6595;
  t6619 = 0.64*t177;
  t6645 = t6598 + t6619;
  t1123 = -1.*t177*t217;
  t2026 = -1.*t1753*t1856;
  t2031 = t1123 + t2026;
  t2774 = -1.*t130*t2031;
  t3212 = t2788*t3051;
  t5819 = t2774 + t3212;
  t6785 = Cos(var1[5]);
  t6781 = Cos(var1[6]);
  t6782 = Sin(var1[5]);
  t6789 = Sin(var1[6]);
  t6797 = t6785*t6781;
  t6800 = -1.*t6782*t6789;
  t6811 = t6797 + t6800;
  t6841 = -1.*t6781;
  t6842 = 1. + t6841;
  t6844 = 1.03*t6842;
  t6845 = 1.27*t6781;
  t6847 = t6844 + t6845;
  t6783 = -1.*t6781*t6782;
  t6792 = -1.*t6785*t6789;
  t6793 = t6783 + t6792;
  t6794 = -1.*t130*t6793;
  t6815 = t2788*t6811;
  t6818 = t6794 + t6815;
  t6919 = -1.*t1753*t2788;
  t6929 = -1.*t130*t217;
  t6947 = t6919 + t6929;
  t6360 = t1753*t2788;
  t6451 = t130*t217;
  t6480 = t6360 + t6451;
  t6978 = -1.*t130*t1753;
  t6980 = t2788*t217;
  t6984 = t6978 + t6980;
  t6721 = -1.*t130*t3051;
  t6669 = t177*t217;
  t6697 = t1753*t1856;
  t6714 = t6669 + t6697;
  t6720 = t2788*t6714;
  t6722 = t6720 + t6721;
  t7059 = -1.*t2788*t3051;
  t7082 = -1.*t6785*t2788;
  t7083 = -1.*t130*t6782;
  t7085 = t7082 + t7083;
  t6825 = t6785*t2788;
  t6828 = t130*t6782;
  t6829 = t6825 + t6828;
  t7109 = -1.*t130*t6785;
  t7116 = t2788*t6782;
  t7126 = t7109 + t7116;
  t6859 = -1.*t130*t6811;
  t6853 = t6781*t6782;
  t6854 = t6785*t6789;
  t6856 = t6853 + t6854;
  t6857 = t2788*t6856;
  t6861 = t6857 + t6859;
  t7148 = -1.*t2788*t6811;
  t6962 = t130*t1753;
  t6966 = -1.*t2788*t217;
  t6975 = t6962 + t6966;
  t7021 = -1.*t2788*t2031;
  t7026 = t7021 + t6721;
  t7073 = t130*t2031;
  t7079 = t7073 + t7059;
  t7039 = -1.*t2788*t6714;
  t7041 = t130*t3051;
  t7045 = t7039 + t7041;
  t7057 = -1.*t130*t6714;
  t7063 = t7057 + t7059;
  t7100 = t130*t6785;
  t7101 = -1.*t2788*t6782;
  t7107 = t7100 + t7101;
  t7132 = -1.*t2788*t6793;
  t7134 = t7132 + t6859;
  t7163 = t130*t6793;
  t7167 = t7163 + t7148;
  t7140 = -1.*t2788*t6856;
  t7141 = t130*t6811;
  t7142 = t7140 + t7141;
  t7147 = -1.*t130*t6856;
  t7152 = t7147 + t7148;
  t7313 = t6645*t217;
  t7325 = 0.24*t1753*t1856;
  t7327 = t7313 + t7325;
  t7334 = t1753*t6645;
  t7338 = -0.24*t217*t1856;
  t7343 = t7334 + t7338;
  t7368 = -1.*t6785;
  t7369 = 1. + t7368;
  t7370 = 0.63*t7369;
  t7371 = 0.74*t6785;
  t7377 = t7370 + t7371;
  t8740 = -0.63*t6782;
  t8742 = t6847*t6782;
  t8743 = 0.24*t6785*t6789;
  t8744 = t8740 + t8742 + t8743;
  t8755 = t6785*t6847;
  t8756 = -0.24*t6782*t6789;
  t8757 = t7370 + t8755 + t8756;
  t6482 = -0.748*t6480;
  t6649 = t6645*t1856;
  t6658 = -0.24*t177*t1856;
  t6661 = t6649 + t6658;
  t6737 = t6645*t177;
  t6741 = Power(t1856,2);
  t6752 = 0.24*t6741;
  t6755 = t6737 + t6752;
  t10379 = -1.*t1753*t177;
  t10547 = t217*t1856;
  t10571 = t10379 + t10547;
  t10599 = -1.*t2788*t10571;
  t10600 = t2774 + t10599;
  t6954 = Power(t6947,2);
  t6959 = -13.6*t6954;
  t6960 = -13.6*t6947*t6480;
  t6989 = -13.6*t6975*t6984;
  t6992 = Power(t6984,2);
  t7008 = -13.6*t6992;
  t7188 = -20.4*t6947*t6975;
  t7197 = -6.8*t6480*t6975;
  t7199 = -20.4*t6947*t6984;
  t7205 = -6.8*t6480*t6984;
  t7211 = t2788*t2031;
  t7212 = t7211 + t7041;
  t7225 = t130*t6714;
  t7231 = t7225 + t3212;
  t10666 = t130*t10571;
  t10670 = t7021 + t10666;
  t7293 = Power(t1753,2);
  t7294 = 0.11*t7293;
  t7298 = Power(t217,2);
  t7301 = 0.11*t7298;
  t7304 = t7294 + t7301;
  t7309 = -6.8*t6480*t7304;
  t7330 = -1.*t7327*t3051;
  t7345 = -1.*t2031*t7343;
  t7351 = t7330 + t7345;
  t7355 = t7327*t6714;
  t7357 = t3051*t7343;
  t7358 = t7355 + t7357;
  t10799 = -1.*t6645*t217;
  t10800 = -0.24*t1753*t1856;
  t10817 = t10799 + t10800;
  t10601 = 0.384*var2[4]*t10600;
  t10603 = -3.2*t6661*t7026;
  t10613 = -3.2*t6755*t10600;
  t10664 = -6.4*t7026*t7045;
  t10665 = -6.4*t7079*t7063;
  t10674 = -6.4*t7026*t10670;
  t10677 = -6.4*t7079*t10600;
  t10681 = -6.4*t7045*t7079;
  t10683 = -3.2*t7212*t7063;
  t10684 = -3.2*t7026*t7231;
  t10689 = -6.4*t7079*t10670;
  t10692 = -3.2*t7212*t10600;
  t10700 = t2788*t10571;
  t10701 = t7073 + t10700;
  t10702 = -3.2*t7026*t10701;
  t10745 = -3.2*t7026*t7351;
  t10826 = t7327*t3051;
  t10844 = t2031*t7343;
  t11895 = -3.2*t7358*t10600;
  t14936 = -0.24*t177*t217;
  t14953 = t14936 + t10800;
  t12062 = -1.*t2031*t7327;
  t14958 = 0.24*t1753*t177;
  t14959 = t14958 + t7338;
  t12072 = -1.*t7343*t10571;
  t6830 = -0.748*t6829;
  t6833 = -0.63*t6789;
  t6836 = -0.24*t6781*t6789;
  t6849 = t6847*t6789;
  t6852 = t6833 + t6836 + t6849;
  t6879 = -0.63*t6781;
  t6881 = t6781*t6847;
  t6885 = Power(t6789,2);
  t6892 = 0.24*t6885;
  t6899 = t6879 + t6881 + t6892;
  t15207 = -1.*t6785*t6781;
  t15212 = t6782*t6789;
  t15213 = t15207 + t15212;
  t15218 = -1.*t2788*t15213;
  t15222 = t6794 + t15218;
  t7086 = Power(t7085,2);
  t7087 = -13.6*t7086;
  t7099 = -13.6*t7085*t6829;
  t7127 = -13.6*t7107*t7126;
  t7128 = Power(t7126,2);
  t7131 = -13.6*t7128;
  t7261 = -20.4*t7085*t7107;
  t7264 = -6.8*t6829*t7107;
  t7265 = -20.4*t7085*t7126;
  t7272 = -6.8*t6829*t7126;
  t7277 = t2788*t6793;
  t7278 = t7277 + t7141;
  t7281 = t130*t6856;
  t7282 = t7281 + t6815;
  t15259 = t130*t15213;
  t15260 = t7132 + t15259;
  t8735 = t7377*t6785;
  t7403 = t7377*t6782;
  t7407 = -0.11*t6785*t6782;
  t7411 = t7403 + t7407;
  t8734 = -6.8*t7411*t7126;
  t8736 = Power(t6782,2);
  t8737 = 0.11*t8736;
  t8738 = t8735 + t8737;
  t8739 = -6.8*t6829*t8738;
  t8745 = -1.*t8744*t6811;
  t8901 = -1.*t6793*t8757;
  t8912 = t8745 + t8901;
  t8979 = t8744*t6856;
  t8998 = t6811*t8757;
  t9023 = t8979 + t8998;
  t15309 = 0.63*t6782;
  t15310 = -1.*t6847*t6782;
  t15311 = -0.24*t6785*t6789;
  t15312 = t15309 + t15310 + t15311;
  t15359 = -0.63*t6785;
  t15365 = t15359 + t8755 + t8756;
  t15226 = 0.384*var2[6]*t15222;
  t15227 = -3.2*t6852*t7134;
  t15228 = -3.2*t6899*t15222;
  t15257 = -6.4*t7134*t7142;
  t15258 = -6.4*t7167*t7152;
  t15261 = -6.4*t7134*t15260;
  t15262 = -6.4*t7167*t15222;
  t15269 = -6.4*t7142*t7167;
  t15276 = -3.2*t7278*t7152;
  t15277 = -3.2*t7134*t7282;
  t15284 = -6.4*t7167*t15260;
  t15285 = -3.2*t7278*t15222;
  t15288 = t2788*t15213;
  t15289 = t7163 + t15288;
  t15290 = -3.2*t7134*t15289;
  t15308 = -3.2*t7134*t8912;
  t15352 = t8744*t6811;
  t15353 = t6793*t8757;
  t15369 = -3.2*t9023*t15222;
  t15399 = -0.24*t6781*t6782;
  t15401 = t15399 + t15311;
  t15372 = -1.*t6793*t8744;
  t15406 = 0.24*t6785*t6781;
  t15407 = t15406 + t8756;
  t15374 = -1.*t8757*t15213;
  t15435 = -6.8*t6954;
  t15436 = -6.8*t6947*t6480;
  t15437 = Power(t6975,2);
  t15438 = -6.8*t15437;
  t15441 = -6.8*t6975*t6984;
  t15442 = -3.2*t7026*t7212;
  t15444 = Power(t7045,2);
  t15449 = -3.2*t15444;
  t15450 = Power(t7079,2);
  t15452 = -3.2*t15450;
  t15453 = -3.2*t7063*t7231;
  t15454 = -6.8*t7086;
  t15455 = -6.8*t7085*t6829;
  t15457 = Power(t7107,2);
  t15458 = -6.8*t15457;
  t15459 = -6.8*t7107*t7126;
  t15461 = -3.2*t7134*t7278;
  t15462 = Power(t7142,2);
  t15463 = -3.2*t15462;
  t15464 = Power(t7167,2);
  t15465 = -3.2*t15464;
  t15466 = -3.2*t7152*t7282;
  t15505 = t15435 + t15436 + t15438 + t15441 + t15442 + t15449 + t15452 + t15453 + t15454 + t15455 + t15458 + t15459 + t15461 + t15463 + t15465 + t15466;
  t15545 = 2.88*t130;
  t15546 = -6.8*t6984*t7304;
  t15547 = -3.2*t7063*t7351;
  t15548 = -3.2*t7026*t7358;
  t15549 = -6.8*t7085*t7411;
  t15550 = -6.8*t7126*t8738;
  t15551 = -3.2*t7152*t8912;
  t15552 = -3.2*t7134*t9023;
  t15556 = t15545 + t15546 + t15547 + t15548 + t15549 + t15550 + t15551 + t15552;
  t15515 = -0.748*t6984;
  t15523 = -3.2*t6755*t7026;
  t15524 = -3.2*t6661*t7063;
  t15525 = t15515 + t15523 + t15524;
  t15529 = -0.748*t7126;
  t15530 = -3.2*t6899*t7134;
  t15531 = -3.2*t6852*t7152;
  t15532 = t15529 + t15530 + t15531;
  t10629 = t6482 + t10603 + t10613;
  t10633 = -0.5*var2[3]*t10629;
  t10678 = t6959 + t6960 + t6989 + t7008 + t10664 + t10665 + t10674 + t10677;
  t10680 = -0.5*var2[1]*t10678;
  t10703 = t7188 + t7197 + t7199 + t7205 + t10681 + t10683 + t10684 + t10689 + t10692 + t10702;
  t10704 = -0.5*var2[0]*t10703;
  t10822 = t10817*t3051;
  t10860 = t6714*t7343;
  t10874 = t10822 + t10826 + t10844 + t10860;
  t10899 = -3.2*t7026*t10874;
  t11959 = -1.*t2031*t10817;
  t12071 = -1.*t3051*t7343;
  t12080 = t11959 + t12062 + t12071 + t12072;
  t12138 = -3.2*t7063*t12080;
  t12156 = t7309 + t10745 + t10899 + t11895 + t12138;
  t12190 = -0.5*var2[2]*t12156;
  t12263 = t10601 + t10633 + t10680 + t10704 + t12190;
  t12279 = var2[1]*t12263;
  t15568 = t7225 + t10599;
  t15596 = -1.*t1753*t6645;
  t15597 = 0.24*t217*t1856;
  t15598 = t15596 + t15597;
  t15569 = 0.384*var2[4]*t15568;
  t14846 = Power(t177,2);
  t14878 = -0.24*t14846;
  t14883 = t6737 + t14878;
  t15570 = -3.2*t6661*t10670;
  t12352 = -1.*t6645*t1856;
  t12414 = 0.24*t177*t1856;
  t14630 = t12352 + t12414;
  t15571 = -3.2*t6755*t15568;
  t15574 = -6.4*t15450;
  t15575 = -6.4*t7045*t10670;
  t15576 = Power(t10670,2);
  t15577 = -6.4*t15576;
  t15578 = -6.4*t7079*t15568;
  t15581 = -6.4*t7212*t7079;
  t15582 = -3.2*t7231*t10670;
  t15583 = t6720 + t10666;
  t15584 = -3.2*t7079*t15583;
  t15585 = -3.2*t7212*t15568;
  t15586 = -3.2*t7045*t10701;
  t15587 = -6.4*t10670*t10701;
  t15590 = -3.2*t7351*t10670;
  t14955 = t14953*t3051;
  t14960 = t6714*t14959;
  t14961 = t14955 + t10826 + t10844 + t14960;
  t15592 = -3.2*t7358*t15568;
  t15595 = -1.*t6714*t7343;
  t15601 = -1.*t7327*t10571;
  t14982 = -1.*t2031*t14953;
  t14986 = -1.*t3051*t14959;
  t15026 = t14982 + t12062 + t14986 + t12072;
  t15606 = t2031*t7327;
  t15629 = -0.24*t1753*t177;
  t15630 = t15629 + t15597;
  t15610 = t7343*t10571;
  t15534 = -13.6*t6947*t6975;
  t15535 = -13.6*t6947*t6984;
  t15649 = -3.2*t7212*t7045;
  t15650 = -3.2*t7079*t7231;
  t15651 = -3.2*t7212*t10670;
  t15652 = -3.2*t7079*t10701;
  t15653 = t15435 + t15436 + t15438 + t15441 + t15649 + t15650 + t15651 + t15652;
  t15663 = -3.2*t7079*t7351;
  t15664 = -3.2*t7079*t10874;
  t15665 = -3.2*t7358*t10670;
  t15666 = -3.2*t7045*t12080;
  t15667 = t15546 + t15663 + t15664 + t15665 + t15666;
  t15656 = -3.2*t6661*t7079;
  t15657 = -3.2*t6755*t10670;
  t15658 = t15515 + t15656 + t15657;
  t14804 = -3.2*t14630*t7026;
  t14887 = -3.2*t14883*t7063;
  t14890 = t10603 + t14804 + t14887 + t10613;
  t14891 = -0.5*var2[3]*t14890;
  t14892 = t10664 + t10665 + t10674 + t10677;
  t14918 = -0.5*var2[1]*t14892;
  t14930 = t10681 + t10683 + t10684 + t10689 + t10692 + t10702;
  t14935 = -0.5*var2[0]*t14930;
  t14962 = -3.2*t7026*t14961;
  t15030 = -3.2*t7063*t15026;
  t15031 = t10745 + t14962 + t11895 + t15030;
  t15032 = -0.5*var2[2]*t15031;
  t15033 = t10601 + t14891 + t14918 + t14935 + t15032;
  t15034 = var2[1]*t15033;
  t15617 = -3.2*t14883*t7079;
  t15618 = -3.2*t14630*t10670;
  t15619 = t15617 + t15570 + t15618 + t15571;
  t15620 = -0.5*var2[3]*t15619;
  t15621 = t15574 + t15575 + t15577 + t15578;
  t15622 = -0.5*var2[1]*t15621;
  t15623 = t15581 + t15582 + t15584 + t15585 + t15586 + t15587;
  t15624 = -0.5*var2[0]*t15623;
  t15625 = -3.2*t10874*t10670;
  t15626 = -3.2*t14961*t10670;
  t15627 = -1.*t14953*t3051;
  t15628 = -1.*t2031*t14959;
  t15631 = -1.*t2031*t15630;
  t15632 = -1.*t10817*t10571;
  t15633 = -1.*t14953*t10571;
  t15634 = t15627 + t7345 + t15595 + t15628 + t15631 + t15632 + t15633 + t15601;
  t15635 = -3.2*t7045*t15634;
  t15636 = -3.2*t7079*t12080;
  t15637 = -3.2*t7079*t15026;
  t15638 = t2031*t10817;
  t15639 = t2031*t14953;
  t15640 = t14953*t6714;
  t15641 = t3051*t14959;
  t15642 = t3051*t15630;
  t15643 = t15638 + t15639 + t15606 + t15640 + t7357 + t15641 + t15642 + t15610;
  t15644 = -3.2*t7079*t15643;
  t15645 = t15590 + t15625 + t15626 + t15592 + t15635 + t15636 + t15637 + t15644;
  t15646 = -0.5*var2[2]*t15645;
  t15647 = t15569 + t15620 + t15622 + t15624 + t15646;
  t15648 = var2[1]*t15647;
  t15655 = 0.384*var2[4]*t10670;
  t15696 = t15649 + t15650 + t15651 + t15652;
  t15705 = -3.2*t7079*t14961;
  t15706 = -3.2*t7045*t15026;
  t15707 = t15663 + t15705 + t15665 + t15706;
  t15698 = -3.2*t14883*t7045;
  t15699 = -3.2*t14630*t7079;
  t15700 = t15698 + t15656 + t15699 + t15657;
  t15672 = 0.384*var2[1]*t10670;
  t15246 = t6830 + t15227 + t15228;
  t15256 = -0.5*var2[5]*t15246;
  t15263 = t7087 + t7099 + t7127 + t7131 + t15257 + t15258 + t15261 + t15262;
  t15268 = -0.5*var2[1]*t15263;
  t15295 = t7261 + t7264 + t7265 + t7272 + t15269 + t15276 + t15277 + t15284 + t15285 + t15290;
  t15296 = -0.5*var2[0]*t15295;
  t15298 = Power(t6785,2);
  t15299 = -0.11*t15298;
  t15300 = t8735 + t15299;
  t15301 = -6.8*t15300*t7085;
  t15303 = -1.*t7377*t6782;
  t15304 = 0.11*t6785*t6782;
  t15305 = t15303 + t15304;
  t15307 = -6.8*t15305*t7126;
  t15349 = t15312*t6811;
  t15366 = t6856*t15365;
  t15367 = t15349 + t15352 + t15353 + t15366;
  t15368 = -3.2*t7134*t15367;
  t15371 = -1.*t6793*t15312;
  t15373 = -1.*t6811*t15365;
  t15375 = t15371 + t15372 + t15373 + t15374;
  t15376 = -3.2*t7152*t15375;
  t15377 = t15301 + t8734 + t15307 + t8739 + t15308 + t15368 + t15369 + t15376;
  t15378 = -0.5*var2[2]*t15377;
  t15379 = t15226 + t15256 + t15268 + t15296 + t15378;
  t15380 = var2[1]*t15379;
  t15712 = t7281 + t15218;
  t15747 = 0.63*t6785;
  t15748 = -1.*t6785*t6847;
  t15749 = 0.24*t6782*t6789;
  t15750 = t15747 + t15748 + t15749;
  t15713 = 0.384*var2[6]*t15712;
  t15386 = Power(t6781,2);
  t15387 = -0.24*t15386;
  t15388 = t6879 + t15387 + t6881;
  t15381 = 0.63*t6789;
  t15382 = 0.24*t6781*t6789;
  t15383 = -1.*t6847*t6789;
  t15384 = t15381 + t15382 + t15383;
  t15714 = -3.2*t6852*t15260;
  t15715 = -3.2*t6899*t15712;
  t15718 = -6.4*t15464;
  t15719 = -6.4*t7142*t15260;
  t15720 = Power(t15260,2);
  t15721 = -6.4*t15720;
  t15722 = -6.4*t7167*t15712;
  t15725 = -6.4*t7278*t7167;
  t15726 = -3.2*t7282*t15260;
  t15727 = t6857 + t15259;
  t15728 = -3.2*t7167*t15727;
  t15729 = -3.2*t7278*t15712;
  t15730 = -3.2*t7142*t15289;
  t15731 = -6.4*t15260*t15289;
  t15741 = -3.2*t8912*t15260;
  t15405 = t15401*t6811;
  t15408 = t6856*t15407;
  t15409 = t15405 + t15352 + t15408 + t15353;
  t15743 = -3.2*t9023*t15712;
  t15745 = -1.*t6856*t8757;
  t15753 = -1.*t8744*t15213;
  t15415 = -1.*t6793*t15401;
  t15422 = -1.*t6811*t15407;
  t15423 = t15415 + t15372 + t15422 + t15374;
  t15758 = t6793*t8744;
  t15782 = -0.24*t6785*t6781;
  t15783 = t15782 + t15749;
  t15762 = t8757*t15213;
  t15538 = -13.6*t7085*t7107;
  t15539 = -13.6*t7085*t7126;
  t15803 = -3.2*t7278*t7142;
  t15804 = -3.2*t7167*t7282;
  t15805 = -3.2*t7278*t15260;
  t15806 = -3.2*t7167*t15289;
  t15807 = t15454 + t15455 + t15458 + t15459 + t15803 + t15804 + t15805 + t15806;
  t15817 = -6.8*t7085*t15305;
  t15818 = -6.8*t15300*t7107;
  t15819 = -3.2*t7167*t8912;
  t15820 = -3.2*t7167*t15367;
  t15821 = -3.2*t9023*t15260;
  t15822 = -3.2*t7142*t15375;
  t15823 = t15549 + t15817 + t15818 + t15550 + t15819 + t15820 + t15821 + t15822;
  t15810 = -3.2*t6852*t7167;
  t15811 = -3.2*t6899*t15260;
  t15812 = t15529 + t15810 + t15811;
  t15385 = -3.2*t15384*t7134;
  t15389 = -3.2*t15388*t7152;
  t15390 = t15385 + t15227 + t15389 + t15228;
  t15391 = -0.5*var2[5]*t15390;
  t15392 = t15257 + t15258 + t15261 + t15262;
  t15393 = -0.5*var2[1]*t15392;
  t15397 = t15269 + t15276 + t15277 + t15284 + t15285 + t15290;
  t15398 = -0.5*var2[0]*t15397;
  t15414 = -3.2*t7134*t15409;
  t15430 = -3.2*t7152*t15423;
  t15431 = t15308 + t15414 + t15369 + t15430;
  t15432 = -0.5*var2[2]*t15431;
  t15433 = t15226 + t15391 + t15393 + t15398 + t15432;
  t15434 = var2[1]*t15433;
  t15769 = -3.2*t15388*t7167;
  t15770 = -3.2*t15384*t15260;
  t15771 = t15769 + t15770 + t15714 + t15715;
  t15772 = -0.5*var2[5]*t15771;
  t15773 = t15718 + t15719 + t15721 + t15722;
  t15774 = -0.5*var2[1]*t15773;
  t15775 = t15725 + t15726 + t15728 + t15729 + t15730 + t15731;
  t15776 = -0.5*var2[0]*t15775;
  t15777 = -3.2*t15409*t15260;
  t15778 = -3.2*t15367*t15260;
  t15779 = -1.*t15401*t6811;
  t15780 = -1.*t6793*t15407;
  t15781 = -1.*t6793*t15365;
  t15784 = -1.*t6793*t15783;
  t15785 = -1.*t15401*t15213;
  t15786 = -1.*t15312*t15213;
  t15787 = t15779 + t15780 + t15745 + t15781 + t15784 + t15785 + t15786 + t15753;
  t15788 = -3.2*t7142*t15787;
  t15789 = -3.2*t7167*t15423;
  t15790 = -3.2*t7167*t15375;
  t15791 = t6793*t15401;
  t15792 = t6793*t15312;
  t15793 = t15401*t6856;
  t15794 = t6811*t15407;
  t15795 = t6811*t15365;
  t15796 = t6811*t15783;
  t15797 = t15791 + t15792 + t15758 + t15793 + t15794 + t15795 + t15796 + t15762;
  t15798 = -3.2*t7167*t15797;
  t15799 = t15741 + t15777 + t15778 + t15743 + t15788 + t15789 + t15790 + t15798;
  t15800 = -0.5*var2[2]*t15799;
  t15801 = t15713 + t15772 + t15774 + t15776 + t15800;
  t15802 = var2[1]*t15801;
  t15809 = 0.384*var2[6]*t15260;
  t15853 = t15803 + t15804 + t15805 + t15806;
  t15862 = -3.2*t7167*t15409;
  t15863 = -3.2*t7142*t15423;
  t15864 = t15819 + t15862 + t15821 + t15863;
  t15855 = -3.2*t15388*t7142;
  t15856 = -3.2*t15384*t7167;
  t15857 = t15855 + t15856 + t15810 + t15811;
  t15828 = 0.384*var2[1]*t15260;
  p_output1[0]=var2[1]*(-0.5*(-9.6*t7045*t7063 - 9.6*t7026*t7079 - 9.6*t7142*t7152 - 9.6*t7134*t7167 + t7188 + t7197 + t7199 + t7205 - 3.2*t5819*t7212 - 3.2*t6722*t7231 + t7261 + t7264 + t7265 + t7272 - 3.2*t6818*t7278 - 3.2*t6861*t7282)*var2[0] - 0.5*(t6959 + t6960 + t6989 + t7008 - 6.4*Power(t7026,2) - 6.4*t6722*t7045 - 6.4*Power(t7063,2) - 6.4*t5819*t7079 + t7087 + t7099 + t7127 + t7131 - 6.4*Power(t7134,2) - 6.4*t6861*t7142 - 6.4*Power(t7152,2) - 6.4*t6818*t7167)*var2[1] - 0.5*(-2.88*t2788 + t7309 - 3.2*t6722*t7351 - 3.2*t5819*t7358 + t8734 + t8739 - 3.2*t6861*t8912 - 3.2*t6818*t9023)*var2[2] - 0.5*(t6482 - 3.2*t6661*t6722 - 3.2*t5819*t6755)*var2[3] + 0.384*t5819*var2[4] - 0.5*(t6830 - 3.2*t6852*t6861 - 3.2*t6818*t6899)*var2[5] + 0.384*t6818*var2[6]);
  p_output1[1]=t12279;
  p_output1[2]=t15034;
  p_output1[3]=t15380;
  p_output1[4]=t15434;
  p_output1[5]=-0.5*t15505*var2[1];
  p_output1[6]=-0.5*t15505*var2[0] - 1.*(t15534 + t15535 + t15538 + t15539 - 6.4*t7045*t7063 - 6.4*t7026*t7079 - 6.4*t7142*t7152 - 6.4*t7134*t7167)*var2[1] - 0.5*t15556*var2[2] - 0.5*t15525*var2[3] + 0.384*t7026*var2[4] - 0.5*t15532*var2[5] + 0.384*t7134*var2[6];
  p_output1[7]=-0.5*t15556*var2[1];
  p_output1[8]=-0.5*t15525*var2[1];
  p_output1[9]=0.384*t7026*var2[1];
  p_output1[10]=-0.5*t15532*var2[1];
  p_output1[11]=0.384*t7134*var2[1];
  p_output1[12]=t12279;
  p_output1[13]=var2[1]*(t15569 - 0.5*(t15581 + t15582 + t15584 + t15585 + t15586 + t15587 + t7188 + t7197 + t7199 + t7205)*var2[0] - 0.5*(t15574 + t15575 + t15577 + t15578 + t6959 + t6960 + t6989 + t7008)*var2[1] - 0.5*(-6.4*t10670*t10874 + t15590 + t15592 - 6.4*t12080*t7079 + t7309 - 3.2*t7045*(-2.*t10571*t10817 + t15595 + t15601 - 1.*t15598*t2031 - 1.*t10817*t3051 - 2.*t2031*t7343) - 3.2*t7079*(t15606 + t15610 + 2.*t10817*t2031 + t15598*t3051 + t10817*t6714 + 2.*t3051*t7343))*var2[2] - 0.5*(t15570 + t15571 + t6482)*var2[3]);
  p_output1[14]=t15648;
  p_output1[15]=-0.5*t15653*var2[1];
  p_output1[16]=t15655 - 0.5*t15653*var2[0] - 1.*(t10681 + t10689 + t15534 + t15535)*var2[1] - 0.5*t15667*var2[2] - 0.5*t15658*var2[3];
  p_output1[17]=-0.5*t15667*var2[1];
  p_output1[18]=-0.5*t15658*var2[1];
  p_output1[19]=t15672;
  p_output1[20]=t15034;
  p_output1[21]=t15648;
  p_output1[22]=var2[1]*(t15569 + t15622 + t15624 - 0.5*(-6.4*t10670*t14961 + t15590 + t15592 - 3.2*(-2.*t10571*t14953 + t15595 + t15601 + t15627 + t15631 - 2.*t14959*t2031)*t7045 - 6.4*t15026*t7079 - 3.2*(t15606 + t15610 + t15640 + t15642 + 2.*t14953*t2031 + 2.*t14959*t3051)*t7079)*var2[2] - 0.5*(-6.4*t10670*t14630 + t15570 + t15571 - 3.2*t14630*t7045 - 6.4*t14883*t7079 - 3.2*(0.24*t14846 - 1.*t177*t6645)*t7079)*var2[3]);
  p_output1[23]=-0.5*t15696*var2[1];
  p_output1[24]=t15655 - 0.5*t15696*var2[0] - 1.*(t10681 + t10689)*var2[1] - 0.5*t15707*var2[2] - 0.5*t15700*var2[3];
  p_output1[25]=-0.5*t15707*var2[1];
  p_output1[26]=-0.5*t15700*var2[1];
  p_output1[27]=t15672;
  p_output1[28]=t15380;
  p_output1[29]=var2[1]*(t15713 - 0.5*(t15725 + t15726 + t15728 + t15729 + t15730 + t15731 + t7261 + t7264 + t7265 + t7272)*var2[0] - 0.5*(t15718 + t15719 + t15721 + t15722 + t7087 + t7099 + t7127 + t7131)*var2[1] - 0.5*(-6.4*t15260*t15367 + t15741 + t15743 - 13.6*t15300*t7085 - 6.8*t15305*t7107 - 13.6*t15305*t7126 - 3.2*(-2.*t15213*t15312 + t15745 + t15753 - 2.*t15365*t6793 - 1.*t15750*t6793 - 1.*t15312*t6811)*t7142 - 6.4*t15375*t7167 - 3.2*(t15758 + t15762 + 2.*t15312*t6793 + 2.*t15365*t6811 + t15750*t6811 + t15312*t6856)*t7167 - 6.8*t7085*(0.11*t15298 - 1.*t6785*t7377) + t8734 + t8739)*var2[2] - 0.5*(t15714 + t15715 + t6830)*var2[5]);
  p_output1[30]=t15802;
  p_output1[31]=-0.5*t15807*var2[1];
  p_output1[32]=t15809 - 0.5*t15807*var2[0] - 1.*(t15269 + t15284 + t15538 + t15539)*var2[1] - 0.5*t15823*var2[2] - 0.5*t15812*var2[5];
  p_output1[33]=-0.5*t15823*var2[1];
  p_output1[34]=-0.5*t15812*var2[1];
  p_output1[35]=t15828;
  p_output1[36]=t15434;
  p_output1[37]=t15802;
  p_output1[38]=var2[1]*(t15713 + t15774 + t15776 - 0.5*(-6.4*t15260*t15409 + t15741 + t15743 - 3.2*(-2.*t15213*t15401 + t15745 + t15753 + t15779 + t15784 - 2.*t15407*t6793)*t7142 - 6.4*t15423*t7167 - 3.2*(t15758 + t15762 + t15793 + t15796 + 2.*t15401*t6793 + 2.*t15407*t6811)*t7167)*var2[2] - 0.5*(-6.4*t15260*t15384 + t15714 + t15715 - 3.2*t15384*t7142 - 6.4*t15388*t7167 - 3.2*(0.24*t15386 + 0.63*t6781 - 1.*t6781*t6847)*t7167)*var2[5]);
  p_output1[39]=-0.5*t15853*var2[1];
  p_output1[40]=t15809 - 0.5*t15853*var2[0] - 1.*(t15269 + t15284)*var2[1] - 0.5*t15864*var2[2] - 0.5*t15857*var2[5];
  p_output1[41]=-0.5*t15864*var2[1];
  p_output1[42]=-0.5*t15857*var2[1];
  p_output1[43]=t15828;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace LeftStance
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
