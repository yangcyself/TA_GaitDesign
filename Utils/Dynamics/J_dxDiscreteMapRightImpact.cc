/*
 * Automatically Generated from Mathematica.
 * Tue 29 Oct 2019 19:43:39 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t6441;
  double t4417;
  double t6569;
  double t6688;
  double t9254;
  double t9265;
  double t9275;
  double t9277;
  double t9278;
  double t9363;
  double t9376;
  double t9415;
  double t9417;
  double t9423;
  double t9424;
  double t9425;
  double t6729;
  double t9230;
  double t9247;
  double t6630;
  double t6702;
  double t6713;
  double t9257;
  double t9266;
  double t9271;
  double t9274;
  double t9282;
  double t9333;
  double t9339;
  double t9342;
  double t9350;
  double t9351;
  double t9356;
  double t9359;
  double t9395;
  double t9403;
  double t9410;
  double t9367;
  double t9377;
  double t9380;
  double t9416;
  double t9418;
  double t9419;
  double t9422;
  double t9426;
  double t9427;
  double t9447;
  double t9448;
  double t9457;
  double t9461;
  double t9467;
  double t9468;
  double t9551;
  double t9552;
  double t9553;
  double t9554;
  double t9555;
  double t9556;
  double t9557;
  double t9558;
  double t9560;
  double t9561;
  double t9562;
  double t9578;
  double t9579;
  double t9580;
  double t9581;
  double t9582;
  double t9583;
  double t9584;
  double t9585;
  double t9587;
  double t9588;
  double t9589;
  double t9488;
  double t9489;
  double t9490;
  double t9475;
  double t9480;
  double t9481;
  double t9618;
  double t9619;
  double t9620;
  double t9492;
  double t9493;
  double t9613;
  double t9614;
  double t9615;
  double t9616;
  double t9500;
  double t9501;
  double t9510;
  double t9495;
  double t9496;
  double t9497;
  double t9606;
  double t9607;
  double t9608;
  double t9515;
  double t9522;
  double t9601;
  double t9602;
  double t9603;
  double t9604;
  double t9249;
  double t9411;
  double t9541;
  double t9546;
  double t9547;
  double t9548;
  double t9549;
  double t9559;
  double t9563;
  double t9566;
  double t9568;
  double t9569;
  double t9570;
  double t9572;
  double t9573;
  double t9574;
  double t9575;
  double t9576;
  double t9586;
  double t9590;
  double t9591;
  double t9593;
  double t9594;
  double t9595;
  double t9624;
  double t9625;
  double t9627;
  double t9628;
  double t9629;
  double t9710;
  double t9711;
  double t9712;
  double t9713;
  double t9714;
  double t9644;
  double t9645;
  double t9646;
  double t9647;
  double t9656;
  double t9657;
  double t9658;
  double t9659;
  double t9660;
  double t9661;
  double t9662;
  double t9663;
  double t9664;
  double t9665;
  double t9666;
  double t9698;
  double t9699;
  double t9701;
  double t9733;
  double t9734;
  double t9735;
  double t9715;
  double t9716;
  double t9717;
  double t9720;
  double t9721;
  double t9724;
  double t9725;
  double t9726;
  double t9727;
  double t9728;
  double t9729;
  double t9732;
  double t9737;
  double t9738;
  double t9742;
  double t9766;
  double t9767;
  double t9744;
  double t9769;
  double t9770;
  double t9746;
  double t9634;
  double t9635;
  double t9637;
  double t9638;
  double t9639;
  double t9781;
  double t9782;
  double t9783;
  double t9784;
  double t9785;
  double t9650;
  double t9651;
  double t9677;
  double t9678;
  double t9679;
  double t9680;
  double t9681;
  double t9682;
  double t9683;
  double t9684;
  double t9685;
  double t9704;
  double t9804;
  double t9805;
  double t9806;
  double t9786;
  double t9787;
  double t9788;
  double t9791;
  double t9792;
  double t9795;
  double t9796;
  double t9797;
  double t9798;
  double t9799;
  double t9800;
  double t9803;
  double t9808;
  double t9809;
  double t9813;
  double t9837;
  double t9838;
  double t9815;
  double t9840;
  double t9841;
  double t9817;
  double t4785;
  double t6516;
  double t6715;
  double t9334;
  double t9360;
  double t9391;
  double t9437;
  double t9472;
  double t9486;
  double t9487;
  double t9491;
  double t9494;
  double t9498;
  double t9499;
  double t9511;
  double t9526;
  double t9533;
  double t6305;
  double t6547;
  double t9252;
  double t9670;
  double t9672;
  double t9414;
  double t9689;
  double t9691;
  double t9667;
  double t9668;
  double t9674;
  double t9675;
  double t9686;
  double t9687;
  double t9693;
  double t9694;
  double t9669;
  double t9671;
  double t9673;
  double t9676;
  double t9688;
  double t9690;
  double t9692;
  double t9695;
  double t9696;
  double t9538;
  double t9914;
  double t9925;
  double t9730;
  double t9934;
  double t9736;
  double t9739;
  double t9740;
  double t9743;
  double t9745;
  double t9747;
  double t9943;
  double t9756;
  double t9757;
  double t9758;
  double t9944;
  double t9752;
  double t9753;
  double t9754;
  double t9945;
  double t9948;
  double t9949;
  double t9764;
  double t9953;
  double t9768;
  double t9771;
  double t9772;
  double t9955;
  double t9774;
  double t9775;
  double t9776;
  double t9920;
  double t9928;
  double t9801;
  double t9937;
  double t9807;
  double t9810;
  double t9811;
  double t9814;
  double t9816;
  double t9818;
  double t9972;
  double t9827;
  double t9828;
  double t9829;
  double t9973;
  double t9823;
  double t9824;
  double t9825;
  double t9974;
  double t9977;
  double t9978;
  double t9835;
  double t9982;
  double t9839;
  double t9842;
  double t9843;
  double t9984;
  double t9845;
  double t9846;
  double t9847;
  double t9861;
  double t9862;
  double t9863;
  double t9864;
  double t9865;
  double t9866;
  double t9867;
  double t9868;
  double t9869;
  double t9852;
  double t9853;
  double t9700;
  double t9702;
  double t9703;
  double t9705;
  double t9706;
  double t9707;
  double t9630;
  double t9631;
  double t9632;
  double t9640;
  double t9641;
  double t9642;
  double t9550;
  double t9567;
  double t9571;
  double t9577;
  double t9592;
  double t9596;
  double t9599;
  double t9895;
  double t9896;
  double t9897;
  double t9898;
  double t9899;
  double t9900;
  double t9901;
  double t9902;
  double t9935;
  double t9936;
  double t9938;
  double t9939;
  double t9940;
  double t10029;
  double t10030;
  double t10031;
  double t10032;
  double t10033;
  double t10034;
  double t10035;
  double t10036;
  double t10037;
  double t10038;
  double t10039;
  double t10040;
  double t10041;
  double t10042;
  double t10043;
  double t10044;
  double t9954;
  double t9956;
  double t9957;
  double t9741;
  double t9748;
  double t9749;
  double t9967;
  double t9968;
  double t9969;
  double t9773;
  double t9777;
  double t9778;
  double t9983;
  double t9985;
  double t9986;
  double t9812;
  double t9819;
  double t9820;
  double t9996;
  double t9997;
  double t9998;
  double t9844;
  double t9848;
  double t9849;
  double t9870;
  double t9871;
  double t9872;
  double t9873;
  double t9874;
  double t9875;
  double t9876;
  double t9877;
  double t10004;
  double t10006;
  double t10008;
  double t10010;
  double t10012;
  double t10014;
  double t10062;
  double t9612;
  double t9617;
  double t9621;
  double t9622;
  double t9908;
  double t9909;
  double t9910;
  double t9911;
  double t10023;
  double t10024;
  double t10025;
  double t10026;
  double t9915;
  double t9916;
  double t9917;
  double t9946;
  double t9718;
  double t10049;
  double t10050;
  double t10051;
  double t10061;
  double t10063;
  double t10064;
  double t10065;
  double t10066;
  double t10067;
  double t10068;
  double t10069;
  double t10070;
  double t10071;
  double t10072;
  double t10073;
  double t10074;
  double t9960;
  double t9961;
  double t9962;
  double t9755;
  double t9759;
  double t9760;
  double t10075;
  double t10076;
  double t10077;
  double t10078;
  double t10079;
  double t9878;
  double t9879;
  double t9880;
  double t9881;
  double t10121;
  double t10122;
  double t10123;
  double t10124;
  double t10143;
  double t10145;
  double t10133;
  double t10134;
  double t10135;
  double t10136;
  double t10137;
  double t10138;
  double t10139;
  double t10140;
  double t10141;
  double t10142;
  double t9623;
  double t9912;
  double t10027;
  double t10028;
  double t10148;
  double t10149;
  double t10175;
  double t10176;
  double t9882;
  double t10002;
  double t10125;
  double t10126;
  double t10169;
  double t10170;
  double t10180;
  double t9600;
  double t9605;
  double t9609;
  double t9610;
  double t9903;
  double t9904;
  double t9905;
  double t9906;
  double t10017;
  double t10018;
  double t10019;
  double t10020;
  double t9921;
  double t9922;
  double t9923;
  double t9975;
  double t9789;
  double t10089;
  double t10090;
  double t10091;
  double t9989;
  double t9990;
  double t9991;
  double t9826;
  double t9830;
  double t9831;
  double t10101;
  double t10102;
  double t10103;
  double t10104;
  double t10105;
  double t9883;
  double t9884;
  double t9885;
  double t9886;
  double t10127;
  double t10128;
  double t10129;
  double t10130;
  double t10201;
  double t10203;
  double t9611;
  double t9907;
  double t10021;
  double t10022;
  double t10206;
  double t10207;
  double t10233;
  double t10234;
  double t9887;
  double t10003;
  double t10131;
  double t10132;
  double t10227;
  double t10228;
  t6441 = Sin(var2[2]);
  t4417 = Cos(var2[2]);
  t6569 = Cos(var2[3]);
  t6688 = Sin(var2[3]);
  t9254 = Cos(var2[4]);
  t9265 = Sin(var2[4]);
  t9275 = t6569*t9254;
  t9277 = -1.*t6688*t9265;
  t9278 = t9275 + t9277;
  t9363 = Cos(var2[5]);
  t9376 = Sin(var2[5]);
  t9415 = Cos(var2[6]);
  t9417 = Sin(var2[6]);
  t9423 = t9363*t9415;
  t9424 = -1.*t9376*t9417;
  t9425 = t9423 + t9424;
  t6729 = t4417*t6569;
  t9230 = -1.*t6441*t6688;
  t9247 = t6729 + t9230;
  t6630 = t6569*t6441;
  t6702 = t4417*t6688;
  t6713 = t6630 + t6702;
  t9257 = -1.*t9254*t6688;
  t9266 = -1.*t6569*t9265;
  t9271 = t9257 + t9266;
  t9274 = t6441*t9271;
  t9282 = t4417*t9278;
  t9333 = t9274 + t9282;
  t9339 = t9254*t6688;
  t9342 = t6569*t9265;
  t9350 = t9339 + t9342;
  t9351 = t4417*t9350;
  t9356 = t6441*t9278;
  t9359 = t9351 + t9356;
  t9395 = t4417*t9363;
  t9403 = -1.*t6441*t9376;
  t9410 = t9395 + t9403;
  t9367 = t9363*t6441;
  t9377 = t4417*t9376;
  t9380 = t9367 + t9377;
  t9416 = -1.*t9415*t9376;
  t9418 = -1.*t9363*t9417;
  t9419 = t9416 + t9418;
  t9422 = t6441*t9419;
  t9426 = t4417*t9425;
  t9427 = t9422 + t9426;
  t9447 = t9415*t9376;
  t9448 = t9363*t9417;
  t9457 = t9447 + t9448;
  t9461 = t4417*t9457;
  t9467 = t6441*t9425;
  t9468 = t9461 + t9467;
  t9551 = -1.*t9254;
  t9552 = 1. + t9551;
  t9553 = 0.4*t9552;
  t9554 = 0.64*t9254;
  t9555 = t9553 + t9554;
  t9556 = t9555*t6688;
  t9557 = 0.24*t6569*t9265;
  t9558 = t9556 + t9557;
  t9560 = t6569*t9555;
  t9561 = -0.24*t6688*t9265;
  t9562 = t9560 + t9561;
  t9578 = -1.*t9415;
  t9579 = 1. + t9578;
  t9580 = 0.4*t9579;
  t9581 = 0.64*t9415;
  t9582 = t9580 + t9581;
  t9583 = t9582*t9376;
  t9584 = 0.24*t9363*t9417;
  t9585 = t9583 + t9584;
  t9587 = t9363*t9582;
  t9588 = -0.24*t9376*t9417;
  t9589 = t9587 + t9588;
  t9488 = t4417*t9271;
  t9489 = -1.*t6441*t9278;
  t9490 = t9488 + t9489;
  t9475 = -1.*t6569*t6441;
  t9480 = -1.*t4417*t6688;
  t9481 = t9475 + t9480;
  t9618 = t9555*t9265;
  t9619 = -0.24*t9254*t9265;
  t9620 = t9618 + t9619;
  t9492 = -1.*t6441*t9350;
  t9493 = t9492 + t9282;
  t9613 = t9555*t9254;
  t9614 = Power(t9265,2);
  t9615 = 0.24*t9614;
  t9616 = t9613 + t9615;
  t9500 = t4417*t9419;
  t9501 = -1.*t6441*t9425;
  t9510 = t9500 + t9501;
  t9495 = -1.*t9363*t6441;
  t9496 = -1.*t4417*t9376;
  t9497 = t9495 + t9496;
  t9606 = t9582*t9417;
  t9607 = -0.24*t9415*t9417;
  t9608 = t9606 + t9607;
  t9515 = -1.*t6441*t9457;
  t9522 = t9515 + t9426;
  t9601 = t9582*t9415;
  t9602 = Power(t9417,2);
  t9603 = 0.24*t9602;
  t9604 = t9601 + t9603;
  t9249 = Power(t9247,2);
  t9411 = Power(t9410,2);
  t9541 = Power(t6569,2);
  t9546 = 0.11*t9541;
  t9547 = Power(t6688,2);
  t9548 = 0.11*t9547;
  t9549 = t9546 + t9548;
  t9559 = -1.*t9558*t9278;
  t9563 = -1.*t9271*t9562;
  t9566 = t9559 + t9563;
  t9568 = t9558*t9350;
  t9569 = t9278*t9562;
  t9570 = t9568 + t9569;
  t9572 = Power(t9363,2);
  t9573 = 0.11*t9572;
  t9574 = Power(t9376,2);
  t9575 = 0.11*t9574;
  t9576 = t9573 + t9575;
  t9586 = -1.*t9585*t9425;
  t9590 = -1.*t9419*t9589;
  t9591 = t9586 + t9590;
  t9593 = t9585*t9457;
  t9594 = t9425*t9589;
  t9595 = t9593 + t9594;
  t9624 = -1.*var1[6];
  t9625 = var3[4] + t9624;
  t9627 = -1.*var1[5];
  t9628 = var3[3] + t9627;
  t9629 = 0.748*t9481;
  t9710 = -1.*t6569*t9254;
  t9711 = t6688*t9265;
  t9712 = t9710 + t9711;
  t9713 = t6441*t9712;
  t9714 = t9488 + t9713;
  t9644 = -1.*var1[0];
  t9645 = var3[0] + t9644;
  t9646 = 13.6*t9481*t9247;
  t9647 = 13.6*t6713*t9247;
  t9656 = -1.*var1[1];
  t9657 = var3[1] + t9656;
  t9658 = Power(t9481,2);
  t9659 = 6.8*t9658;
  t9660 = 6.8*t9481*t6713;
  t9661 = 6.8*t9249;
  t9662 = -1.*t4417*t6569;
  t9663 = t6441*t6688;
  t9664 = t9662 + t9663;
  t9665 = 6.8*t9247*t9664;
  t9666 = -1.*t6441*t9271;
  t9698 = -1.*var1[2];
  t9699 = var3[2] + t9698;
  t9701 = 6.8*t9481*t9549;
  t9733 = -1.*t9555*t6688;
  t9734 = -0.24*t6569*t9265;
  t9735 = t9733 + t9734;
  t9715 = 0.768*t9625*t9714;
  t9716 = 3.2*t9620*t9333;
  t9717 = 3.2*t9616*t9714;
  t9720 = 6.4*t9333*t9359;
  t9721 = 6.4*t9333*t9714;
  t9724 = 3.2*t9333*t9493;
  t9725 = 3.2*t9490*t9359;
  t9726 = t4417*t9712;
  t9727 = t9666 + t9726;
  t9728 = 3.2*t9333*t9727;
  t9729 = 3.2*t9490*t9714;
  t9732 = 3.2*t9333*t9566;
  t9737 = t9558*t9278;
  t9738 = t9271*t9562;
  t9742 = 3.2*t9570*t9714;
  t9766 = -0.24*t9254*t6688;
  t9767 = t9766 + t9734;
  t9744 = -1.*t9271*t9558;
  t9769 = 0.24*t6569*t9254;
  t9770 = t9769 + t9561;
  t9746 = -1.*t9562*t9712;
  t9634 = -1.*var1[4];
  t9635 = var3[6] + t9634;
  t9637 = -1.*var1[3];
  t9638 = var3[5] + t9637;
  t9639 = 0.748*t9497;
  t9781 = -1.*t9363*t9415;
  t9782 = t9376*t9417;
  t9783 = t9781 + t9782;
  t9784 = t6441*t9783;
  t9785 = t9500 + t9784;
  t9650 = 13.6*t9497*t9410;
  t9651 = 13.6*t9380*t9410;
  t9677 = Power(t9497,2);
  t9678 = 6.8*t9677;
  t9679 = 6.8*t9497*t9380;
  t9680 = 6.8*t9411;
  t9681 = -1.*t4417*t9363;
  t9682 = t6441*t9376;
  t9683 = t9681 + t9682;
  t9684 = 6.8*t9410*t9683;
  t9685 = -1.*t6441*t9419;
  t9704 = 6.8*t9497*t9576;
  t9804 = -1.*t9582*t9376;
  t9805 = -0.24*t9363*t9417;
  t9806 = t9804 + t9805;
  t9786 = 0.768*t9635*t9785;
  t9787 = 3.2*t9608*t9427;
  t9788 = 3.2*t9604*t9785;
  t9791 = 6.4*t9427*t9468;
  t9792 = 6.4*t9427*t9785;
  t9795 = 3.2*t9427*t9522;
  t9796 = 3.2*t9510*t9468;
  t9797 = t4417*t9783;
  t9798 = t9685 + t9797;
  t9799 = 3.2*t9427*t9798;
  t9800 = 3.2*t9510*t9785;
  t9803 = 3.2*t9427*t9591;
  t9808 = t9585*t9425;
  t9809 = t9419*t9589;
  t9813 = 3.2*t9595*t9785;
  t9837 = -0.24*t9415*t9376;
  t9838 = t9837 + t9805;
  t9815 = -1.*t9419*t9585;
  t9840 = 0.24*t9363*t9415;
  t9841 = t9840 + t9588;
  t9817 = -1.*t9589*t9783;
  t4785 = Power(t4417,2);
  t6516 = Power(t6441,2);
  t6715 = Power(t6713,2);
  t9334 = Power(t9333,2);
  t9360 = Power(t9359,2);
  t9391 = Power(t9380,2);
  t9437 = Power(t9427,2);
  t9472 = Power(t9468,2);
  t9486 = -6.8*t9481*t9247;
  t9487 = -6.8*t6713*t9247;
  t9491 = -3.2*t9333*t9490;
  t9494 = -3.2*t9493*t9359;
  t9498 = -6.8*t9497*t9410;
  t9499 = -6.8*t9380*t9410;
  t9511 = -3.2*t9427*t9510;
  t9526 = -3.2*t9522*t9468;
  t9533 = t9486 + t9487 + t9491 + t9494 + t9498 + t9499 + t9511 + t9526;
  t6305 = -12.*t4785;
  t6547 = -12.*t6516;
  t9252 = -6.8*t9249;
  t9670 = Power(t9493,2);
  t9672 = Power(t9490,2);
  t9414 = -6.8*t9411;
  t9689 = Power(t9522,2);
  t9691 = Power(t9510,2);
  t9667 = -1.*t4417*t9278;
  t9668 = t9666 + t9667;
  t9674 = -1.*t4417*t9350;
  t9675 = t9674 + t9489;
  t9686 = -1.*t4417*t9425;
  t9687 = t9685 + t9686;
  t9693 = -1.*t4417*t9457;
  t9694 = t9693 + t9501;
  t9669 = 3.2*t9668*t9333;
  t9671 = 3.2*t9670;
  t9673 = 3.2*t9672;
  t9676 = 3.2*t9675*t9359;
  t9688 = 3.2*t9687*t9427;
  t9690 = 3.2*t9689;
  t9692 = 3.2*t9691;
  t9695 = 3.2*t9694*t9468;
  t9696 = t9659 + t9660 + t9661 + t9665 + t9669 + t9671 + t9673 + t9676 + t9678 + t9679 + t9680 + t9684 + t9688 + t9690 + t9692 + t9695;
  t9538 = -2.88*t4417;
  t9914 = 0.748*t9664;
  t9925 = 13.6*t9481*t9664;
  t9730 = t9659 + t9660 + t9661 + t9665 + t9724 + t9725 + t9728 + t9729;
  t9934 = 6.8*t9664*t9549;
  t9736 = t9735*t9278;
  t9739 = t9350*t9562;
  t9740 = t9736 + t9737 + t9738 + t9739;
  t9743 = -1.*t9271*t9735;
  t9745 = -1.*t9278*t9562;
  t9747 = t9743 + t9744 + t9745 + t9746;
  t9943 = 0.768*t9625*t9727;
  t9756 = Power(t9254,2);
  t9757 = -0.24*t9756;
  t9758 = t9613 + t9757;
  t9944 = 3.2*t9620*t9490;
  t9752 = -1.*t9555*t9265;
  t9753 = 0.24*t9254*t9265;
  t9754 = t9752 + t9753;
  t9945 = 3.2*t9616*t9727;
  t9948 = 6.4*t9493*t9490;
  t9949 = 6.4*t9490*t9727;
  t9764 = t9724 + t9725 + t9728 + t9729;
  t9953 = 3.2*t9490*t9566;
  t9768 = t9767*t9278;
  t9771 = t9350*t9770;
  t9772 = t9768 + t9737 + t9738 + t9771;
  t9955 = 3.2*t9570*t9727;
  t9774 = -1.*t9271*t9767;
  t9775 = -1.*t9278*t9770;
  t9776 = t9774 + t9744 + t9775 + t9746;
  t9920 = 0.748*t9683;
  t9928 = 13.6*t9497*t9683;
  t9801 = t9678 + t9679 + t9680 + t9684 + t9795 + t9796 + t9799 + t9800;
  t9937 = 6.8*t9683*t9576;
  t9807 = t9806*t9425;
  t9810 = t9457*t9589;
  t9811 = t9807 + t9808 + t9809 + t9810;
  t9814 = -1.*t9419*t9806;
  t9816 = -1.*t9425*t9589;
  t9818 = t9814 + t9815 + t9816 + t9817;
  t9972 = 0.768*t9635*t9798;
  t9827 = Power(t9415,2);
  t9828 = -0.24*t9827;
  t9829 = t9601 + t9828;
  t9973 = 3.2*t9608*t9510;
  t9823 = -1.*t9582*t9417;
  t9824 = 0.24*t9415*t9417;
  t9825 = t9823 + t9824;
  t9974 = 3.2*t9604*t9798;
  t9977 = 6.4*t9522*t9510;
  t9978 = 6.4*t9510*t9798;
  t9835 = t9795 + t9796 + t9799 + t9800;
  t9982 = 3.2*t9510*t9591;
  t9839 = t9838*t9425;
  t9842 = t9457*t9841;
  t9843 = t9839 + t9808 + t9809 + t9842;
  t9984 = 3.2*t9595*t9798;
  t9845 = -1.*t9419*t9838;
  t9846 = -1.*t9425*t9841;
  t9847 = t9845 + t9815 + t9846 + t9817;
  t9861 = 6.8*t9481*t9247;
  t9862 = 6.8*t6713*t9247;
  t9863 = 3.2*t9333*t9490;
  t9864 = 3.2*t9493*t9359;
  t9865 = 6.8*t9497*t9410;
  t9866 = 6.8*t9380*t9410;
  t9867 = 3.2*t9427*t9510;
  t9868 = 3.2*t9522*t9468;
  t9869 = t9861 + t9862 + t9863 + t9864 + t9865 + t9866 + t9867 + t9868;
  t9852 = 12.*t4785;
  t9853 = 12.*t6516;
  t9700 = -2.88*t6441;
  t9702 = 3.2*t9493*t9566;
  t9703 = 3.2*t9490*t9570;
  t9705 = 3.2*t9522*t9591;
  t9706 = 3.2*t9510*t9595;
  t9707 = t9700 + t9701 + t9702 + t9703 + t9704 + t9705 + t9706;
  t9630 = 3.2*t9620*t9493;
  t9631 = 3.2*t9616*t9490;
  t9632 = t9629 + t9630 + t9631;
  t9640 = 3.2*t9608*t9522;
  t9641 = 3.2*t9604*t9510;
  t9642 = t9639 + t9640 + t9641;
  t9550 = -6.8*t9247*t9549;
  t9567 = -3.2*t9359*t9566;
  t9571 = -3.2*t9333*t9570;
  t9577 = -6.8*t9410*t9576;
  t9592 = -3.2*t9468*t9591;
  t9596 = -3.2*t9427*t9595;
  t9599 = t9538 + t9550 + t9567 + t9571 + t9577 + t9592 + t9596;
  t9895 = 2.88*t6441;
  t9896 = -6.8*t9481*t9549;
  t9897 = -3.2*t9493*t9566;
  t9898 = -3.2*t9490*t9570;
  t9899 = -6.8*t9497*t9576;
  t9900 = -3.2*t9522*t9591;
  t9901 = -3.2*t9510*t9595;
  t9902 = t9895 + t9896 + t9897 + t9898 + t9899 + t9900 + t9901;
  t9935 = 3.2*t9675*t9566;
  t9936 = 3.2*t9668*t9570;
  t9938 = 3.2*t9694*t9591;
  t9939 = 3.2*t9687*t9595;
  t9940 = t9538 + t9934 + t9935 + t9936 + t9937 + t9938 + t9939;
  t10029 = 0.4*t9552*t9664;
  t10030 = -0.4*t6713*t9265;
  t10031 = t9254*t9664;
  t10032 = t6713*t9265;
  t10033 = t10031 + t10032;
  t10034 = 0.8*t10033;
  t10035 = t10029 + t10030 + t10034;
  t10036 = -1.*var4[2]*t10035;
  t10037 = 0.4*t9552*t9481;
  t10038 = -0.4*t9664*t9265;
  t10039 = t9254*t9481;
  t10040 = t9664*t9265;
  t10041 = t10039 + t10040;
  t10042 = 0.8*t10041;
  t10043 = t10037 + t10038 + t10042;
  t10044 = -1.*var4[0]*t10043;
  t9954 = 3.2*t9490*t9740;
  t9956 = 3.2*t9493*t9747;
  t9957 = t9934 + t9953 + t9954 + t9955 + t9956;
  t9741 = 3.2*t9333*t9740;
  t9748 = 3.2*t9359*t9747;
  t9749 = t9701 + t9732 + t9741 + t9742 + t9748;
  t9967 = 3.2*t9490*t9772;
  t9968 = 3.2*t9493*t9776;
  t9969 = t9953 + t9967 + t9955 + t9968;
  t9773 = 3.2*t9333*t9772;
  t9777 = 3.2*t9359*t9776;
  t9778 = t9732 + t9773 + t9742 + t9777;
  t9983 = 3.2*t9510*t9811;
  t9985 = 3.2*t9522*t9818;
  t9986 = t9937 + t9982 + t9983 + t9984 + t9985;
  t9812 = 3.2*t9427*t9811;
  t9819 = 3.2*t9468*t9818;
  t9820 = t9704 + t9803 + t9812 + t9813 + t9819;
  t9996 = 3.2*t9510*t9843;
  t9997 = 3.2*t9522*t9847;
  t9998 = t9982 + t9996 + t9984 + t9997;
  t9844 = 3.2*t9427*t9843;
  t9848 = 3.2*t9468*t9847;
  t9849 = t9803 + t9844 + t9813 + t9848;
  t9870 = 2.88*t4417;
  t9871 = 6.8*t9247*t9549;
  t9872 = 3.2*t9359*t9566;
  t9873 = 3.2*t9333*t9570;
  t9874 = 6.8*t9410*t9576;
  t9875 = 3.2*t9468*t9591;
  t9876 = 3.2*t9427*t9595;
  t9877 = t9870 + t9871 + t9872 + t9873 + t9874 + t9875 + t9876;
  t10004 = Power(t9549,2);
  t10006 = Power(t9566,2);
  t10008 = Power(t9570,2);
  t10010 = Power(t9576,2);
  t10012 = Power(t9591,2);
  t10014 = Power(t9595,2);
  t10062 = 0.4*t9481*t9265;
  t9612 = -0.748*t9247;
  t9617 = -3.2*t9616*t9333;
  t9621 = -3.2*t9620*t9359;
  t9622 = t9612 + t9617 + t9621;
  t9908 = -0.748*t9481;
  t9909 = -3.2*t9620*t9493;
  t9910 = -3.2*t9616*t9490;
  t9911 = t9908 + t9909 + t9910;
  t10023 = -0.748*t9549;
  t10024 = -3.2*t9620*t9566;
  t10025 = -3.2*t9616*t9570;
  t10026 = -0.67 + t10023 + t10024 + t10025;
  t9915 = 3.2*t9616*t9668;
  t9916 = 3.2*t9620*t9675;
  t9917 = t9914 + t9915 + t9916;
  t9946 = t9914 + t9944 + t9945;
  t9718 = t9629 + t9716 + t9717;
  t10049 = 3.2*t9616*t9740;
  t10050 = 3.2*t9620*t9747;
  t10051 = t10049 + t10050;
  t10061 = -0.4*t9254*t9664;
  t10063 = -1.*t9481*t9265;
  t10064 = t10031 + t10063;
  t10065 = 0.8*t10064;
  t10066 = t10061 + t10062 + t10065;
  t10067 = -1.*var4[2]*t10066;
  t10068 = -0.4*t9254*t9481;
  t10069 = 0.4*t9247*t9265;
  t10070 = -1.*t9247*t9265;
  t10071 = t10039 + t10070;
  t10072 = 0.8*t10071;
  t10073 = t10068 + t10069 + t10072;
  t10074 = -1.*var4[0]*t10073;
  t9960 = 3.2*t9758*t9493;
  t9961 = 3.2*t9754*t9490;
  t9962 = t9960 + t9944 + t9961 + t9945;
  t9755 = 3.2*t9754*t9333;
  t9759 = 3.2*t9758*t9359;
  t9760 = t9716 + t9755 + t9759 + t9717;
  t10075 = 3.2*t9758*t9566;
  t10076 = 3.2*t9754*t9570;
  t10077 = 3.2*t9616*t9772;
  t10078 = 3.2*t9620*t9776;
  t10079 = t10075 + t10076 + t10077 + t10078;
  t9878 = 0.748*t9247;
  t9879 = 3.2*t9616*t9333;
  t9880 = 3.2*t9620*t9359;
  t9881 = t9878 + t9879 + t9880;
  t10121 = 0.748*t9549;
  t10122 = 3.2*t9620*t9566;
  t10123 = 3.2*t9616*t9570;
  t10124 = 0.67 + t10121 + t10122 + t10123;
  t10143 = Power(t9620,2);
  t10145 = Power(t9616,2);
  t10133 = -0.4*t9552*t9247;
  t10134 = t9254*t9247;
  t10135 = t9481*t9265;
  t10136 = t10134 + t10135;
  t10137 = -0.8*t10136;
  t10138 = t10133 + t10062 + t10137;
  t10139 = -0.4*t9552*t9481;
  t10140 = 0.4*t9664*t9265;
  t10141 = -0.8*t10041;
  t10142 = t10139 + t10140 + t10141;
  t9623 = -0.768*t9333;
  t9912 = -0.768*t9490;
  t10027 = -0.768*t9570;
  t10028 = -0.2 + t10027;
  t10148 = -0.768*t9616;
  t10149 = -0.2 + t10148;
  t10175 = 0.768*t9657*t9727;
  t10176 = 0.768*t9645*t9714;
  t9882 = 0.768*t9333;
  t10002 = 0.768*t9490;
  t10125 = 0.768*t9570;
  t10126 = 0.2 + t10125;
  t10169 = 0.768*t9616;
  t10170 = 0.2 + t10169;
  t10180 = 0.4*t9254*t9247;
  t9600 = -0.748*t9410;
  t9605 = -3.2*t9604*t9427;
  t9609 = -3.2*t9608*t9468;
  t9610 = t9600 + t9605 + t9609;
  t9903 = -0.748*t9497;
  t9904 = -3.2*t9608*t9522;
  t9905 = -3.2*t9604*t9510;
  t9906 = t9903 + t9904 + t9905;
  t10017 = -0.748*t9576;
  t10018 = -3.2*t9608*t9591;
  t10019 = -3.2*t9604*t9595;
  t10020 = -0.67 + t10017 + t10018 + t10019;
  t9921 = 3.2*t9604*t9687;
  t9922 = 3.2*t9608*t9694;
  t9923 = t9920 + t9921 + t9922;
  t9975 = t9920 + t9973 + t9974;
  t9789 = t9639 + t9787 + t9788;
  t10089 = 3.2*t9604*t9811;
  t10090 = 3.2*t9608*t9818;
  t10091 = t10089 + t10090;
  t9989 = 3.2*t9829*t9522;
  t9990 = 3.2*t9825*t9510;
  t9991 = t9989 + t9973 + t9990 + t9974;
  t9826 = 3.2*t9825*t9427;
  t9830 = 3.2*t9829*t9468;
  t9831 = t9787 + t9826 + t9830 + t9788;
  t10101 = 3.2*t9829*t9591;
  t10102 = 3.2*t9825*t9595;
  t10103 = 3.2*t9604*t9843;
  t10104 = 3.2*t9608*t9847;
  t10105 = t10101 + t10102 + t10103 + t10104;
  t9883 = 0.748*t9410;
  t9884 = 3.2*t9604*t9427;
  t9885 = 3.2*t9608*t9468;
  t9886 = t9883 + t9884 + t9885;
  t10127 = 0.748*t9576;
  t10128 = 3.2*t9608*t9591;
  t10129 = 3.2*t9604*t9595;
  t10130 = 0.67 + t10127 + t10128 + t10129;
  t10201 = Power(t9608,2);
  t10203 = Power(t9604,2);
  t9611 = -0.768*t9427;
  t9907 = -0.768*t9510;
  t10021 = -0.768*t9595;
  t10022 = -0.2 + t10021;
  t10206 = -0.768*t9604;
  t10207 = -0.2 + t10206;
  t10233 = 0.768*t9657*t9798;
  t10234 = 0.768*t9645*t9785;
  t9887 = 0.768*t9427;
  t10003 = 0.768*t9510;
  t10131 = 0.768*t9595;
  t10132 = 0.2 + t10131;
  t10227 = 0.768*t9604;
  t10228 = 0.2 + t10227;
  p_output1[0]=t6305 + t6547 - 6.8*t6715 + t9252 - 3.2*t9334 - 3.2*t9360 - 6.8*t9391 + t9414 - 3.2*t9437 - 3.2*t9472;
  p_output1[1]=t9533;
  p_output1[2]=t9599;
  p_output1[3]=t9610;
  p_output1[4]=t9611;
  p_output1[5]=t9622;
  p_output1[6]=t9623;
  p_output1[7]=0.768*t9490*t9625 + t9628*t9632 + 0.768*t9510*t9635 + t9638*t9642 + t9645*(6.4*t9333*t9490 + 6.4*t9359*t9493 + 6.4*t9427*t9510 + 6.4*t9468*t9522 + t9646 + t9647 + t9650 + t9651) + t9657*t9696 + t9699*t9707;
  p_output1[8]=t9715 + t9628*t9718 + t9645*(t9646 + t9647 + t9720 + t9721) + t9657*t9730 + t9699*t9749;
  p_output1[9]=t9715 + t9645*(t9720 + t9721) + t9628*t9760 + t9657*t9764 + t9699*t9778;
  p_output1[10]=t9786 + t9638*t9789 + t9645*(t9650 + t9651 + t9791 + t9792) + t9657*t9801 + t9699*t9820;
  p_output1[11]=t9786 + t9645*(t9791 + t9792) + t9638*t9831 + t9657*t9835 + t9699*t9849;
  p_output1[12]=6.8*t6715 + 3.2*t9334 + 3.2*t9360 + 6.8*t9391 + 3.2*t9437 + 3.2*t9472 + t9661 + t9680 + t9852 + t9853;
  p_output1[13]=t9869;
  p_output1[14]=t9877;
  p_output1[15]=t9881;
  p_output1[16]=t9882;
  p_output1[17]=t9886;
  p_output1[18]=t9887;
  p_output1[19]=-1.;
  p_output1[20]=t9533;
  p_output1[21]=t6305 + t6547 + t9252 + t9414 - 6.8*t9658 - 3.2*t9670 - 3.2*t9672 - 6.8*t9677 - 3.2*t9689 - 3.2*t9691;
  p_output1[22]=t9902;
  p_output1[23]=t9906;
  p_output1[24]=t9907;
  p_output1[25]=t9911;
  p_output1[26]=t9912;
  p_output1[27]=0.768*t9625*t9668 + 0.768*t9635*t9687 + t9645*t9696 + t9628*t9917 + t9638*t9923 + t9657*(t9646 + t9650 + 6.4*t9490*t9668 + 6.4*t9493*t9675 + 6.4*t9510*t9687 + 6.4*t9522*t9694 + t9925 + t9928) + t9699*t9940;
  p_output1[28]=t9645*t9730 + t9943 + t9628*t9946 + t9657*(t9646 + t9925 + t9948 + t9949) + t9699*t9957;
  p_output1[29]=t9645*t9764 + t9943 + t9657*(t9948 + t9949) + t9628*t9962 + t9699*t9969;
  p_output1[30]=t9645*t9801 + t9972 + t9638*t9975 + t9657*(t9650 + t9928 + t9977 + t9978) + t9699*t9986;
  p_output1[31]=t9645*t9835 + t9972 + t9657*(t9977 + t9978) + t9638*t9991 + t9699*t9998;
  p_output1[32]=t9869;
  p_output1[33]=t9659 + t9661 + t9671 + t9673 + t9678 + t9680 + t9690 + t9692 + t9852 + t9853;
  p_output1[34]=t9707;
  p_output1[35]=t9632;
  p_output1[36]=t10002;
  p_output1[37]=t9642;
  p_output1[38]=t10003;
  p_output1[39]=-1.;
  p_output1[40]=t9599;
  p_output1[41]=t9902;
  p_output1[42]=-3.3612 - 6.8*t10004 - 3.2*t10006 - 3.2*t10008 - 6.8*t10010 - 3.2*t10012 - 3.2*t10014;
  p_output1[43]=t10020;
  p_output1[44]=t10022;
  p_output1[45]=t10026;
  p_output1[46]=t10028;
  p_output1[47]=t10036 + t10044 + t9645*t9707 + t9657*t9940;
  p_output1[48]=t10036 + t10044 + t10051*t9628 + 0.768*t9625*t9740 + t9699*(6.4*t9570*t9740 + 6.4*t9566*t9747) + t9645*t9749 + t9657*t9957;
  p_output1[49]=t10067 + t10074 + t10079*t9628 + 0.768*t9625*t9772 + t9699*(6.4*t9570*t9772 + 6.4*t9566*t9776) + t9645*t9778 + t9657*t9969;
  p_output1[50]=t10091*t9638 + 0.768*t9635*t9811 + t9699*(6.4*t9595*t9811 + 6.4*t9591*t9818) + t9645*t9820 + t9657*t9986;
  p_output1[51]=t10105*t9638 + 0.768*t9635*t9843 + t9699*(6.4*t9595*t9843 + 6.4*t9591*t9847) + t9645*t9849 + t9657*t9998;
  p_output1[52]=t9877;
  p_output1[53]=t9707;
  p_output1[54]=3.3612 + 6.8*t10004 + 3.2*t10006 + 3.2*t10008 + 6.8*t10010 + 3.2*t10012 + 3.2*t10014;
  p_output1[55]=t10124;
  p_output1[56]=t10126;
  p_output1[57]=t10130;
  p_output1[58]=t10132;
  p_output1[59]=t10138;
  p_output1[60]=t10142;
  p_output1[61]=t9622;
  p_output1[62]=t9911;
  p_output1[63]=t10026;
  p_output1[64]=-1.58228 - 3.2*t10143 - 3.2*t10145;
  p_output1[65]=t10149;
  p_output1[66]=t10036 + t10044 + t9632*t9645 + t9657*t9917;
  p_output1[67]=t10036 + t10044 + t10051*t9699 + t9645*t9718 + t9657*t9946;
  p_output1[68]=t10067 + t10074 + t10079*t9699 + 0.768*t9625*t9754 + t9628*(6.4*t9616*t9754 + 6.4*t9620*t9758) + t9645*t9760 + t9657*t9962;
  p_output1[69]=t9881;
  p_output1[70]=t9632;
  p_output1[71]=t10124;
  p_output1[72]=1.58228 + 3.2*t10143 + 3.2*t10145;
  p_output1[73]=t10170;
  p_output1[74]=t10138;
  p_output1[75]=t10142;
  p_output1[76]=t9623;
  p_output1[77]=t9912;
  p_output1[78]=t10028;
  p_output1[79]=t10149;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=t10067 + t10074 + 0.768*t9490*t9645 + 0.768*t9657*t9668;
  p_output1[82]=t10067 + t10074 + t10175 + t10176 + 0.768*t9699*t9740;
  p_output1[83]=t10175 + t10176 + 0.768*t9628*t9754 + 0.768*t9699*t9772 - 1.*(t10069 + 0.4*t6713*t9254 + 0.8*(t10070 - 1.*t6713*t9254))*var4[0] - 1.*(t10062 + t10180 + 0.8*(t10063 - 1.*t9247*t9254))*var4[2];
  p_output1[84]=t9882;
  p_output1[85]=t10002;
  p_output1[86]=t10126;
  p_output1[87]=t10170;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t10030 + t10180 - 0.8*(t10134 - 1.*t6713*t9265);
  p_output1[90]=-0.8*t10071 - 0.4*t9247*t9265 + 0.4*t9254*t9481;
  p_output1[91]=t9610;
  p_output1[92]=t9906;
  p_output1[93]=t10020;
  p_output1[94]=-1.58228 - 3.2*t10201 - 3.2*t10203;
  p_output1[95]=t10207;
  p_output1[96]=t9642*t9645 + t9657*t9923;
  p_output1[97]=t10091*t9699 + t9645*t9789 + t9657*t9975;
  p_output1[98]=t10105*t9699 + 0.768*t9635*t9825 + t9638*(6.4*t9604*t9825 + 6.4*t9608*t9829) + t9645*t9831 + t9657*t9991;
  p_output1[99]=t9886;
  p_output1[100]=t9642;
  p_output1[101]=t10130;
  p_output1[102]=1.58228 + 3.2*t10201 + 3.2*t10203;
  p_output1[103]=t10228;
  p_output1[104]=t9611;
  p_output1[105]=t9907;
  p_output1[106]=t10022;
  p_output1[107]=t10207;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t9510*t9645 + 0.768*t9657*t9687;
  p_output1[110]=t10233 + t10234 + 0.768*t9699*t9811;
  p_output1[111]=t10233 + t10234 + 0.768*t9638*t9825 + 0.768*t9699*t9843;
  p_output1[112]=t9887;
  p_output1[113]=t10003;
  p_output1[114]=t10132;
  p_output1[115]=t10228;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
