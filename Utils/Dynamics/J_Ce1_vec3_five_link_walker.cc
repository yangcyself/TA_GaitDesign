/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:56:15 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t32;
  double t52;
  double t31;
  double t47;
  double t71;
  double t76;
  double t85;
  double t88;
  double t89;
  double t74;
  double t79;
  double t81;
  double t94;
  double t95;
  double t98;
  double t99;
  double t102;
  double t84;
  double t92;
  double t93;
  double t103;
  double t106;
  double t107;
  double t111;
  double t114;
  double t115;
  double t5834;
  double t5849;
  double t5856;
  double t2892;
  double t2970;
  double t3041;
  double t6464;
  double t6465;
  double t6495;
  double t110;
  double t2770;
  double t2792;
  double t2887;
  double t4237;
  double t4608;
  double t6255;
  double t6384;
  double t6389;
  double t6452;
  double t6532;
  double t6535;
  double t6545;
  double t6579;
  double t6581;
  double t6666;
  double t8606;
  double t8611;
  double t6769;
  double t8614;
  double t8616;
  double t8408;
  double t44;
  double t54;
  double t55;
  double t56;
  double t57;
  double t61;
  double t64;
  double t66;
  double t69;
  double t9054;
  double t9057;
  double t9316;
  double t9330;
  double t9343;
  double t9344;
  double t9410;
  double t10099;
  double t11993;
  double t12046;
  double t12047;
  double t12050;
  double t12182;
  double t12183;
  double t12194;
  double t12195;
  double t12205;
  double t12457;
  double t12472;
  double t12473;
  double t12181;
  double t12206;
  double t12288;
  double t12342;
  double t11971;
  double t11998;
  double t12010;
  double t12474;
  double t12475;
  double t12476;
  double t12165;
  double t12448;
  double t12477;
  double t12482;
  double t12693;
  double t12694;
  double t12606;
  double t12607;
  double t12637;
  double t12586;
  double t12700;
  double t12701;
  double t12703;
  double t12714;
  double t12715;
  double t12748;
  double t12749;
  double t12750;
  double t9055;
  double t9209;
  double t9261;
  double t9458;
  double t9460;
  double t9519;
  double t9623;
  double t9917;
  double t9660;
  double t9714;
  double t9823;
  double t9942;
  double t10026;
  double t10027;
  double t10052;
  double t12695;
  double t12713;
  double t12745;
  double t12751;
  double t12752;
  double t12753;
  double t12791;
  double t12792;
  double t12793;
  double t12950;
  double t12951;
  double t13010;
  double t12795;
  double t13025;
  double t13026;
  double t12797;
  double t3113;
  double t5868;
  double t5974;
  double t6156;
  double t6726;
  double t6802;
  double t8461;
  double t8467;
  double t8473;
  double t13098;
  double t13099;
  double t13138;
  double t13139;
  double t13130;
  double t13131;
  double t13132;
  double t13094;
  double t13095;
  double t13097;
  double t13101;
  double t8613;
  double t8618;
  double t8629;
  double t13103;
  double t13104;
  double t13126;
  double t13129;
  double t13135;
  double t8631;
  double t8633;
  double t8636;
  double t13142;
  double t13185;
  double t13186;
  double t13176;
  double t8630;
  double t8663;
  double t8665;
  double t13181;
  double t13182;
  double t13183;
  double t13184;
  double t13190;
  double t13191;
  double t13192;
  double t13193;
  double t13194;
  double t13195;
  double t13196;
  double t13197;
  double t13198;
  double t13199;
  double t13200;
  double t13201;
  double t13202;
  double t13203;
  double t13204;
  double t12817;
  double t12819;
  double t12820;
  double t12821;
  double t12822;
  double t12823;
  double t12824;
  double t12825;
  double t12919;
  double t12943;
  double t12949;
  double t13024;
  double t13053;
  double t13076;
  double t13077;
  double t13078;
  double t13079;
  double t13081;
  double t13083;
  double t13084;
  double t12710;
  double t12737;
  double t12746;
  double t13255;
  double t13256;
  double t12794;
  double t12796;
  double t12801;
  double t13301;
  double t13302;
  double t13287;
  double t13290;
  double t13291;
  double t13252;
  double t13253;
  double t13254;
  double t13257;
  double t13268;
  double t13269;
  double t13270;
  double t13285;
  double t13298;
  double t13307;
  double t13356;
  double t13357;
  double t13361;
  double t13319;
  double t12747;
  double t12803;
  double t12807;
  double t13274;
  double t13295;
  double t13308;
  double t13315;
  double t13258;
  double t13263;
  double t13284;
  double t13286;
  double t13296;
  double t13297;
  double t13299;
  double t13300;
  double t13303;
  double t13304;
  double t13305;
  double t13306;
  double t13309;
  double t13310;
  double t13323;
  double t13324;
  double t13325;
  double t13427;
  double t13429;
  double t13418;
  double t13419;
  double t13420;
  double t13421;
  double t13328;
  double t13329;
  double t13330;
  double t13441;
  double t13442;
  double t13447;
  double t13449;
  double t13428;
  double t13430;
  double t13431;
  double t13434;
  double t13435;
  double t13436;
  double t13453;
  double t13454;
  double t13455;
  double t13456;
  double t13457;
  double t13448;
  double t13450;
  double t13451;
  double t9013;
  double t9038;
  double t9001;
  double t9002;
  double t13468;
  double t13470;
  double t13471;
  double t13472;
  double t13473;
  double t13464;
  double t13465;
  double t13466;
  double t13467;
  double t12604;
  double t12605;
  double t13490;
  double t12041;
  double t12180;
  double t13486;
  double t13487;
  double t13495;
  double t13497;
  double t13498;
  double t13499;
  double t13469;
  double t13474;
  double t13475;
  double t13127;
  double t13128;
  double t13133;
  double t13134;
  double t13136;
  double t13141;
  double t13143;
  double t13144;
  double t13145;
  double t13177;
  double t13512;
  double t13514;
  double t13515;
  double t13477;
  double t13478;
  double t13479;
  double t13521;
  double t13522;
  double t13523;
  double t13524;
  double t13525;
  double t13526;
  double t13527;
  double t13211;
  double t13212;
  double t13213;
  double t13216;
  double t13217;
  double t13218;
  double t13503;
  double t13504;
  double t13505;
  double t13506;
  double t13507;
  double t13338;
  double t13339;
  double t13340;
  double t13542;
  double t13545;
  double t13546;
  double t13349;
  double t13355;
  double t13372;
  double t13373;
  double t13374;
  double t13379;
  double t13383;
  double t13384;
  double t13385;
  double t13386;
  double t13496;
  double t13500;
  double t13501;
  double t13394;
  double t13395;
  double t13396;
  double t13399;
  double t13404;
  double t13408;
  double t13543;
  double t13544;
  double t13547;
  double t13548;
  double t13549;
  double t13550;
  double t13551;
  double t8506;
  double t8978;
  double t8988;
  double t9007;
  double t9039;
  double t12534;
  double t12641;
  double t12689;
  double t12815;
  double t13089;
  double t13093;
  double t13208;
  double t13246;
  double t13392;
  double t13584;
  double t13585;
  double t13586;
  double t13587;
  double t13588;
  double t13603;
  double t13604;
  double t13605;
  double t13606;
  double t13607;
  double t13636;
  double t13637;
  double t13638;
  double t13640;
  double t13641;
  double t13642;
  double t13648;
  double t13649;
  double t13650;
  double t13651;
  double t13652;
  double t13644;
  double t13645;
  double t13646;
  double t13659;
  double t13660;
  double t13661;
  double t13663;
  double t13664;
  double t13665;
  double t13666;
  double t13670;
  double t13671;
  double t13672;
  double t13673;
  double t13674;
  double t13675;
  double t13676;
  double t13677;
  double t13678;
  double t13679;
  double t13680;
  double t13698;
  double t13699;
  double t13700;
  double t13702;
  double t13703;
  double t13704;
  double t13705;
  double t13706;
  double t13734;
  double t13737;
  double t13729;
  double t13730;
  double t13731;
  double t13732;
  double t13740;
  double t13741;
  double t13742;
  double t13724;
  double t13725;
  double t13726;
  double t13727;
  double t13735;
  double t13736;
  double t13738;
  double t13728;
  double t13733;
  double t13739;
  double t13743;
  double t13744;
  double t13774;
  double t13775;
  double t13776;
  double t13777;
  double t13768;
  double t13769;
  double t13770;
  double t13771;
  double t13772;
  t32 = Cos(var1[3]);
  t52 = Sin(var1[3]);
  t31 = Cos(var1[2]);
  t47 = Sin(var1[2]);
  t71 = Cos(var1[4]);
  t76 = Sin(var1[4]);
  t85 = t32*t71;
  t88 = -1.*t52*t76;
  t89 = t85 + t88;
  t74 = -1.*t71*t52;
  t79 = -1.*t32*t76;
  t81 = t74 + t79;
  t94 = -1.*t71;
  t95 = 1. + t94;
  t98 = 0.4*t95;
  t99 = 0.64*t71;
  t102 = t98 + t99;
  t84 = t31*t81;
  t92 = -1.*t47*t89;
  t93 = t84 + t92;
  t103 = t102*t52;
  t106 = 0.24*t32*t76;
  t107 = t103 + t106;
  t111 = t32*t102;
  t114 = -0.24*t52*t76;
  t115 = t111 + t114;
  t5834 = t71*t52;
  t5849 = t32*t76;
  t5856 = t5834 + t5849;
  t2892 = -1.*t102*t52;
  t2970 = -0.24*t32*t76;
  t3041 = t2892 + t2970;
  t6464 = -1.*t32*t71;
  t6465 = t52*t76;
  t6495 = t6464 + t6465;
  t110 = -1.*t107*t89;
  t2770 = -1.*t81*t115;
  t2792 = t110 + t2770;
  t2887 = 3.2*t93*t2792;
  t4237 = t107*t89;
  t4608 = t81*t115;
  t6255 = t107*t5856;
  t6384 = t89*t115;
  t6389 = t6255 + t6384;
  t6452 = -1.*t47*t81;
  t6532 = t31*t6495;
  t6535 = t6452 + t6532;
  t6545 = 3.2*t6389*t6535;
  t6579 = -1.*t47*t5856;
  t6581 = t31*t89;
  t6666 = t6579 + t6581;
  t8606 = -0.24*t71*t52;
  t8611 = t8606 + t2970;
  t6769 = -1.*t81*t107;
  t8614 = 0.24*t32*t71;
  t8616 = t8614 + t114;
  t8408 = -1.*t115*t6495;
  t44 = -1.*t31*t32;
  t54 = t47*t52;
  t55 = t44 + t54;
  t56 = Power(t32,2);
  t57 = 0.11*t56;
  t61 = Power(t52,2);
  t64 = 0.11*t61;
  t66 = t57 + t64;
  t69 = 6.8*t55*t66;
  t9054 = Cos(var1[5]);
  t9057 = Sin(var1[5]);
  t9316 = -1.*t9054;
  t9330 = 1. + t9316;
  t9343 = 0.63*t9330;
  t9344 = 0.74*t9054;
  t9410 = t9343 + t9344;
  t10099 = Cos(var1[6]);
  t11993 = Sin(var1[6]);
  t12046 = t9054*t10099;
  t12047 = -1.*t9057*t11993;
  t12050 = t12046 + t12047;
  t12182 = -1.*t10099;
  t12183 = 1. + t12182;
  t12194 = 1.03*t12183;
  t12195 = 1.27*t10099;
  t12205 = t12194 + t12195;
  t12457 = -1.*t10099*t9057;
  t12472 = -1.*t9054*t11993;
  t12473 = t12457 + t12472;
  t12181 = -0.63*t9057;
  t12206 = t12205*t9057;
  t12288 = 0.24*t9054*t11993;
  t12342 = t12181 + t12206 + t12288;
  t11971 = t10099*t9057;
  t11998 = t9054*t11993;
  t12010 = t11971 + t11998;
  t12474 = t9054*t12205;
  t12475 = -0.24*t9057*t11993;
  t12476 = t9343 + t12474 + t12475;
  t12165 = -1.*t47*t12050;
  t12448 = -1.*t12342*t12050;
  t12477 = -1.*t12473*t12476;
  t12482 = t12448 + t12477;
  t12693 = t31*t12473;
  t12694 = t12693 + t12165;
  t12606 = t12342*t12010;
  t12607 = t12050*t12476;
  t12637 = t12606 + t12607;
  t12586 = -1.*t47*t12473;
  t12700 = -0.24*t10099*t9057;
  t12701 = -0.24*t9054*t11993;
  t12703 = t12700 + t12701;
  t12714 = 0.24*t9054*t10099;
  t12715 = t12714 + t12475;
  t12748 = -1.*t9054*t10099;
  t12749 = t9057*t11993;
  t12750 = t12748 + t12749;
  t9055 = -1.*t9054*t47;
  t9209 = -1.*t31*t9057;
  t9261 = t9055 + t9209;
  t9458 = t9410*t9057;
  t9460 = -0.11*t9054*t9057;
  t9519 = t9458 + t9460;
  t9623 = 6.8*t9261*t9519;
  t9917 = t9410*t9054;
  t9660 = -1.*t31*t9054;
  t9714 = t47*t9057;
  t9823 = t9660 + t9714;
  t9942 = Power(t9057,2);
  t10026 = 0.11*t9942;
  t10027 = t9917 + t10026;
  t10052 = 6.8*t9823*t10027;
  t12695 = 3.2*t12694*t12482;
  t12713 = t12342*t12050;
  t12745 = t12473*t12476;
  t12751 = t31*t12750;
  t12752 = t12586 + t12751;
  t12753 = 3.2*t12637*t12752;
  t12791 = -1.*t47*t12010;
  t12792 = t31*t12050;
  t12793 = t12791 + t12792;
  t12950 = 0.63*t9057;
  t12951 = -1.*t12205*t9057;
  t13010 = t12950 + t12951 + t12701;
  t12795 = -1.*t12473*t12342;
  t13025 = -0.63*t9054;
  t13026 = t13025 + t12474 + t12475;
  t12797 = -1.*t12476*t12750;
  t3113 = t3041*t89;
  t5868 = t5856*t115;
  t5974 = t3113 + t4237 + t4608 + t5868;
  t6156 = 3.2*t93*t5974;
  t6726 = -1.*t81*t3041;
  t6802 = -1.*t89*t115;
  t8461 = t6726 + t6769 + t6802 + t8408;
  t8467 = 3.2*t6666*t8461;
  t8473 = t69 + t2887 + t6156 + t6545 + t8467;
  t13098 = t47*t6495;
  t13099 = t84 + t13098;
  t13138 = t47*t81;
  t13139 = t13138 + t6581;
  t13130 = -1.*t32*t102;
  t13131 = 0.24*t52*t76;
  t13132 = t13130 + t13131;
  t13094 = t47*t5856;
  t13095 = t13094 + t6532;
  t13097 = 3.2*t6389*t13095;
  t13101 = 3.2*t2792*t13099;
  t8613 = t8611*t89;
  t8618 = t5856*t8616;
  t8629 = t8613 + t4237 + t4608 + t8618;
  t13103 = t31*t5856;
  t13104 = t47*t89;
  t13126 = t13103 + t13104;
  t13129 = -1.*t5856*t115;
  t13135 = -1.*t107*t6495;
  t8631 = -1.*t81*t8611;
  t8633 = -1.*t89*t8616;
  t8636 = t8631 + t6769 + t8633 + t8408;
  t13142 = t81*t107;
  t13185 = -0.24*t32*t71;
  t13186 = t13185 + t13131;
  t13176 = t115*t6495;
  t8630 = 3.2*t93*t8629;
  t8663 = 3.2*t6666*t8636;
  t8665 = t2887 + t8630 + t6545 + t8663;
  t13181 = 3.2*t5974*t13099;
  t13182 = 3.2*t8629*t13099;
  t13183 = -1.*t8611*t89;
  t13184 = -1.*t81*t8616;
  t13190 = -1.*t81*t13186;
  t13191 = -1.*t3041*t6495;
  t13192 = -1.*t8611*t6495;
  t13193 = t13183 + t2770 + t13129 + t13184 + t13190 + t13191 + t13192 + t13135;
  t13194 = 3.2*t13126*t13193;
  t13195 = 3.2*t13139*t8461;
  t13196 = 3.2*t13139*t8636;
  t13197 = t81*t3041;
  t13198 = t81*t8611;
  t13199 = t8611*t5856;
  t13200 = t89*t8616;
  t13201 = t89*t13186;
  t13202 = t13197 + t13198 + t13142 + t13199 + t6384 + t13200 + t13201 + t13176;
  t13203 = 3.2*t13139*t13202;
  t13204 = t13097 + t13101 + t13181 + t13182 + t13194 + t13195 + t13196 + t13203;
  t12817 = -1.*t9410*t9057;
  t12819 = 0.11*t9054*t9057;
  t12820 = t12817 + t12819;
  t12821 = 6.8*t9261*t12820;
  t12822 = Power(t9054,2);
  t12823 = -0.11*t12822;
  t12824 = t9917 + t12823;
  t12825 = t31*t9054;
  t12919 = -1.*t47*t9057;
  t12943 = t12825 + t12919;
  t12949 = 6.8*t12824*t12943;
  t13024 = t13010*t12050;
  t13053 = t12010*t13026;
  t13076 = t13024 + t12713 + t12745 + t13053;
  t13077 = 3.2*t12694*t13076;
  t13078 = -1.*t12473*t13010;
  t13079 = -1.*t12050*t13026;
  t13081 = t13078 + t12795 + t13079 + t12797;
  t13083 = 3.2*t12793*t13081;
  t13084 = t9623 + t12821 + t12949 + t10052 + t12695 + t13077 + t12753 + t13083;
  t12710 = t12703*t12050;
  t12737 = t12010*t12715;
  t12746 = t12710 + t12713 + t12737 + t12745;
  t13255 = t47*t12750;
  t13256 = t12693 + t13255;
  t12794 = -1.*t12473*t12703;
  t12796 = -1.*t12050*t12715;
  t12801 = t12794 + t12795 + t12796 + t12797;
  t13301 = t47*t12473;
  t13302 = t13301 + t12792;
  t13287 = -0.24*t9054*t10099;
  t13290 = 0.24*t9057*t11993;
  t13291 = t13287 + t13290;
  t13252 = t47*t12010;
  t13253 = t13252 + t12751;
  t13254 = 3.2*t12637*t13253;
  t13257 = 3.2*t12482*t13256;
  t13268 = t31*t12010;
  t13269 = t47*t12050;
  t13270 = t13268 + t13269;
  t13285 = -1.*t12010*t12476;
  t13298 = -1.*t12342*t12750;
  t13307 = t12473*t12342;
  t13356 = 0.63*t9054;
  t13357 = -1.*t9054*t12205;
  t13361 = t13356 + t13357 + t13290;
  t13319 = t12476*t12750;
  t12747 = 3.2*t12694*t12746;
  t12803 = 3.2*t12793*t12801;
  t12807 = t12695 + t12747 + t12753 + t12803;
  t13274 = -1.*t12703*t12050;
  t13295 = -1.*t12473*t13291;
  t13308 = t12703*t12010;
  t13315 = t12050*t13291;
  t13258 = 3.2*t12746*t13256;
  t13263 = 3.2*t13076*t13256;
  t13284 = -1.*t12473*t12715;
  t13286 = -1.*t12473*t13026;
  t13296 = -1.*t12703*t12750;
  t13297 = -1.*t13010*t12750;
  t13299 = t13274 + t13284 + t13285 + t13286 + t13295 + t13296 + t13297 + t13298;
  t13300 = 3.2*t13270*t13299;
  t13303 = 3.2*t13302*t12801;
  t13304 = 3.2*t13302*t13081;
  t13305 = t12473*t12703;
  t13306 = t12473*t13010;
  t13309 = t12050*t12715;
  t13310 = t12050*t13026;
  t13323 = t13305 + t13306 + t13307 + t13308 + t13309 + t13310 + t13315 + t13319;
  t13324 = 3.2*t13302*t13323;
  t13325 = t13254 + t13257 + t13258 + t13263 + t13300 + t13303 + t13304 + t13324;
  t13427 = 3.2*t13139*t2792;
  t13429 = 3.2*t6389*t13099;
  t13418 = -1.*t32*t47;
  t13419 = -1.*t31*t52;
  t13420 = t13418 + t13419;
  t13421 = 6.8*t13420*t66;
  t13328 = t9054*t47;
  t13329 = t31*t9057;
  t13330 = t13328 + t13329;
  t13441 = 6.8*t9519*t12943;
  t13442 = 6.8*t9261*t10027;
  t13447 = 3.2*t13302*t12482;
  t13449 = 3.2*t12637*t13256;
  t13428 = 3.2*t13139*t5974;
  t13430 = 3.2*t13126*t8461;
  t13431 = t13421 + t13427 + t13428 + t13429 + t13430;
  t13434 = 3.2*t13139*t8629;
  t13435 = 3.2*t13126*t8636;
  t13436 = t13427 + t13434 + t13429 + t13435;
  t13453 = 6.8*t12824*t13330;
  t13454 = 6.8*t12820*t12943;
  t13455 = 3.2*t13302*t13076;
  t13456 = 3.2*t13270*t13081;
  t13457 = t13453 + t13441 + t13454 + t13442 + t13447 + t13455 + t13449 + t13456;
  t13448 = 3.2*t13302*t12746;
  t13450 = 3.2*t13270*t12801;
  t13451 = t13447 + t13448 + t13449 + t13450;
  t9013 = -1.*t31*t89;
  t9038 = t6452 + t9013;
  t9001 = -1.*t31*t5856;
  t9002 = t9001 + t92;
  t13468 = 3.2*t9038*t2792;
  t13470 = -1.*t31*t81;
  t13471 = -1.*t47*t6495;
  t13472 = t13470 + t13471;
  t13473 = 3.2*t6389*t13472;
  t13464 = t32*t47;
  t13465 = t31*t52;
  t13466 = t13464 + t13465;
  t13467 = 6.8*t13466*t66;
  t12604 = -1.*t31*t12050;
  t12605 = t12586 + t12604;
  t13490 = -1.*t31*t12473;
  t12041 = -1.*t31*t12010;
  t12180 = t12041 + t12165;
  t13486 = 6.8*t9519*t9823;
  t13487 = 6.8*t13330*t10027;
  t13495 = 3.2*t12605*t12482;
  t13497 = -1.*t47*t12750;
  t13498 = t13490 + t13497;
  t13499 = 3.2*t12637*t13498;
  t13469 = 3.2*t9038*t5974;
  t13474 = 3.2*t9002*t8461;
  t13475 = t13467 + t13468 + t13469 + t13473 + t13474;
  t13127 = -1.*t3041*t89;
  t13128 = -2.*t81*t115;
  t13133 = -1.*t81*t13132;
  t13134 = -2.*t3041*t6495;
  t13136 = t13127 + t13128 + t13129 + t13133 + t13134 + t13135;
  t13141 = 2.*t81*t3041;
  t13143 = t3041*t5856;
  t13144 = 2.*t89*t115;
  t13145 = t89*t13132;
  t13177 = t13141 + t13142 + t13143 + t13144 + t13145 + t13176;
  t13512 = 3.2*t2792*t6535;
  t13514 = t13103 + t13471;
  t13515 = 3.2*t6389*t13514;
  t13477 = 3.2*t9038*t8629;
  t13478 = 3.2*t9002*t8636;
  t13479 = t13468 + t13477 + t13473 + t13478;
  t13521 = 3.2*t5974*t6535;
  t13522 = 3.2*t8629*t6535;
  t13523 = 3.2*t6666*t13193;
  t13524 = 3.2*t93*t8461;
  t13525 = 3.2*t93*t8636;
  t13526 = 3.2*t93*t13202;
  t13527 = t13512 + t13521 + t13522 + t13515 + t13523 + t13524 + t13525 + t13526;
  t13211 = -2.*t81*t8616;
  t13212 = -2.*t8611*t6495;
  t13213 = t13183 + t13129 + t13211 + t13190 + t13212 + t13135;
  t13216 = 2.*t81*t8611;
  t13217 = 2.*t89*t8616;
  t13218 = t13216 + t13142 + t13199 + t13217 + t13201 + t13176;
  t13503 = 6.8*t12824*t9261;
  t13504 = 6.8*t12820*t9823;
  t13505 = 3.2*t12605*t13076;
  t13506 = 3.2*t12180*t13081;
  t13507 = t13503 + t13486 + t13504 + t13487 + t13495 + t13505 + t13499 + t13506;
  t13338 = -1.*t9410*t9054;
  t13339 = 0.11*t12822;
  t13340 = t13338 + t13339;
  t13542 = 3.2*t12482*t12752;
  t13545 = t13268 + t13497;
  t13546 = 3.2*t12637*t13545;
  t13349 = -1.*t13010*t12050;
  t13355 = -2.*t12473*t13026;
  t13372 = -1.*t12473*t13361;
  t13373 = -2.*t13010*t12750;
  t13374 = t13349 + t13285 + t13355 + t13372 + t13373 + t13298;
  t13379 = 2.*t12473*t13010;
  t13383 = t13010*t12010;
  t13384 = 2.*t12050*t13026;
  t13385 = t12050*t13361;
  t13386 = t13379 + t13307 + t13383 + t13384 + t13385 + t13319;
  t13496 = 3.2*t12605*t12746;
  t13500 = 3.2*t12180*t12801;
  t13501 = t13495 + t13496 + t13499 + t13500;
  t13394 = -2.*t12473*t12715;
  t13395 = -2.*t12703*t12750;
  t13396 = t13274 + t13394 + t13285 + t13295 + t13395 + t13298;
  t13399 = 2.*t12473*t12703;
  t13404 = 2.*t12050*t12715;
  t13408 = t13399 + t13307 + t13308 + t13404 + t13315 + t13319;
  t13543 = 3.2*t12746*t12752;
  t13544 = 3.2*t13076*t12752;
  t13547 = 3.2*t12793*t13299;
  t13548 = 3.2*t12694*t12801;
  t13549 = 3.2*t12694*t13081;
  t13550 = 3.2*t12694*t13323;
  t13551 = t13542 + t13543 + t13544 + t13546 + t13547 + t13548 + t13549 + t13550;
  t8506 = -0.5*var2[3]*t8473;
  t8978 = -0.5*var2[4]*t8665;
  t8988 = -2.88*t31;
  t9007 = 3.2*t9002*t2792;
  t9039 = 3.2*t9038*t6389;
  t12534 = 3.2*t12180*t12482;
  t12641 = 3.2*t12605*t12637;
  t12689 = t8988 + t69 + t9007 + t9039 + t9623 + t10052 + t12534 + t12641;
  t12815 = -0.5*var2[6]*t12807;
  t13089 = -0.5*var2[5]*t13084;
  t13093 = -0.5*var2[2]*t8473;
  t13208 = -0.5*var2[2]*t8665;
  t13246 = -0.5*var2[2]*t13084;
  t13392 = -0.5*var2[2]*t12807;
  t13584 = 6.4*t5974*t8629;
  t13585 = 6.4*t2792*t13193;
  t13586 = 6.4*t8461*t8636;
  t13587 = 6.4*t6389*t13202;
  t13588 = t13584 + t13585 + t13586 + t13587;
  t13603 = 6.4*t12746*t13076;
  t13604 = 6.4*t12482*t13299;
  t13605 = 6.4*t12801*t13081;
  t13606 = 6.4*t12637*t13323;
  t13607 = t13603 + t13604 + t13605 + t13606;
  t13636 = 6.4*t5974*t6389;
  t13637 = 6.4*t2792*t8461;
  t13638 = t13636 + t13637;
  t13640 = 6.4*t6389*t8629;
  t13641 = 6.4*t2792*t8636;
  t13642 = t13640 + t13641;
  t13648 = 13.6*t12824*t9519;
  t13649 = 13.6*t12820*t10027;
  t13650 = 6.4*t12637*t13076;
  t13651 = 6.4*t12482*t13081;
  t13652 = t13648 + t13649 + t13650 + t13651;
  t13644 = 6.4*t12746*t12637;
  t13645 = 6.4*t12482*t12801;
  t13646 = t13644 + t13645;
  t13659 = t102*t76;
  t13660 = -0.24*t71*t76;
  t13661 = t13659 + t13660;
  t13663 = t102*t71;
  t13664 = Power(t76,2);
  t13665 = 0.24*t13664;
  t13666 = t13663 + t13665;
  t13670 = -1.*t102*t76;
  t13671 = 0.24*t71*t76;
  t13672 = t13670 + t13671;
  t13673 = 3.2*t13672*t5974;
  t13674 = 3.2*t13661*t13193;
  t13675 = Power(t71,2);
  t13676 = -0.24*t13675;
  t13677 = t13663 + t13676;
  t13678 = 3.2*t13677*t8461;
  t13679 = 3.2*t13666*t13202;
  t13680 = t13673 + t13674 + t13678 + t13679;
  t13698 = 3.2*t13666*t5974;
  t13699 = 3.2*t13661*t8461;
  t13700 = t13698 + t13699;
  t13702 = 3.2*t13677*t2792;
  t13703 = 3.2*t13672*t6389;
  t13704 = 3.2*t13666*t8629;
  t13705 = 3.2*t13661*t8636;
  t13706 = t13702 + t13703 + t13704 + t13705;
  t13734 = -0.63*t10099;
  t13737 = t10099*t12205;
  t13729 = -0.63*t11993;
  t13730 = -0.24*t10099*t11993;
  t13731 = t12205*t11993;
  t13732 = t13729 + t13730 + t13731;
  t13740 = Power(t11993,2);
  t13741 = 0.24*t13740;
  t13742 = t13734 + t13737 + t13741;
  t13724 = 0.63*t11993;
  t13725 = 0.24*t10099*t11993;
  t13726 = -1.*t12205*t11993;
  t13727 = t13724 + t13725 + t13726;
  t13735 = Power(t10099,2);
  t13736 = -0.24*t13735;
  t13738 = t13734 + t13736 + t13737;
  t13728 = 3.2*t13727*t13076;
  t13733 = 3.2*t13732*t13299;
  t13739 = 3.2*t13738*t13081;
  t13743 = 3.2*t13742*t13323;
  t13744 = t13728 + t13733 + t13739 + t13743;
  t13774 = 0.748*t12820;
  t13775 = 3.2*t13742*t13076;
  t13776 = 3.2*t13732*t13081;
  t13777 = t13774 + t13775 + t13776;
  t13768 = 3.2*t13738*t12482;
  t13769 = 3.2*t13742*t12746;
  t13770 = 3.2*t13727*t12637;
  t13771 = 3.2*t13732*t12801;
  t13772 = t13768 + t13769 + t13770 + t13771;
  p_output1[0]=var2[2]*(t12815 + t13089 + t8506 + t8978 - 0.5*t12689*var2[2]);
  p_output1[1]=var2[2]*(t13093 - 0.5*(t13097 + t13101 + 3.2*t13126*t13136 + 3.2*t13139*t13177 + 6.4*t13099*t5974 + t69 + 6.4*t13139*t8461)*var2[3] - 0.5*t13204*var2[4]);
  p_output1[2]=var2[2]*(t13208 - 0.5*t13204*var2[3] - 0.5*(t13097 + t13101 + 3.2*t13126*t13213 + 3.2*t13139*t13218 + 6.4*t13099*t8629 + 6.4*t13139*t8636)*var2[4]);
  p_output1[3]=var2[2]*(t13246 - 0.5*(t10052 + 13.6*t12824*t12943 + t13254 + 6.4*t13076*t13256 + t13257 + 6.4*t13081*t13302 + 6.8*t12820*t13330 + 6.8*t12943*t13340 + 3.2*t13270*t13374 + 3.2*t13302*t13386 + 13.6*t12820*t9261 + t9623)*var2[5] - 0.5*t13325*var2[6]);
  p_output1[4]=var2[2]*(t13392 - 0.5*t13325*var2[5] - 0.5*(t13254 + 6.4*t12746*t13256 + t13257 + 6.4*t12801*t13302 + 3.2*t13270*t13396 + 3.2*t13302*t13408)*var2[6]);
  p_output1[5]=-1.*(3.2*t12637*t12694 + 3.2*t12482*t12793 + t13421 + t13441 + t13442 - 2.88*t47 + 3.2*t2792*t6666 + 3.2*t6389*t93)*var2[2] - 0.5*t13431*var2[3] - 0.5*t13436*var2[4] - 0.5*t13457*var2[5] - 0.5*t13451*var2[6];
  p_output1[6]=-0.5*t13431*var2[2];
  p_output1[7]=-0.5*t13436*var2[2];
  p_output1[8]=-0.5*t13457*var2[2];
  p_output1[9]=-0.5*t13451*var2[2];
  p_output1[10]=var2[2]*(-0.5*(3.2*t12482*(t12604 + t13252) + t13467 + t13486 + t13487 + 3.2*t12637*(t13269 + t13490) + 2.88*t47 + 3.2*(t13104 + t13470)*t6389 + 3.2*t2792*(t13094 + t9013))*var2[2] - 0.5*t13475*var2[3] - 0.5*t13479*var2[4] - 0.5*t13507*var2[5] - 0.5*t13501*var2[6]);
  p_output1[11]=var2[2]*(-0.5*t13475*var2[2] - 0.5*(t13467 + t13512 + t13515 + 6.4*t5974*t6535 + 3.2*t13136*t6666 + 3.2*t13177*t93 + 6.4*t8461*t93)*var2[3] - 0.5*t13527*var2[4]);
  p_output1[12]=var2[2]*(-0.5*t13479*var2[2] - 0.5*t13527*var2[3] - 0.5*(t13512 + t13515 + 3.2*t13213*t6666 + 6.4*t6535*t8629 + 3.2*t13218*t93 + 6.4*t8636*t93)*var2[4]);
  p_output1[13]=var2[2]*(-0.5*t13507*var2[2] - 0.5*(6.4*t12752*t13076 + 6.4*t12694*t13081 + 3.2*t12793*t13374 + 3.2*t12694*t13386 + t13454 + t13486 + t13487 + t13542 + t13546 + 13.6*t12824*t9261 + 6.8*t13340*t9261 + 13.6*t12820*t9823)*var2[5] - 0.5*t13551*var2[6]);
  p_output1[14]=var2[2]*(-0.5*t13501*var2[2] - 0.5*t13551*var2[5] - 0.5*(6.4*t12746*t12752 + 6.4*t12694*t12801 + 3.2*t12793*t13396 + 3.2*t12694*t13408 + t13542 + t13546)*var2[6]);
  p_output1[15]=t12815 + t13089 + t8506 + t8978 - 1.*t12689*var2[2];
  p_output1[16]=t13093;
  p_output1[17]=t13208;
  p_output1[18]=t13246;
  p_output1[19]=t13392;
  p_output1[20]=var2[2]*(-0.5*(6.4*t13136*t2792 + 6.4*Power(t5974,2) + 6.4*t13177*t6389 + 6.4*Power(t8461,2))*var2[3] - 0.5*t13588*var2[4]);
  p_output1[21]=var2[2]*(-0.5*t13588*var2[3] - 0.5*(6.4*t13213*t2792 + 6.4*t13218*t6389 + 6.4*Power(t8629,2) + 6.4*Power(t8636,2))*var2[4]);
  p_output1[22]=var2[2]*(-0.5*(13.6*Power(t12820,2) + 13.6*Power(t12824,2) + 6.4*Power(t13076,2) + 6.4*Power(t13081,2) + 13.6*t10027*t13340 + 6.4*t12482*t13374 + 6.4*t12637*t13386 + 13.6*t12820*t9519)*var2[5] - 0.5*t13607*var2[6]);
  p_output1[23]=var2[2]*(-0.5*t13607*var2[5] - 0.5*(6.4*Power(t12746,2) + 6.4*Power(t12801,2) + 6.4*t12482*t13396 + 6.4*t12637*t13408)*var2[6]);
  p_output1[24]=-0.5*t13638*var2[3] - 0.5*t13642*var2[4] - 0.5*t13652*var2[5] - 0.5*t13646*var2[6];
  p_output1[25]=-0.5*t13638*var2[2];
  p_output1[26]=-0.5*t13642*var2[2];
  p_output1[27]=-0.5*t13652*var2[2];
  p_output1[28]=-0.5*t13646*var2[2];
  p_output1[29]=var2[2]*(-0.5*(3.2*t13136*t13661 + 3.2*t13177*t13666)*var2[3] - 0.5*t13680*var2[4]);
  p_output1[30]=var2[2]*(-0.5*t13680*var2[3] - 0.5*(3.2*t13213*t13661 + 3.2*t13218*t13666 + 3.2*t13672*t2792 + 3.2*t6389*(0.24*t13675 - 1.*t102*t71) + 6.4*t13672*t8629 + 6.4*t13677*t8636)*var2[4]);
  p_output1[31]=-0.5*t13700*var2[3] - 0.5*t13706*var2[4];
  p_output1[32]=-0.5*t13700*var2[2];
  p_output1[33]=-0.5*t13706*var2[2];
  p_output1[34]=var2[2]*(-0.384*t13177*var2[3] - 0.384*t13202*var2[4]);
  p_output1[35]=var2[2]*(-0.384*t13202*var2[3] - 0.384*t13218*var2[4]);
  p_output1[36]=-0.384*t5974*var2[3] - 0.384*t8629*var2[4];
  p_output1[37]=-0.384*t5974*var2[2];
  p_output1[38]=-0.384*t8629*var2[2];
  p_output1[39]=var2[2]*(-0.5*(0.748*t13340 + 3.2*t13374*t13732 + 3.2*t13386*t13742)*var2[5] - 0.5*t13744*var2[6]);
  p_output1[40]=var2[2]*(-0.5*t13744*var2[5] - 0.5*(3.2*t12482*t13727 + 6.4*t12746*t13727 + 3.2*t13396*t13732 + 3.2*t12637*(0.63*t10099 - 1.*t10099*t12205 + 0.24*t13735) + 6.4*t12801*t13738 + 3.2*t13408*t13742)*var2[6]);
  p_output1[41]=-0.5*t13777*var2[5] - 0.5*t13772*var2[6];
  p_output1[42]=-0.5*t13777*var2[2];
  p_output1[43]=-0.5*t13772*var2[2];
  p_output1[44]=var2[2]*(-0.384*t13386*var2[5] - 0.384*t13323*var2[6]);
  p_output1[45]=var2[2]*(-0.384*t13323*var2[5] - 0.384*t13408*var2[6]);
  p_output1[46]=-0.384*t13076*var2[5] - 0.384*t12746*var2[6];
  p_output1[47]=-0.384*t13076*var2[2];
  p_output1[48]=-0.384*t12746*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 49, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec3_five_link_walker.hh"

namespace LeftStance
{

void J_Ce1_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
