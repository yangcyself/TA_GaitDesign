/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:57:04 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6412;
  double t5981;
  double t6209;
  double t6538;
  double t6820;
  double t2871;
  double t6320;
  double t6676;
  double t6730;
  double t6814;
  double t6823;
  double t6824;
  double t6827;
  double t6835;
  double t6840;
  double t7005;
  double t7016;
  double t7030;
  double t7031;
  double t7032;
  double t7193;
  double t7110;
  double t7111;
  double t7194;
  double t7139;
  double t7195;
  double t7203;
  double t7217;
  double t7218;
  double t7221;
  double t7223;
  double t7256;
  double t7263;
  double t7320;
  double t7328;
  double t7329;
  double t7331;
  double t7332;
  double t9052;
  double t9483;
  double t9540;
  double t7401;
  double t7402;
  double t7409;
  double t6920;
  double t6930;
  double t7003;
  double t9591;
  double t9639;
  double t9667;
  double t7097;
  double t7093;
  double t7094;
  double t7095;
  double t7096;
  double t7098;
  double t10754;
  double t10832;
  double t14643;
  double t14644;
  double t14650;
  double t14640;
  double t14641;
  double t14642;
  double t7279;
  double t7285;
  double t7289;
  double t14728;
  double t14737;
  double t14746;
  double t7364;
  double t7354;
  double t7361;
  double t7362;
  double t7363;
  double t7367;
  double t14839;
  double t14876;
  double t10818;
  double t10824;
  double t10746;
  double t10816;
  double t10713;
  double t10735;
  double t12087;
  double t12225;
  double t14867;
  double t14872;
  double t14838;
  double t14840;
  double t14802;
  double t14803;
  double t14888;
  double t14889;
  double t14973;
  double t14974;
  double t14975;
  double t14977;
  double t14978;
  double t14979;
  double t14992;
  double t14993;
  double t14994;
  double t14995;
  double t14996;
  double t15015;
  double t15016;
  double t15017;
  double t15018;
  double t15021;
  double t15022;
  double t15023;
  double t7004;
  double t7070;
  double t7071;
  double t7072;
  double t7037;
  double t7064;
  double t7065;
  double t7066;
  double t15035;
  double t15036;
  double t15037;
  double t15038;
  double t15039;
  double t9555;
  double t10643;
  double t10698;
  double t10708;
  double t10829;
  double t14902;
  double t14903;
  double t14904;
  double t14909;
  double t14916;
  double t14917;
  double t15054;
  double t15055;
  double t14967;
  double t14968;
  double t14969;
  double t14970;
  double t14971;
  double t14972;
  double t14976;
  double t14980;
  double t14981;
  double t14983;
  double t14984;
  double t14985;
  double t15066;
  double t15067;
  double t15068;
  double t15040;
  double t15041;
  double t15042;
  double t15047;
  double t15048;
  double t15049;
  double t15050;
  double t15051;
  double t15052;
  double t15053;
  double t15056;
  double t15059;
  double t15060;
  double t15061;
  double t15062;
  double t15065;
  double t15070;
  double t15071;
  double t15075;
  double t15100;
  double t15101;
  double t15077;
  double t15103;
  double t15104;
  double t15079;
  double t7299;
  double t7339;
  double t7340;
  double t7341;
  double t7353;
  double t7300;
  double t7333;
  double t7335;
  double t7336;
  double t7337;
  double t15116;
  double t15117;
  double t15118;
  double t15119;
  double t15120;
  double t14727;
  double t14753;
  double t14754;
  double t14800;
  double t14873;
  double t14937;
  double t14938;
  double t14946;
  double t14947;
  double t14948;
  double t14951;
  double t15133;
  double t15134;
  double t14997;
  double t14998;
  double t14999;
  double t15000;
  double t15001;
  double t15002;
  double t15008;
  double t15009;
  double t15014;
  double t15020;
  double t15024;
  double t15025;
  double t15027;
  double t15028;
  double t15029;
  double t15153;
  double t15154;
  double t15155;
  double t15156;
  double t15160;
  double t15161;
  double t15121;
  double t15122;
  double t15123;
  double t15126;
  double t15127;
  double t15128;
  double t15129;
  double t15130;
  double t15131;
  double t15132;
  double t15135;
  double t15138;
  double t15139;
  double t15140;
  double t15141;
  double t15152;
  double t15158;
  double t15159;
  double t15165;
  double t15191;
  double t15192;
  double t15167;
  double t15194;
  double t15195;
  double t15169;
  double t14929;
  double t14931;
  double t14954;
  double t14956;
  double t15229;
  double t15230;
  double t15231;
  double t15232;
  double t15233;
  double t15234;
  double t15235;
  double t15236;
  double t15237;
  double t15238;
  double t15239;
  double t15240;
  double t15241;
  double t15242;
  double t15243;
  double t15244;
  double t15245;
  double t15247;
  double t15248;
  double t15249;
  double t15250;
  double t15251;
  double t15252;
  double t15253;
  double t15254;
  double t15255;
  double t15208;
  double t15209;
  double t15210;
  double t15211;
  double t15214;
  double t15215;
  double t15216;
  double t15217;
  double t15043;
  double t15046;
  double t15057;
  double t15058;
  double t15063;
  double t15064;
  double t15069;
  double t15072;
  double t15073;
  double t15074;
  double t15076;
  double t15078;
  double t15080;
  double t15081;
  double t15082;
  double t15083;
  double t15084;
  double t15085;
  double t10861;
  double t15264;
  double t15221;
  double t15292;
  double t15293;
  double t15294;
  double t15265;
  double t15086;
  double t15087;
  double t15088;
  double t15266;
  double t15267;
  double t15090;
  double t15091;
  double t15092;
  double t15270;
  double t15271;
  double t15272;
  double t15273;
  double t15274;
  double t15275;
  double t15278;
  double t15279;
  double t15280;
  double t15281;
  double t15282;
  double t15283;
  double t15286;
  double t15287;
  double t15102;
  double t15105;
  double t15106;
  double t15291;
  double t15297;
  double t15108;
  double t15109;
  double t15110;
  double t15302;
  double t15325;
  double t15326;
  double t15306;
  double t15219;
  double t15220;
  double t15354;
  double t15355;
  double t15356;
  double t15357;
  double t15358;
  double t15360;
  double t15361;
  double t15362;
  double t15363;
  double t15364;
  double t15346;
  double t15347;
  double t15348;
  double t15089;
  double t15093;
  double t15094;
  double t15095;
  double t15096;
  double t15097;
  double t15098;
  double t15099;
  double t15107;
  double t15111;
  double t15112;
  double t15113;
  double t15114;
  double t15115;
  double t15313;
  double t15314;
  double t15315;
  double t15316;
  double t15317;
  double t15318;
  double t15319;
  double t15320;
  double t15321;
  double t15322;
  double t15323;
  double t15324;
  double t15327;
  double t15328;
  double t15329;
  double t15330;
  double t15331;
  double t15332;
  double t15333;
  double t15334;
  double t15335;
  double t15336;
  double t15337;
  double t15338;
  double t15339;
  double t15340;
  double t15341;
  double t15342;
  double t15343;
  double t15344;
  double t15345;
  double t15350;
  double t15351;
  double t15400;
  double t15402;
  double t15403;
  double t15404;
  double t15394;
  double t15395;
  double t15396;
  double t15370;
  double t15124;
  double t15125;
  double t15136;
  double t15137;
  double t15142;
  double t15143;
  double t15144;
  double t15145;
  double t15146;
  double t15147;
  double t15148;
  double t15149;
  double t15150;
  double t15151;
  double t15157;
  double t15162;
  double t15163;
  double t15164;
  double t15166;
  double t15168;
  double t15170;
  double t15171;
  double t15172;
  double t15173;
  double t15174;
  double t15175;
  double t14886;
  double t15410;
  double t15225;
  double t15445;
  double t15446;
  double t15447;
  double t15448;
  double t15411;
  double t15176;
  double t15177;
  double t15178;
  double t15412;
  double t15180;
  double t15181;
  double t15182;
  double t15183;
  double t15413;
  double t15416;
  double t15417;
  double t15418;
  double t15419;
  double t15420;
  double t15421;
  double t15424;
  double t15425;
  double t15426;
  double t15427;
  double t15428;
  double t15429;
  double t15439;
  double t15440;
  double t15193;
  double t15196;
  double t15197;
  double t15443;
  double t15451;
  double t15199;
  double t15200;
  double t15201;
  double t15456;
  double t15480;
  double t15481;
  double t15460;
  double t15223;
  double t15224;
  double t15510;
  double t15511;
  double t15512;
  double t15513;
  double t15514;
  double t15516;
  double t15517;
  double t15518;
  double t15519;
  double t15520;
  double t15521;
  double t15522;
  double t15502;
  double t15503;
  double t15504;
  double t15179;
  double t15184;
  double t15185;
  double t15186;
  double t15187;
  double t15188;
  double t15189;
  double t15190;
  double t15198;
  double t15202;
  double t15203;
  double t15204;
  double t15205;
  double t15206;
  double t15467;
  double t15468;
  double t15469;
  double t15470;
  double t15471;
  double t15472;
  double t15473;
  double t15474;
  double t15475;
  double t15476;
  double t15477;
  double t15478;
  double t15479;
  double t15482;
  double t15483;
  double t15484;
  double t15485;
  double t15486;
  double t15487;
  double t15488;
  double t15489;
  double t15490;
  double t15491;
  double t15492;
  double t15493;
  double t15494;
  double t15495;
  double t15496;
  double t15497;
  double t15498;
  double t15499;
  double t15500;
  double t15501;
  double t15506;
  double t15507;
  double t15559;
  double t15561;
  double t15562;
  double t15563;
  double t15553;
  double t15554;
  double t15555;
  double t15528;
  t6412 = Cos(var1[3]);
  t5981 = Cos(var1[4]);
  t6209 = Sin(var1[3]);
  t6538 = Sin(var1[4]);
  t6820 = Cos(var1[2]);
  t2871 = Sin(var1[2]);
  t6320 = -1.*t5981*t6209;
  t6676 = -1.*t6412*t6538;
  t6730 = t6320 + t6676;
  t6814 = -1.*t2871*t6730;
  t6823 = t6412*t5981;
  t6824 = -1.*t6209*t6538;
  t6827 = t6823 + t6824;
  t6835 = -1.*t6820*t6827;
  t6840 = t6814 + t6835;
  t7005 = -1.*t5981;
  t7016 = 1. + t7005;
  t7030 = 0.4*t7016;
  t7031 = 0.64*t5981;
  t7032 = t7030 + t7031;
  t7193 = Cos(var1[5]);
  t7110 = Cos(var1[6]);
  t7111 = Sin(var1[5]);
  t7194 = Sin(var1[6]);
  t7139 = -1.*t7110*t7111;
  t7195 = -1.*t7193*t7194;
  t7203 = t7139 + t7195;
  t7217 = -1.*t2871*t7203;
  t7218 = t7193*t7110;
  t7221 = -1.*t7111*t7194;
  t7223 = t7218 + t7221;
  t7256 = -1.*t6820*t7223;
  t7263 = t7217 + t7256;
  t7320 = -1.*t7110;
  t7328 = 1. + t7320;
  t7329 = 1.03*t7328;
  t7331 = 1.27*t7110;
  t7332 = t7329 + t7331;
  t9052 = t6820*t6412;
  t9483 = -1.*t2871*t6209;
  t9540 = t9052 + t9483;
  t7401 = -1.*t6412*t2871;
  t7402 = -1.*t6820*t6209;
  t7409 = t7401 + t7402;
  t6920 = -1.*t6820*t6412;
  t6930 = t2871*t6209;
  t7003 = t6920 + t6930;
  t9591 = t6412*t2871;
  t9639 = t6820*t6209;
  t9667 = t9591 + t9639;
  t7097 = -1.*t2871*t6827;
  t7093 = t5981*t6209;
  t7094 = t6412*t6538;
  t7095 = t7093 + t7094;
  t7096 = -1.*t6820*t7095;
  t7098 = t7096 + t7097;
  t10754 = t6820*t6827;
  t10832 = t2871*t6827;
  t14643 = t6820*t7193;
  t14644 = -1.*t2871*t7111;
  t14650 = t14643 + t14644;
  t14640 = -1.*t7193*t2871;
  t14641 = -1.*t6820*t7111;
  t14642 = t14640 + t14641;
  t7279 = -1.*t6820*t7193;
  t7285 = t2871*t7111;
  t7289 = t7279 + t7285;
  t14728 = t7193*t2871;
  t14737 = t6820*t7111;
  t14746 = t14728 + t14737;
  t7364 = -1.*t2871*t7223;
  t7354 = t7110*t7111;
  t7361 = t7193*t7194;
  t7362 = t7354 + t7361;
  t7363 = -1.*t6820*t7362;
  t7367 = t7363 + t7364;
  t14839 = t6820*t7223;
  t14876 = t2871*t7223;
  t10818 = t2871*t6730;
  t10824 = t10818 + t10754;
  t10746 = -1.*t2871*t7095;
  t10816 = t10746 + t10754;
  t10713 = t6820*t6730;
  t10735 = t10713 + t7097;
  t12087 = t6820*t7095;
  t12225 = t12087 + t10832;
  t14867 = t2871*t7203;
  t14872 = t14867 + t14839;
  t14838 = -1.*t2871*t7362;
  t14840 = t14838 + t14839;
  t14802 = t6820*t7203;
  t14803 = t14802 + t7364;
  t14888 = t6820*t7362;
  t14889 = t14888 + t14876;
  t14973 = t7032*t6209;
  t14974 = 0.24*t6412*t6538;
  t14975 = t14973 + t14974;
  t14977 = t6412*t7032;
  t14978 = -0.24*t6209*t6538;
  t14979 = t14977 + t14978;
  t14992 = -1.*t7193;
  t14993 = 1. + t14992;
  t14994 = 0.63*t14993;
  t14995 = 0.74*t7193;
  t14996 = t14994 + t14995;
  t15015 = -0.63*t7111;
  t15016 = t7332*t7111;
  t15017 = 0.24*t7193*t7194;
  t15018 = t15015 + t15016 + t15017;
  t15021 = t7193*t7332;
  t15022 = -0.24*t7111*t7194;
  t15023 = t14994 + t15021 + t15022;
  t7004 = -0.748*t7003;
  t7070 = t7032*t6538;
  t7071 = -0.24*t5981*t6538;
  t7072 = t7070 + t7071;
  t7037 = t7032*t5981;
  t7064 = Power(t6538,2);
  t7065 = 0.24*t7064;
  t7066 = t7037 + t7065;
  t15035 = -1.*t6412*t5981;
  t15036 = t6209*t6538;
  t15037 = t15035 + t15036;
  t15038 = t6820*t15037;
  t15039 = t6814 + t15038;
  t9555 = -20.4*t7409*t9540;
  t10643 = -6.8*t9667*t9540;
  t10698 = -20.4*t7409*t7003;
  t10708 = -6.8*t9667*t7003;
  t10829 = -1.*t6820*t6730;
  t14902 = Power(t7409,2);
  t14903 = -13.6*t14902;
  t14904 = -13.6*t7409*t9667;
  t14909 = Power(t9540,2);
  t14916 = -13.6*t14909;
  t14917 = -13.6*t9540*t7003;
  t15054 = t2871*t15037;
  t15055 = t10713 + t15054;
  t14967 = Power(t6412,2);
  t14968 = 0.11*t14967;
  t14969 = Power(t6209,2);
  t14970 = 0.11*t14969;
  t14971 = t14968 + t14970;
  t14972 = -6.8*t7003*t14971;
  t14976 = -1.*t14975*t6827;
  t14980 = -1.*t6730*t14979;
  t14981 = t14976 + t14980;
  t14983 = t14975*t7095;
  t14984 = t6827*t14979;
  t14985 = t14983 + t14984;
  t15066 = -1.*t7032*t6209;
  t15067 = -0.24*t6412*t6538;
  t15068 = t15066 + t15067;
  t15040 = 0.384*var2[4]*t15039;
  t15041 = -3.2*t7072*t10735;
  t15042 = -3.2*t7066*t15039;
  t15047 = -6.4*t10816*t10735;
  t15048 = -3.2*t10824*t7098;
  t15049 = -3.2*t6840*t12225;
  t15050 = -6.4*t10735*t15039;
  t15051 = -1.*t2871*t15037;
  t15052 = t10829 + t15051;
  t15053 = -3.2*t10824*t15052;
  t15056 = -3.2*t6840*t15055;
  t15059 = -6.4*t10824*t10816;
  t15060 = -6.4*t10735*t12225;
  t15061 = -6.4*t10824*t15039;
  t15062 = -6.4*t10735*t15055;
  t15065 = -3.2*t10735*t14981;
  t15070 = t14975*t6827;
  t15071 = t6730*t14979;
  t15075 = -3.2*t14985*t15039;
  t15100 = -0.24*t5981*t6209;
  t15101 = t15100 + t15067;
  t15077 = -1.*t6730*t14975;
  t15103 = 0.24*t6412*t5981;
  t15104 = t15103 + t14978;
  t15079 = -1.*t14979*t15037;
  t7299 = -0.748*t7289;
  t7339 = -0.63*t7194;
  t7340 = -0.24*t7110*t7194;
  t7341 = t7332*t7194;
  t7353 = t7339 + t7340 + t7341;
  t7300 = -0.63*t7110;
  t7333 = t7110*t7332;
  t7335 = Power(t7194,2);
  t7336 = 0.24*t7335;
  t7337 = t7300 + t7333 + t7336;
  t15116 = -1.*t7193*t7110;
  t15117 = t7111*t7194;
  t15118 = t15116 + t15117;
  t15119 = t6820*t15118;
  t15120 = t7217 + t15119;
  t14727 = -20.4*t14642*t14650;
  t14753 = -6.8*t14746*t14650;
  t14754 = -20.4*t14642*t7289;
  t14800 = -6.8*t14746*t7289;
  t14873 = -1.*t6820*t7203;
  t14937 = Power(t14642,2);
  t14938 = -13.6*t14937;
  t14946 = -13.6*t14642*t14746;
  t14947 = Power(t14650,2);
  t14948 = -13.6*t14947;
  t14951 = -13.6*t14650*t7289;
  t15133 = t2871*t15118;
  t15134 = t14802 + t15133;
  t14997 = t14996*t7111;
  t14998 = -0.11*t7193*t7111;
  t14999 = t14997 + t14998;
  t15000 = -6.8*t14642*t14999;
  t15001 = t14996*t7193;
  t15002 = Power(t7111,2);
  t15008 = 0.11*t15002;
  t15009 = t15001 + t15008;
  t15014 = -6.8*t7289*t15009;
  t15020 = -1.*t15018*t7223;
  t15024 = -1.*t7203*t15023;
  t15025 = t15020 + t15024;
  t15027 = t15018*t7362;
  t15028 = t7223*t15023;
  t15029 = t15027 + t15028;
  t15153 = 0.63*t7111;
  t15154 = -1.*t7332*t7111;
  t15155 = -0.24*t7193*t7194;
  t15156 = t15153 + t15154 + t15155;
  t15160 = -0.63*t7193;
  t15161 = t15160 + t15021 + t15022;
  t15121 = 0.384*var2[6]*t15120;
  t15122 = -3.2*t7353*t14803;
  t15123 = -3.2*t7337*t15120;
  t15126 = -6.4*t14840*t14803;
  t15127 = -3.2*t14872*t7367;
  t15128 = -3.2*t7263*t14889;
  t15129 = -6.4*t14803*t15120;
  t15130 = -1.*t2871*t15118;
  t15131 = t14873 + t15130;
  t15132 = -3.2*t14872*t15131;
  t15135 = -3.2*t7263*t15134;
  t15138 = -6.4*t14872*t14840;
  t15139 = -6.4*t14803*t14889;
  t15140 = -6.4*t14872*t15120;
  t15141 = -6.4*t14803*t15134;
  t15152 = -3.2*t14803*t15025;
  t15158 = t15018*t7223;
  t15159 = t7203*t15023;
  t15165 = -3.2*t15029*t15120;
  t15191 = -0.24*t7110*t7111;
  t15192 = t15191 + t15155;
  t15167 = -1.*t7203*t15018;
  t15194 = 0.24*t7193*t7110;
  t15195 = t15194 + t15022;
  t15169 = -1.*t15023*t15118;
  t14929 = Power(t10816,2);
  t14931 = Power(t10735,2);
  t14954 = Power(t14840,2);
  t14956 = Power(t14803,2);
  t15229 = -6.8*t14902;
  t15230 = -6.8*t7409*t9667;
  t15231 = -6.8*t14909;
  t15232 = -6.8*t9540*t7003;
  t15233 = -3.2*t6840*t10824;
  t15234 = -3.2*t14929;
  t15235 = -3.2*t14931;
  t15236 = -3.2*t7098*t12225;
  t15237 = -6.8*t14937;
  t15238 = -6.8*t14642*t14746;
  t15239 = -6.8*t14947;
  t15240 = -6.8*t14650*t7289;
  t15241 = -3.2*t7263*t14872;
  t15242 = -3.2*t14954;
  t15243 = -3.2*t14956;
  t15244 = -3.2*t7367*t14889;
  t15245 = t15229 + t15230 + t15231 + t15232 + t15233 + t15234 + t15235 + t15236 + t15237 + t15238 + t15239 + t15240 + t15241 + t15242 + t15243 + t15244;
  t15247 = 2.88*t2871;
  t15248 = -6.8*t7409*t14971;
  t15249 = -3.2*t10816*t14981;
  t15250 = -3.2*t10735*t14985;
  t15251 = -6.8*t14999*t14650;
  t15252 = -6.8*t14642*t15009;
  t15253 = -3.2*t14840*t15025;
  t15254 = -3.2*t14803*t15029;
  t15255 = t15247 + t15248 + t15249 + t15250 + t15251 + t15252 + t15253 + t15254;
  t15208 = -0.748*t7409;
  t15209 = -3.2*t7072*t10816;
  t15210 = -3.2*t7066*t10735;
  t15211 = t15208 + t15209 + t15210;
  t15214 = -0.748*t14642;
  t15215 = -3.2*t7353*t14840;
  t15216 = -3.2*t7337*t14803;
  t15217 = t15214 + t15215 + t15216;
  t15043 = t7004 + t15041 + t15042;
  t15046 = -0.5*var2[3]*t15043;
  t15057 = t9555 + t10643 + t10698 + t10708 + t15047 + t15048 + t15049 + t15050 + t15053 + t15056;
  t15058 = -0.5*var2[1]*t15057;
  t15063 = t14903 + t14904 + t14916 + t14917 + t15059 + t15060 + t15061 + t15062;
  t15064 = -0.5*var2[0]*t15063;
  t15069 = t15068*t6827;
  t15072 = t7095*t14979;
  t15073 = t15069 + t15070 + t15071 + t15072;
  t15074 = -3.2*t10735*t15073;
  t15076 = -1.*t6730*t15068;
  t15078 = -1.*t6827*t14979;
  t15080 = t15076 + t15077 + t15078 + t15079;
  t15081 = -3.2*t10816*t15080;
  t15082 = t14972 + t15065 + t15074 + t15075 + t15081;
  t15083 = -0.5*var2[2]*t15082;
  t15084 = t15040 + t15046 + t15058 + t15064 + t15083;
  t15085 = var2[0]*t15084;
  t10861 = t2871*t7095;
  t15264 = t10861 + t15038;
  t15221 = -6.4*t10824*t10735;
  t15292 = -1.*t6412*t7032;
  t15293 = 0.24*t6209*t6538;
  t15294 = t15292 + t15293;
  t15265 = 0.384*var2[4]*t15264;
  t15086 = Power(t5981,2);
  t15087 = -0.24*t15086;
  t15088 = t7037 + t15087;
  t15266 = -3.2*t7066*t15264;
  t15267 = -3.2*t7072*t15055;
  t15090 = -1.*t7032*t6538;
  t15091 = 0.24*t5981*t6538;
  t15092 = t15090 + t15091;
  t15270 = -3.2*t12225*t15039;
  t15271 = -3.2*t10735*t15264;
  t15272 = t12087 + t15051;
  t15273 = -3.2*t10824*t15272;
  t15274 = -3.2*t10816*t15055;
  t15275 = -6.4*t15039*t15055;
  t15278 = Power(t10824,2);
  t15279 = -6.4*t15278;
  t15280 = -6.4*t10824*t15264;
  t15281 = -6.4*t12225*t15055;
  t15282 = Power(t15055,2);
  t15283 = -6.4*t15282;
  t15286 = -3.2*t14985*t15264;
  t15287 = -3.2*t14981*t15055;
  t15102 = t15101*t6827;
  t15105 = t7095*t15104;
  t15106 = t15102 + t15070 + t15071 + t15105;
  t15291 = -1.*t7095*t14979;
  t15297 = -1.*t14975*t15037;
  t15108 = -1.*t6730*t15101;
  t15109 = -1.*t6827*t15104;
  t15110 = t15108 + t15077 + t15109 + t15079;
  t15302 = t6730*t14975;
  t15325 = -0.24*t6412*t5981;
  t15326 = t15325 + t15293;
  t15306 = t14979*t15037;
  t15219 = -13.6*t7409*t9540;
  t15220 = -13.6*t9667*t9540;
  t15354 = -3.2*t10824*t10816;
  t15355 = -3.2*t10735*t12225;
  t15356 = -3.2*t10824*t15039;
  t15357 = -3.2*t10735*t15055;
  t15358 = t15229 + t15230 + t15231 + t15232 + t15354 + t15355 + t15356 + t15357;
  t15360 = -3.2*t10824*t14981;
  t15361 = -3.2*t10824*t15073;
  t15362 = -3.2*t14985*t15055;
  t15363 = -3.2*t12225*t15080;
  t15364 = t15248 + t15360 + t15361 + t15362 + t15363;
  t15346 = -3.2*t7072*t10824;
  t15347 = -3.2*t7066*t15055;
  t15348 = t15208 + t15346 + t15347;
  t15089 = -3.2*t15088*t10816;
  t15093 = -3.2*t15092*t10735;
  t15094 = t15089 + t15041 + t15093 + t15042;
  t15095 = -0.5*var2[3]*t15094;
  t15096 = t15047 + t15048 + t15049 + t15050 + t15053 + t15056;
  t15097 = -0.5*var2[1]*t15096;
  t15098 = t15059 + t15060 + t15061 + t15062;
  t15099 = -0.5*var2[0]*t15098;
  t15107 = -3.2*t10735*t15106;
  t15111 = -3.2*t10816*t15110;
  t15112 = t15065 + t15107 + t15075 + t15111;
  t15113 = -0.5*var2[2]*t15112;
  t15114 = t15040 + t15095 + t15097 + t15099 + t15113;
  t15115 = var2[0]*t15114;
  t15313 = -3.2*t15088*t10824;
  t15314 = -3.2*t15092*t15055;
  t15315 = t15313 + t15266 + t15267 + t15314;
  t15316 = -0.5*var2[3]*t15315;
  t15317 = t15221 + t15270 + t15271 + t15273 + t15274 + t15275;
  t15318 = -0.5*var2[1]*t15317;
  t15319 = t15279 + t15280 + t15281 + t15283;
  t15320 = -0.5*var2[0]*t15319;
  t15321 = -3.2*t15073*t15055;
  t15322 = -3.2*t15106*t15055;
  t15323 = -1.*t15101*t6827;
  t15324 = -1.*t6730*t15104;
  t15327 = -1.*t6730*t15326;
  t15328 = -1.*t15068*t15037;
  t15329 = -1.*t15101*t15037;
  t15330 = t15323 + t14980 + t15291 + t15324 + t15327 + t15328 + t15329 + t15297;
  t15331 = -3.2*t12225*t15330;
  t15332 = -3.2*t10824*t15080;
  t15333 = -3.2*t10824*t15110;
  t15334 = t6730*t15068;
  t15335 = t6730*t15101;
  t15336 = t15101*t7095;
  t15337 = t6827*t15104;
  t15338 = t6827*t15326;
  t15339 = t15334 + t15335 + t15302 + t15336 + t14984 + t15337 + t15338 + t15306;
  t15340 = -3.2*t10824*t15339;
  t15341 = t15286 + t15287 + t15321 + t15322 + t15331 + t15332 + t15333 + t15340;
  t15342 = -0.5*var2[2]*t15341;
  t15343 = t15265 + t15316 + t15318 + t15320 + t15342;
  t15344 = var2[0]*t15343;
  t15345 = 0.384*var2[4]*t15055;
  t15350 = -6.4*t10824*t12225;
  t15351 = -6.4*t10824*t15055;
  t15400 = t15354 + t15355 + t15356 + t15357;
  t15402 = -3.2*t10824*t15106;
  t15403 = -3.2*t12225*t15110;
  t15404 = t15360 + t15402 + t15362 + t15403;
  t15394 = -3.2*t15092*t10824;
  t15395 = -3.2*t15088*t12225;
  t15396 = t15346 + t15394 + t15395 + t15347;
  t15370 = 0.384*var2[0]*t15055;
  t15124 = t7299 + t15122 + t15123;
  t15125 = -0.5*var2[5]*t15124;
  t15136 = t14727 + t14753 + t14754 + t14800 + t15126 + t15127 + t15128 + t15129 + t15132 + t15135;
  t15137 = -0.5*var2[1]*t15136;
  t15142 = t14938 + t14946 + t14948 + t14951 + t15138 + t15139 + t15140 + t15141;
  t15143 = -0.5*var2[0]*t15142;
  t15144 = -1.*t14996*t7111;
  t15145 = 0.11*t7193*t7111;
  t15146 = t15144 + t15145;
  t15147 = -6.8*t14642*t15146;
  t15148 = Power(t7193,2);
  t15149 = -0.11*t15148;
  t15150 = t15001 + t15149;
  t15151 = -6.8*t15150*t14650;
  t15157 = t15156*t7223;
  t15162 = t7362*t15161;
  t15163 = t15157 + t15158 + t15159 + t15162;
  t15164 = -3.2*t14803*t15163;
  t15166 = -1.*t7203*t15156;
  t15168 = -1.*t7223*t15161;
  t15170 = t15166 + t15167 + t15168 + t15169;
  t15171 = -3.2*t14840*t15170;
  t15172 = t15000 + t15147 + t15151 + t15014 + t15152 + t15164 + t15165 + t15171;
  t15173 = -0.5*var2[2]*t15172;
  t15174 = t15121 + t15125 + t15137 + t15143 + t15173;
  t15175 = var2[0]*t15174;
  t14886 = t2871*t7362;
  t15410 = t14886 + t15119;
  t15225 = -6.4*t14872*t14803;
  t15445 = 0.63*t7193;
  t15446 = -1.*t7193*t7332;
  t15447 = 0.24*t7111*t7194;
  t15448 = t15445 + t15446 + t15447;
  t15411 = 0.384*var2[6]*t15410;
  t15176 = Power(t7110,2);
  t15177 = -0.24*t15176;
  t15178 = t7300 + t15177 + t7333;
  t15412 = -3.2*t7337*t15410;
  t15180 = 0.63*t7194;
  t15181 = 0.24*t7110*t7194;
  t15182 = -1.*t7332*t7194;
  t15183 = t15180 + t15181 + t15182;
  t15413 = -3.2*t7353*t15134;
  t15416 = -3.2*t14889*t15120;
  t15417 = -3.2*t14803*t15410;
  t15418 = t14888 + t15130;
  t15419 = -3.2*t14872*t15418;
  t15420 = -3.2*t14840*t15134;
  t15421 = -6.4*t15120*t15134;
  t15424 = Power(t14872,2);
  t15425 = -6.4*t15424;
  t15426 = -6.4*t14872*t15410;
  t15427 = -6.4*t14889*t15134;
  t15428 = Power(t15134,2);
  t15429 = -6.4*t15428;
  t15439 = -3.2*t15029*t15410;
  t15440 = -3.2*t15025*t15134;
  t15193 = t15192*t7223;
  t15196 = t7362*t15195;
  t15197 = t15193 + t15158 + t15196 + t15159;
  t15443 = -1.*t7362*t15023;
  t15451 = -1.*t15018*t15118;
  t15199 = -1.*t7203*t15192;
  t15200 = -1.*t7223*t15195;
  t15201 = t15199 + t15167 + t15200 + t15169;
  t15456 = t7203*t15018;
  t15480 = -0.24*t7193*t7110;
  t15481 = t15480 + t15447;
  t15460 = t15023*t15118;
  t15223 = -13.6*t14642*t14650;
  t15224 = -13.6*t14746*t14650;
  t15510 = -3.2*t14872*t14840;
  t15511 = -3.2*t14803*t14889;
  t15512 = -3.2*t14872*t15120;
  t15513 = -3.2*t14803*t15134;
  t15514 = t15237 + t15238 + t15239 + t15240 + t15510 + t15511 + t15512 + t15513;
  t15516 = -6.8*t15150*t14746;
  t15517 = -6.8*t15146*t14650;
  t15518 = -3.2*t14872*t15025;
  t15519 = -3.2*t14872*t15163;
  t15520 = -3.2*t15029*t15134;
  t15521 = -3.2*t14889*t15170;
  t15522 = t15516 + t15251 + t15517 + t15252 + t15518 + t15519 + t15520 + t15521;
  t15502 = -3.2*t7353*t14872;
  t15503 = -3.2*t7337*t15134;
  t15504 = t15214 + t15502 + t15503;
  t15179 = -3.2*t15178*t14840;
  t15184 = -3.2*t15183*t14803;
  t15185 = t15179 + t15184 + t15122 + t15123;
  t15186 = -0.5*var2[5]*t15185;
  t15187 = t15126 + t15127 + t15128 + t15129 + t15132 + t15135;
  t15188 = -0.5*var2[1]*t15187;
  t15189 = t15138 + t15139 + t15140 + t15141;
  t15190 = -0.5*var2[0]*t15189;
  t15198 = -3.2*t14803*t15197;
  t15202 = -3.2*t14840*t15201;
  t15203 = t15152 + t15198 + t15165 + t15202;
  t15204 = -0.5*var2[2]*t15203;
  t15205 = t15121 + t15186 + t15188 + t15190 + t15204;
  t15206 = var2[0]*t15205;
  t15467 = -3.2*t15178*t14872;
  t15468 = -3.2*t15183*t15134;
  t15469 = t15467 + t15412 + t15468 + t15413;
  t15470 = -0.5*var2[5]*t15469;
  t15471 = t15225 + t15416 + t15417 + t15419 + t15420 + t15421;
  t15472 = -0.5*var2[1]*t15471;
  t15473 = t15425 + t15426 + t15427 + t15429;
  t15474 = -0.5*var2[0]*t15473;
  t15475 = -3.2*t15197*t15134;
  t15476 = -3.2*t15163*t15134;
  t15477 = -1.*t15192*t7223;
  t15478 = -1.*t7203*t15195;
  t15479 = -1.*t7203*t15161;
  t15482 = -1.*t7203*t15481;
  t15483 = -1.*t15192*t15118;
  t15484 = -1.*t15156*t15118;
  t15485 = t15477 + t15478 + t15443 + t15479 + t15482 + t15483 + t15484 + t15451;
  t15486 = -3.2*t14889*t15485;
  t15487 = -3.2*t14872*t15201;
  t15488 = -3.2*t14872*t15170;
  t15489 = t7203*t15192;
  t15490 = t7203*t15156;
  t15491 = t15192*t7362;
  t15492 = t7223*t15195;
  t15493 = t7223*t15161;
  t15494 = t7223*t15481;
  t15495 = t15489 + t15490 + t15456 + t15491 + t15492 + t15493 + t15494 + t15460;
  t15496 = -3.2*t14872*t15495;
  t15497 = t15439 + t15440 + t15475 + t15476 + t15486 + t15487 + t15488 + t15496;
  t15498 = -0.5*var2[2]*t15497;
  t15499 = t15411 + t15470 + t15472 + t15474 + t15498;
  t15500 = var2[0]*t15499;
  t15501 = 0.384*var2[6]*t15134;
  t15506 = -6.4*t14872*t14889;
  t15507 = -6.4*t14872*t15134;
  t15559 = t15510 + t15511 + t15512 + t15513;
  t15561 = -3.2*t14872*t15197;
  t15562 = -3.2*t14889*t15201;
  t15563 = t15518 + t15561 + t15520 + t15562;
  t15553 = -3.2*t15183*t14872;
  t15554 = -3.2*t15178*t14889;
  t15555 = t15553 + t15502 + t15554 + t15503;
  t15528 = 0.384*var2[0]*t15134;
  p_output1[0]=var2[0]*(-0.5*(t14903 + t14904 + t14916 + t14917 - 6.4*t14929 - 6.4*t14931 + t14938 + t14946 + t14948 + t14951 - 6.4*t14954 - 6.4*t14956 - 6.4*t10824*t6840 - 6.4*t12225*t7098 - 6.4*t14872*t7263 - 6.4*t14889*t7367)*var2[0] - 0.5*(t10643 + t10698 + t10708 - 3.2*t10824*(t10829 + t10832) + t14727 + t14753 + t14754 + t14800 - 3.2*t14872*(t14873 + t14876) - 3.2*t12225*(t10861 + t6835) - 9.6*t10735*t6840 - 9.6*t10816*t7098 - 3.2*t14889*(t14886 + t7256) - 9.6*t14803*t7263 - 9.6*t14840*t7367 + t9555)*var2[1] - 0.5*(t14972 + t15000 + t15014 + 2.88*t6820 - 3.2*t14985*t6840 - 3.2*t14981*t7098 - 3.2*t15029*t7263 - 3.2*t15025*t7367)*var2[2] - 0.5*(t7004 - 3.2*t6840*t7066 - 3.2*t7072*t7098)*var2[3] + 0.384*t6840*var2[4] - 0.5*(t7299 - 3.2*t7263*t7337 - 3.2*t7353*t7367)*var2[5] + 0.384*t7263*var2[6]);
  p_output1[1]=t15085;
  p_output1[2]=t15115;
  p_output1[3]=t15175;
  p_output1[4]=t15206;
  p_output1[5]=-1.*(-6.4*t10816*t12225 - 6.4*t14840*t14889 + t15219 + t15220 + t15221 + t15223 + t15224 + t15225)*var2[0] - 0.5*t15245*var2[1] - 0.5*t15255*var2[2] - 0.5*t15211*var2[3] + 0.384*t10735*var2[4] - 0.5*t15217*var2[5] + 0.384*t14803*var2[6];
  p_output1[6]=-0.5*t15245*var2[0];
  p_output1[7]=-0.5*t15255*var2[0];
  p_output1[8]=-0.5*t15211*var2[0];
  p_output1[9]=0.384*t10735*var2[0];
  p_output1[10]=-0.5*t15217*var2[0];
  p_output1[11]=0.384*t14803*var2[0];
  p_output1[12]=t15085;
  p_output1[13]=var2[0]*(t15265 - 0.5*(t14903 + t14904 + t14916 + t14917 + t15279 + t15280 + t15281 + t15283)*var2[0] - 0.5*(t10643 + t10698 + t10708 + t15221 + t15270 + t15271 + t15273 + t15274 + t15275 + t9555)*var2[1] - 0.5*(t14972 - 6.4*t15055*t15073 - 6.4*t10824*t15080 + t15286 + t15287 - 3.2*t12225*(-2.*t15037*t15068 + t15291 + t15297 - 2.*t14979*t6730 - 1.*t15294*t6730 - 1.*t15068*t6827) - 3.2*t10824*(t15302 + t15306 + 2.*t15068*t6730 + 2.*t14979*t6827 + t15294*t6827 + t15068*t7095))*var2[2] - 0.5*(t15266 + t15267 + t7004)*var2[3]);
  p_output1[14]=t15344;
  p_output1[15]=t15345 - 1.*(t15219 + t15220 + t15350 + t15351)*var2[0] - 0.5*t15358*var2[1] - 0.5*t15364*var2[2] - 0.5*t15348*var2[3];
  p_output1[16]=-0.5*t15358*var2[0];
  p_output1[17]=-0.5*t15364*var2[0];
  p_output1[18]=-0.5*t15348*var2[0];
  p_output1[19]=t15370;
  p_output1[20]=t15115;
  p_output1[21]=t15344;
  p_output1[22]=var2[0]*(t15265 + t15318 + t15320 - 0.5*(-6.4*t15055*t15106 - 6.4*t10824*t15110 + t15286 + t15287 - 3.2*t12225*(-2.*t15037*t15101 + t15291 + t15297 + t15323 + t15327 - 2.*t15104*t6730) - 3.2*t10824*(t15302 + t15306 + t15336 + t15338 + 2.*t15101*t6730 + 2.*t15104*t6827))*var2[2] - 0.5*(-6.4*t10824*t15088 - 3.2*t12225*t15092 - 6.4*t15055*t15092 + t15266 + t15267 - 3.2*t10824*(0.24*t15086 - 1.*t5981*t7032))*var2[3]);
  p_output1[23]=t15345 - 1.*(t15350 + t15351)*var2[0] - 0.5*t15400*var2[1] - 0.5*t15404*var2[2] - 0.5*t15396*var2[3];
  p_output1[24]=-0.5*t15400*var2[0];
  p_output1[25]=-0.5*t15404*var2[0];
  p_output1[26]=-0.5*t15396*var2[0];
  p_output1[27]=t15370;
  p_output1[28]=t15175;
  p_output1[29]=var2[0]*(t15411 - 0.5*(t14938 + t14946 + t14948 + t14951 + t15425 + t15426 + t15427 + t15429)*var2[0] - 0.5*(t14727 + t14753 + t14754 + t14800 + t15225 + t15416 + t15417 + t15419 + t15420 + t15421)*var2[1] - 0.5*(t15000 + t15014 - 13.6*t14642*t15146 - 6.8*t14746*t15146 - 13.6*t14650*t15150 - 6.4*t15134*t15163 - 6.4*t14872*t15170 + t15439 + t15440 - 6.8*t14650*(0.11*t15148 - 1.*t14996*t7193) - 3.2*t14889*(-2.*t15118*t15156 + t15443 + t15451 - 2.*t15161*t7203 - 1.*t15448*t7203 - 1.*t15156*t7223) - 3.2*t14872*(t15456 + t15460 + 2.*t15156*t7203 + 2.*t15161*t7223 + t15448*t7223 + t15156*t7362))*var2[2] - 0.5*(t15412 + t15413 + t7299)*var2[5]);
  p_output1[30]=t15500;
  p_output1[31]=t15501 - 1.*(t15223 + t15224 + t15506 + t15507)*var2[0] - 0.5*t15514*var2[1] - 0.5*t15522*var2[2] - 0.5*t15504*var2[5];
  p_output1[32]=-0.5*t15514*var2[0];
  p_output1[33]=-0.5*t15522*var2[0];
  p_output1[34]=-0.5*t15504*var2[0];
  p_output1[35]=t15528;
  p_output1[36]=t15206;
  p_output1[37]=t15500;
  p_output1[38]=var2[0]*(t15411 + t15472 + t15474 - 0.5*(-6.4*t15134*t15197 - 6.4*t14872*t15201 + t15439 + t15440 - 3.2*t14889*(-2.*t15118*t15192 + t15443 + t15451 + t15477 + t15482 - 2.*t15195*t7203) - 3.2*t14872*(t15456 + t15460 + t15491 + t15494 + 2.*t15192*t7203 + 2.*t15195*t7223))*var2[2] - 0.5*(-6.4*t14872*t15178 - 3.2*t14889*t15183 - 6.4*t15134*t15183 + t15412 + t15413 - 3.2*t14872*(0.24*t15176 + 0.63*t7110 - 1.*t7110*t7332))*var2[5]);
  p_output1[39]=t15501 - 1.*(t15506 + t15507)*var2[0] - 0.5*t15559*var2[1] - 0.5*t15563*var2[2] - 0.5*t15555*var2[5];
  p_output1[40]=-0.5*t15559*var2[0];
  p_output1[41]=-0.5*t15563*var2[0];
  p_output1[42]=-0.5*t15555*var2[0];
  p_output1[43]=t15528;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace LeftStance
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
