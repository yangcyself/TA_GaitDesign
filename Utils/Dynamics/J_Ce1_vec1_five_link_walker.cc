/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:56:07 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2863;
  double t295;
  double t313;
  double t2865;
  double t294;
  double t3220;
  double t4505;
  double t4538;
  double t4541;
  double t4558;
  double t2862;
  double t2958;
  double t3087;
  double t4576;
  double t4577;
  double t4578;
  double t3194;
  double t4575;
  double t4590;
  double t4593;
  double t4594;
  double t4616;
  double t4622;
  double t4627;
  double t4650;
  double t4651;
  double t4660;
  double t4719;
  double t4724;
  double t4725;
  double t4579;
  double t4580;
  double t4588;
  double t4595;
  double t4596;
  double t4611;
  double t4612;
  double t4615;
  double t4633;
  double t4635;
  double t4636;
  double t4637;
  double t4638;
  double t4644;
  double t4665;
  double t4666;
  double t4672;
  double t4685;
  double t4689;
  double t4704;
  double t4730;
  double t4731;
  double t4732;
  double t4746;
  double t4749;
  double t4811;
  double t4843;
  double t4844;
  double t4850;
  double t4851;
  double t4852;
  double t4873;
  double t4874;
  double t4875;
  double t6504;
  double t6546;
  double t6526;
  double t6553;
  double t6684;
  double t6764;
  double t8668;
  double t8669;
  double t9324;
  double t9517;
  double t9551;
  double t9556;
  double t11946;
  double t9285;
  double t9331;
  double t9632;
  double t9688;
  double t11944;
  double t11951;
  double t11978;
  double t11984;
  double t11992;
  double t6689;
  double t12016;
  double t12020;
  double t12026;
  double t4853;
  double t4855;
  double t4856;
  double t4857;
  double t4858;
  double t4859;
  double t4876;
  double t5883;
  double t5986;
  double t6001;
  double t6031;
  double t6113;
  double t12012;
  double t12013;
  double t12027;
  double t12031;
  double t12032;
  double t12035;
  double t12037;
  double t12038;
  double t4812;
  double t12053;
  double t12054;
  double t12056;
  double t12057;
  double t12058;
  double t12065;
  double t12085;
  double t12100;
  double t4648;
  double t12108;
  double t12112;
  double t12042;
  double t12153;
  double t12155;
  double t12157;
  double t12162;
  double t12163;
  double t12166;
  double t12167;
  double t12170;
  double t12039;
  double t12174;
  double t12175;
  double t12207;
  double t12208;
  double t12215;
  double t12223;
  double t12234;
  double t12237;
  double t12260;
  double t12261;
  double t12228;
  double t12233;
  double t12238;
  double t12241;
  double t12245;
  double t12224;
  double t12209;
  double t12276;
  double t12262;
  double t4833;
  double t4839;
  double t4814;
  double t4820;
  double t12298;
  double t12306;
  double t12307;
  double t12312;
  double t12313;
  double t12314;
  double t12315;
  double t12316;
  double t12317;
  double t12320;
  double t12321;
  double t12322;
  double t12323;
  double t9107;
  double t9144;
  double t11972;
  double t11975;
  double t12372;
  double t12364;
  double t12366;
  double t12367;
  double t12369;
  double t12393;
  double t12394;
  double t12400;
  double t12401;
  double t12405;
  double t12406;
  double t12407;
  double t12408;
  double t12324;
  double t12431;
  double t12432;
  double t12436;
  double t12437;
  double t12438;
  double t12439;
  double t12318;
  double t12443;
  double t12444;
  double t12417;
  double t12459;
  double t12460;
  double t12461;
  double t12462;
  double t12463;
  double t12469;
  double t12412;
  double t12470;
  double t12471;
  double t12484;
  double t12485;
  double t12486;
  double t12487;
  double t12490;
  double t12491;
  double t12492;
  double t12498;
  double t4825;
  double t4828;
  double t9706;
  double t11968;
  double t12505;
  double t12506;
  double t12507;
  double t12508;
  double t12515;
  double t12516;
  double t12517;
  double t12518;
  double t12501;
  double t12502;
  double t12503;
  double t12504;
  double t12509;
  double t12510;
  double t12511;
  double t12512;
  double t12513;
  double t12499;
  double t12488;
  double t12533;
  double t12519;
  double t12547;
  double t12548;
  double t12549;
  double t12550;
  double t12551;
  double t12552;
  double t12553;
  double t12556;
  double t12558;
  double t12559;
  double t12562;
  double t12566;
  double t12567;
  double t12568;
  double t12557;
  double t12563;
  double t12564;
  double t12565;
  double t12570;
  double t12571;
  double t12575;
  double t12576;
  double t12577;
  double t12578;
  double t12589;
  double t12590;
  double t12580;
  double t12592;
  double t12595;
  double t12582;
  double t12541;
  double t12542;
  double t12543;
  double t12544;
  double t12545;
  double t12546;
  double t12608;
  double t12609;
  double t12610;
  double t12611;
  double t12612;
  double t12623;
  double t12624;
  double t12625;
  double t12626;
  double t12627;
  double t12622;
  double t12628;
  double t12629;
  double t12630;
  double t12632;
  double t12633;
  double t12634;
  double t12631;
  double t12635;
  double t12636;
  double t12638;
  double t12639;
  double t12640;
  double t12645;
  double t12646;
  double t12647;
  double t12650;
  double t12651;
  double t12613;
  double t12614;
  double t12615;
  double t12616;
  double t12617;
  double t12618;
  double t12619;
  double t12620;
  double t12621;
  double t12644;
  double t12649;
  double t12653;
  double t12656;
  double t12673;
  double t12674;
  double t12675;
  double t12658;
  double t12677;
  double t12678;
  double t12660;
  double t12569;
  double t12572;
  double t12573;
  double t12574;
  double t12579;
  double t12581;
  double t12583;
  double t12584;
  double t12585;
  double t12697;
  double t12698;
  double t12699;
  double t12691;
  double t12692;
  double t12591;
  double t12596;
  double t12597;
  double t12696;
  double t12702;
  double t12599;
  double t12600;
  double t12601;
  double t12707;
  double t12720;
  double t12721;
  double t12711;
  double t12598;
  double t12602;
  double t12603;
  double t12716;
  double t12717;
  double t12718;
  double t12719;
  double t12722;
  double t12723;
  double t12724;
  double t12725;
  double t12726;
  double t12727;
  double t12728;
  double t12729;
  double t12730;
  double t12731;
  double t12732;
  double t12733;
  double t12734;
  double t12735;
  double t12736;
  double t12665;
  double t12666;
  double t12667;
  double t12668;
  double t12669;
  double t12670;
  double t12671;
  double t12672;
  double t12676;
  double t12679;
  double t12680;
  double t12681;
  double t12682;
  double t12683;
  double t12684;
  double t12685;
  double t12686;
  double t12648;
  double t12652;
  double t12654;
  double t12657;
  double t12659;
  double t12661;
  double t12765;
  double t12766;
  double t12767;
  double t12757;
  double t12758;
  double t12763;
  double t12771;
  double t12778;
  double t12798;
  double t12799;
  double t12800;
  double t12783;
  double t12655;
  double t12662;
  double t12663;
  double t12761;
  double t12768;
  double t12779;
  double t12782;
  double t12759;
  double t12760;
  double t12762;
  double t12764;
  double t12769;
  double t12770;
  double t12772;
  double t12773;
  double t12774;
  double t12775;
  double t12776;
  double t12777;
  double t12780;
  double t12781;
  double t12784;
  double t12785;
  double t12786;
  double t12833;
  double t12835;
  double t12832;
  double t12846;
  double t12847;
  double t12852;
  double t12854;
  double t12843;
  double t12844;
  double t12845;
  double t12848;
  double t12849;
  double t12850;
  double t12834;
  double t12836;
  double t12837;
  double t12839;
  double t12840;
  double t12841;
  double t12858;
  double t12859;
  double t12860;
  double t12861;
  double t12862;
  double t12853;
  double t12855;
  double t12856;
  double t12870;
  double t12876;
  double t12877;
  double t12878;
  double t12871;
  double t12872;
  double t12873;
  double t12874;
  double t12882;
  double t12883;
  double t12884;
  double t12886;
  double t12887;
  double t12888;
  double t12899;
  double t12900;
  double t12890;
  double t12891;
  double t12892;
  double t12889;
  double t12893;
  double t12894;
  double t12903;
  double t12904;
  double t12905;
  double t12922;
  double t12927;
  double t12928;
  double t12923;
  double t12924;
  double t12925;
  double t12929;
  double t12931;
  double t12932;
  double t12933;
  double t12944;
  double t12945;
  double t12946;
  double t12947;
  double t12948;
  double t12954;
  double t12955;
  double t12962;
  double t12963;
  double t12964;
  double t12965;
  double t12956;
  double t12957;
  double t12958;
  double t12959;
  double t12960;
  double t12969;
  double t12970;
  double t12971;
  double t12973;
  double t12974;
  double t12975;
  double t12987;
  double t12977;
  double t12978;
  double t12979;
  double t12980;
  double t12988;
  double t12976;
  double t12981;
  double t12982;
  double t12991;
  double t12992;
  double t12993;
  double t13011;
  double t13016;
  double t13017;
  double t13012;
  double t13013;
  double t13014;
  double t13018;
  double t13020;
  double t13021;
  double t13022;
  double t13033;
  double t13034;
  double t13035;
  double t13036;
  double t13037;
  double t13043;
  t2863 = Cos(var1[3]);
  t295 = Cos(var1[4]);
  t313 = Sin(var1[3]);
  t2865 = Sin(var1[4]);
  t294 = Sin(var1[2]);
  t3220 = Cos(var1[2]);
  t4505 = t2863*t295;
  t4538 = -1.*t313*t2865;
  t4541 = t4505 + t4538;
  t4558 = t3220*t4541;
  t2862 = -1.*t295*t313;
  t2958 = -1.*t2863*t2865;
  t3087 = t2862 + t2958;
  t4576 = t295*t313;
  t4577 = t2863*t2865;
  t4578 = t4576 + t4577;
  t3194 = t294*t3087;
  t4575 = t3194 + t4558;
  t4590 = t3220*t3087;
  t4593 = -1.*t294*t4541;
  t4594 = t4590 + t4593;
  t4616 = -1.*t2863*t295;
  t4622 = t313*t2865;
  t4627 = t4616 + t4622;
  t4650 = -1.*t2863*t294;
  t4651 = -1.*t3220*t313;
  t4660 = t4650 + t4651;
  t4719 = t3220*t2863;
  t4724 = -1.*t294*t313;
  t4725 = t4719 + t4724;
  t4579 = -1.*t294*t4578;
  t4580 = t4579 + t4558;
  t4588 = 6.4*t4575*t4580;
  t4595 = t3220*t4578;
  t4596 = t294*t4541;
  t4611 = t4595 + t4596;
  t4612 = 6.4*t4594*t4611;
  t4615 = -1.*t294*t3087;
  t4633 = t3220*t4627;
  t4635 = t4615 + t4633;
  t4636 = 6.4*t4575*t4635;
  t4637 = t294*t4627;
  t4638 = t4590 + t4637;
  t4644 = 6.4*t4594*t4638;
  t4665 = Power(t4660,2);
  t4666 = 13.6*t4665;
  t4672 = t2863*t294;
  t4685 = t3220*t313;
  t4689 = t4672 + t4685;
  t4704 = 13.6*t4660*t4689;
  t4730 = Power(t4725,2);
  t4731 = 13.6*t4730;
  t4732 = -1.*t3220*t2863;
  t4746 = t294*t313;
  t4749 = t4732 + t4746;
  t4811 = 13.6*t4725*t4749;
  t4843 = Cos(var1[5]);
  t4844 = -1.*t4843*t294;
  t4850 = Sin(var1[5]);
  t4851 = -1.*t3220*t4850;
  t4852 = t4844 + t4851;
  t4873 = t3220*t4843;
  t4874 = -1.*t294*t4850;
  t4875 = t4873 + t4874;
  t6504 = Cos(var1[6]);
  t6546 = Sin(var1[6]);
  t6526 = -1.*t6504*t4850;
  t6553 = -1.*t4843*t6546;
  t6684 = t6526 + t6553;
  t6764 = t4843*t6504;
  t8668 = -1.*t4850*t6546;
  t8669 = t6764 + t8668;
  t9324 = t3220*t8669;
  t9517 = t6504*t4850;
  t9551 = t4843*t6546;
  t9556 = t9517 + t9551;
  t11946 = -1.*t294*t8669;
  t9285 = t294*t6684;
  t9331 = t9285 + t9324;
  t9632 = -1.*t294*t9556;
  t9688 = t9632 + t9324;
  t11944 = t3220*t6684;
  t11951 = t11944 + t11946;
  t11978 = t3220*t9556;
  t11984 = t294*t8669;
  t11992 = t11978 + t11984;
  t6689 = -1.*t294*t6684;
  t12016 = -1.*t4843*t6504;
  t12020 = t4850*t6546;
  t12026 = t12016 + t12020;
  t4853 = Power(t4852,2);
  t4855 = 13.6*t4853;
  t4856 = t4843*t294;
  t4857 = t3220*t4850;
  t4858 = t4856 + t4857;
  t4859 = 13.6*t4852*t4858;
  t4876 = Power(t4875,2);
  t5883 = 13.6*t4876;
  t5986 = -1.*t3220*t4843;
  t6001 = t294*t4850;
  t6031 = t5986 + t6001;
  t6113 = 13.6*t4875*t6031;
  t12012 = 6.4*t9331*t9688;
  t12013 = 6.4*t11951*t11992;
  t12027 = t3220*t12026;
  t12031 = t6689 + t12027;
  t12032 = 6.4*t9331*t12031;
  t12035 = t294*t12026;
  t12037 = t11944 + t12035;
  t12038 = 6.4*t11951*t12037;
  t4812 = t4666 + t4704 + t4731 + t4811 + t4588 + t4612 + t4636 + t4644;
  t12053 = Power(t4575,2);
  t12054 = 6.4*t12053;
  t12056 = t294*t4578;
  t12057 = t12056 + t4633;
  t12058 = 6.4*t4575*t12057;
  t12065 = 6.4*t4611*t4638;
  t12085 = Power(t4638,2);
  t12100 = 6.4*t12085;
  t4648 = t4588 + t4612 + t4636 + t4644;
  t12108 = t12054 + t12058 + t12065 + t12100;
  t12112 = -0.5*var2[4]*t12108;
  t12042 = t4855 + t4859 + t5883 + t6113 + t12012 + t12013 + t12032 + t12038;
  t12153 = Power(t9331,2);
  t12155 = 6.4*t12153;
  t12157 = t294*t9556;
  t12162 = t12157 + t12027;
  t12163 = 6.4*t9331*t12162;
  t12166 = 6.4*t11992*t12037;
  t12167 = Power(t12037,2);
  t12170 = 6.4*t12167;
  t12039 = t12012 + t12013 + t12032 + t12038;
  t12174 = t12155 + t12163 + t12166 + t12170;
  t12175 = -0.5*var2[6]*t12174;
  t12207 = 6.4*t4575*t4611;
  t12208 = 6.4*t4575*t4638;
  t12215 = 13.6*t4660*t4725;
  t12223 = 13.6*t4689*t4725;
  t12234 = 13.6*t4852*t4875;
  t12237 = 13.6*t4858*t4875;
  t12260 = 6.4*t9331*t11992;
  t12261 = 6.4*t9331*t12037;
  t12228 = 6.4*t4575*t4594;
  t12233 = 6.4*t4580*t4611;
  t12238 = 6.4*t9331*t11951;
  t12241 = 6.4*t9688*t11992;
  t12245 = t12215 + t12223 + t12228 + t12233 + t12234 + t12237 + t12238 + t12241;
  t12224 = t12215 + t12223 + t12207 + t12208;
  t12209 = t12207 + t12208;
  t12276 = t12234 + t12237 + t12260 + t12261;
  t12262 = t12260 + t12261;
  t4833 = -1.*t3220*t4578;
  t4839 = t4833 + t4593;
  t4814 = -1.*t3220*t4541;
  t4820 = t4615 + t4814;
  t12298 = 6.4*t4580*t4594;
  t12306 = 3.2*t4575*t4839;
  t12307 = 3.2*t4820*t4611;
  t12312 = 6.4*t4594*t4635;
  t12313 = -1.*t3220*t3087;
  t12314 = -1.*t294*t4627;
  t12315 = t12313 + t12314;
  t12316 = 3.2*t4575*t12315;
  t12317 = 3.2*t4820*t4638;
  t12320 = 20.4*t4660*t4725;
  t12321 = 6.8*t4689*t4725;
  t12322 = 20.4*t4660*t4749;
  t12323 = 6.8*t4689*t4749;
  t9107 = -1.*t3220*t8669;
  t9144 = t6689 + t9107;
  t11972 = -1.*t3220*t9556;
  t11975 = t11972 + t11946;
  t12372 = -1.*t3220*t6684;
  t12364 = 20.4*t4852*t4875;
  t12366 = 6.8*t4858*t4875;
  t12367 = 20.4*t4852*t6031;
  t12369 = 6.8*t4858*t6031;
  t12393 = 6.4*t9688*t11951;
  t12394 = 3.2*t9331*t11975;
  t12400 = 3.2*t9144*t11992;
  t12401 = 6.4*t11951*t12031;
  t12405 = -1.*t294*t12026;
  t12406 = t12372 + t12405;
  t12407 = 3.2*t9331*t12406;
  t12408 = 3.2*t9144*t12037;
  t12324 = t12320 + t12321 + t12322 + t12323 + t12298 + t12306 + t12307 + t12312 + t12316 + t12317;
  t12431 = 3.2*t4611*t4635;
  t12432 = 3.2*t4594*t12057;
  t12436 = t4595 + t12314;
  t12437 = 3.2*t4575*t12436;
  t12438 = 3.2*t4580*t4638;
  t12439 = 6.4*t4635*t4638;
  t12318 = t12298 + t12306 + t12307 + t12312 + t12316 + t12317;
  t12443 = t12228 + t12431 + t12432 + t12437 + t12438 + t12439;
  t12444 = -0.5*var2[4]*t12443;
  t12417 = t12364 + t12366 + t12367 + t12369 + t12393 + t12394 + t12400 + t12401 + t12407 + t12408;
  t12459 = 3.2*t11992*t12031;
  t12460 = 3.2*t11951*t12162;
  t12461 = t11978 + t12405;
  t12462 = 3.2*t9331*t12461;
  t12463 = 3.2*t9688*t12037;
  t12469 = 6.4*t12031*t12037;
  t12412 = t12393 + t12394 + t12400 + t12401 + t12407 + t12408;
  t12470 = t12238 + t12459 + t12460 + t12462 + t12463 + t12469;
  t12471 = -0.5*var2[6]*t12470;
  t12484 = 3.2*t4575*t4580;
  t12485 = 3.2*t4594*t4611;
  t12486 = 3.2*t4575*t4635;
  t12487 = 3.2*t4594*t4638;
  t12490 = 6.8*t4665;
  t12491 = 6.8*t4660*t4689;
  t12492 = 6.8*t4730;
  t12498 = 6.8*t4725*t4749;
  t4825 = Power(t4580,2);
  t4828 = Power(t4594,2);
  t9706 = Power(t9688,2);
  t11968 = Power(t11951,2);
  t12505 = 6.8*t4853;
  t12506 = 6.8*t4852*t4858;
  t12507 = 6.8*t4876;
  t12508 = 6.8*t4875*t6031;
  t12515 = 3.2*t9331*t9688;
  t12516 = 3.2*t11951*t11992;
  t12517 = 3.2*t9331*t12031;
  t12518 = 3.2*t11951*t12037;
  t12501 = 3.2*t4820*t4575;
  t12502 = 3.2*t4825;
  t12503 = 3.2*t4828;
  t12504 = 3.2*t4839*t4611;
  t12509 = 3.2*t9144*t9331;
  t12510 = 3.2*t9706;
  t12511 = 3.2*t11968;
  t12512 = 3.2*t11975*t11992;
  t12513 = t12490 + t12491 + t12492 + t12498 + t12501 + t12502 + t12503 + t12504 + t12505 + t12506 + t12507 + t12508 + t12509 + t12510 + t12511 + t12512;
  t12499 = t12490 + t12491 + t12492 + t12498 + t12484 + t12485 + t12486 + t12487;
  t12488 = t12484 + t12485 + t12486 + t12487;
  t12533 = t12505 + t12506 + t12507 + t12508 + t12515 + t12516 + t12517 + t12518;
  t12519 = t12515 + t12516 + t12517 + t12518;
  t12547 = -1.*t295;
  t12548 = 1. + t12547;
  t12549 = 0.4*t12548;
  t12550 = 0.64*t295;
  t12551 = t12549 + t12550;
  t12552 = t12551*t313;
  t12553 = 0.24*t2863*t2865;
  t12556 = t12552 + t12553;
  t12558 = t2863*t12551;
  t12559 = -0.24*t313*t2865;
  t12562 = t12558 + t12559;
  t12566 = -1.*t12551*t313;
  t12567 = -0.24*t2863*t2865;
  t12568 = t12566 + t12567;
  t12557 = -1.*t12556*t4541;
  t12563 = -1.*t3087*t12562;
  t12564 = t12557 + t12563;
  t12565 = 3.2*t4594*t12564;
  t12570 = t12556*t4541;
  t12571 = t3087*t12562;
  t12575 = t12556*t4578;
  t12576 = t4541*t12562;
  t12577 = t12575 + t12576;
  t12578 = 3.2*t12577*t4635;
  t12589 = -0.24*t295*t313;
  t12590 = t12589 + t12567;
  t12580 = -1.*t3087*t12556;
  t12592 = 0.24*t2863*t295;
  t12595 = t12592 + t12559;
  t12582 = -1.*t12562*t4627;
  t12541 = Power(t2863,2);
  t12542 = 0.11*t12541;
  t12543 = Power(t313,2);
  t12544 = 0.11*t12543;
  t12545 = t12542 + t12544;
  t12546 = 6.8*t4749*t12545;
  t12608 = -1.*t4843;
  t12609 = 1. + t12608;
  t12610 = 0.63*t12609;
  t12611 = 0.74*t4843;
  t12612 = t12610 + t12611;
  t12623 = -1.*t6504;
  t12624 = 1. + t12623;
  t12625 = 1.03*t12624;
  t12626 = 1.27*t6504;
  t12627 = t12625 + t12626;
  t12622 = -0.63*t4850;
  t12628 = t12627*t4850;
  t12629 = 0.24*t4843*t6546;
  t12630 = t12622 + t12628 + t12629;
  t12632 = t4843*t12627;
  t12633 = -0.24*t4850*t6546;
  t12634 = t12610 + t12632 + t12633;
  t12631 = -1.*t12630*t8669;
  t12635 = -1.*t6684*t12634;
  t12636 = t12631 + t12635;
  t12638 = t12630*t9556;
  t12639 = t8669*t12634;
  t12640 = t12638 + t12639;
  t12645 = -0.24*t6504*t4850;
  t12646 = -0.24*t4843*t6546;
  t12647 = t12645 + t12646;
  t12650 = 0.24*t4843*t6504;
  t12651 = t12650 + t12633;
  t12613 = t12612*t4850;
  t12614 = -0.11*t4843*t4850;
  t12615 = t12613 + t12614;
  t12616 = 6.8*t4852*t12615;
  t12617 = t12612*t4843;
  t12618 = Power(t4850,2);
  t12619 = 0.11*t12618;
  t12620 = t12617 + t12619;
  t12621 = 6.8*t6031*t12620;
  t12644 = 3.2*t11951*t12636;
  t12649 = t12630*t8669;
  t12653 = t6684*t12634;
  t12656 = 3.2*t12640*t12031;
  t12673 = 0.63*t4850;
  t12674 = -1.*t12627*t4850;
  t12675 = t12673 + t12674 + t12646;
  t12658 = -1.*t6684*t12630;
  t12677 = -0.63*t4843;
  t12678 = t12677 + t12632 + t12633;
  t12660 = -1.*t12634*t12026;
  t12569 = t12568*t4541;
  t12572 = t4578*t12562;
  t12573 = t12569 + t12570 + t12571 + t12572;
  t12574 = 3.2*t4594*t12573;
  t12579 = -1.*t3087*t12568;
  t12581 = -1.*t4541*t12562;
  t12583 = t12579 + t12580 + t12581 + t12582;
  t12584 = 3.2*t4580*t12583;
  t12585 = t12546 + t12565 + t12574 + t12578 + t12584;
  t12697 = -1.*t2863*t12551;
  t12698 = 0.24*t313*t2865;
  t12699 = t12697 + t12698;
  t12691 = 3.2*t12577*t12057;
  t12692 = 3.2*t12564*t4638;
  t12591 = t12590*t4541;
  t12596 = t4578*t12595;
  t12597 = t12591 + t12570 + t12571 + t12596;
  t12696 = -1.*t4578*t12562;
  t12702 = -1.*t12556*t4627;
  t12599 = -1.*t3087*t12590;
  t12600 = -1.*t4541*t12595;
  t12601 = t12599 + t12580 + t12600 + t12582;
  t12707 = t3087*t12556;
  t12720 = -0.24*t2863*t295;
  t12721 = t12720 + t12698;
  t12711 = t12562*t4627;
  t12598 = 3.2*t4594*t12597;
  t12602 = 3.2*t4580*t12601;
  t12603 = t12565 + t12598 + t12578 + t12602;
  t12716 = 3.2*t12573*t4638;
  t12717 = 3.2*t12597*t4638;
  t12718 = -1.*t12590*t4541;
  t12719 = -1.*t3087*t12595;
  t12722 = -1.*t3087*t12721;
  t12723 = -1.*t12568*t4627;
  t12724 = -1.*t12590*t4627;
  t12725 = t12718 + t12563 + t12696 + t12719 + t12722 + t12723 + t12724 + t12702;
  t12726 = 3.2*t4611*t12725;
  t12727 = 3.2*t4575*t12583;
  t12728 = 3.2*t4575*t12601;
  t12729 = t3087*t12568;
  t12730 = t3087*t12590;
  t12731 = t12590*t4578;
  t12732 = t4541*t12595;
  t12733 = t4541*t12721;
  t12734 = t12729 + t12730 + t12707 + t12731 + t12576 + t12732 + t12733 + t12711;
  t12735 = 3.2*t4575*t12734;
  t12736 = t12691 + t12692 + t12716 + t12717 + t12726 + t12727 + t12728 + t12735;
  t12665 = -1.*t12612*t4850;
  t12666 = 0.11*t4843*t4850;
  t12667 = t12665 + t12666;
  t12668 = 6.8*t4852*t12667;
  t12669 = Power(t4843,2);
  t12670 = -0.11*t12669;
  t12671 = t12617 + t12670;
  t12672 = 6.8*t12671*t4875;
  t12676 = t12675*t8669;
  t12679 = t9556*t12678;
  t12680 = t12676 + t12649 + t12653 + t12679;
  t12681 = 3.2*t11951*t12680;
  t12682 = -1.*t6684*t12675;
  t12683 = -1.*t8669*t12678;
  t12684 = t12682 + t12658 + t12683 + t12660;
  t12685 = 3.2*t9688*t12684;
  t12686 = t12616 + t12668 + t12672 + t12621 + t12644 + t12681 + t12656 + t12685;
  t12648 = t12647*t8669;
  t12652 = t9556*t12651;
  t12654 = t12648 + t12649 + t12652 + t12653;
  t12657 = -1.*t6684*t12647;
  t12659 = -1.*t8669*t12651;
  t12661 = t12657 + t12658 + t12659 + t12660;
  t12765 = -0.24*t4843*t6504;
  t12766 = 0.24*t4850*t6546;
  t12767 = t12765 + t12766;
  t12757 = 3.2*t12640*t12162;
  t12758 = 3.2*t12636*t12037;
  t12763 = -1.*t9556*t12634;
  t12771 = -1.*t12630*t12026;
  t12778 = t6684*t12630;
  t12798 = 0.63*t4843;
  t12799 = -1.*t4843*t12627;
  t12800 = t12798 + t12799 + t12766;
  t12783 = t12634*t12026;
  t12655 = 3.2*t11951*t12654;
  t12662 = 3.2*t9688*t12661;
  t12663 = t12644 + t12655 + t12656 + t12662;
  t12761 = -1.*t12647*t8669;
  t12768 = -1.*t6684*t12767;
  t12779 = t12647*t9556;
  t12782 = t8669*t12767;
  t12759 = 3.2*t12654*t12037;
  t12760 = 3.2*t12680*t12037;
  t12762 = -1.*t6684*t12651;
  t12764 = -1.*t6684*t12678;
  t12769 = -1.*t12647*t12026;
  t12770 = -1.*t12675*t12026;
  t12772 = t12761 + t12762 + t12763 + t12764 + t12768 + t12769 + t12770 + t12771;
  t12773 = 3.2*t11992*t12772;
  t12774 = 3.2*t9331*t12661;
  t12775 = 3.2*t9331*t12684;
  t12776 = t6684*t12647;
  t12777 = t6684*t12675;
  t12780 = t8669*t12651;
  t12781 = t8669*t12678;
  t12784 = t12776 + t12777 + t12778 + t12779 + t12780 + t12781 + t12782 + t12783;
  t12785 = 3.2*t9331*t12784;
  t12786 = t12757 + t12758 + t12759 + t12760 + t12773 + t12774 + t12775 + t12785;
  t12833 = 3.2*t4575*t12564;
  t12835 = 3.2*t12577*t4638;
  t12832 = 6.8*t4660*t12545;
  t12846 = 6.8*t12615*t4875;
  t12847 = 6.8*t4852*t12620;
  t12852 = 3.2*t9331*t12636;
  t12854 = 3.2*t12640*t12037;
  t12843 = -2.88*t294;
  t12844 = 3.2*t4580*t12564;
  t12845 = 3.2*t4594*t12577;
  t12848 = 3.2*t9688*t12636;
  t12849 = 3.2*t11951*t12640;
  t12850 = t12843 + t12832 + t12844 + t12845 + t12846 + t12847 + t12848 + t12849;
  t12834 = 3.2*t4575*t12573;
  t12836 = 3.2*t4611*t12583;
  t12837 = t12832 + t12833 + t12834 + t12835 + t12836;
  t12839 = 3.2*t4575*t12597;
  t12840 = 3.2*t4611*t12601;
  t12841 = t12833 + t12839 + t12835 + t12840;
  t12858 = 6.8*t12671*t4858;
  t12859 = 6.8*t12667*t4875;
  t12860 = 3.2*t9331*t12680;
  t12861 = 3.2*t11992*t12684;
  t12862 = t12858 + t12846 + t12859 + t12847 + t12852 + t12860 + t12854 + t12861;
  t12853 = 3.2*t9331*t12654;
  t12855 = 3.2*t11992*t12661;
  t12856 = t12852 + t12853 + t12854 + t12855;
  t12870 = 0.748*t4749;
  t12876 = t12551*t2865;
  t12877 = -0.24*t295*t2865;
  t12878 = t12876 + t12877;
  t12871 = t12551*t295;
  t12872 = Power(t2865,2);
  t12873 = 0.24*t12872;
  t12874 = t12871 + t12873;
  t12882 = 3.2*t12878*t4594;
  t12883 = 3.2*t12874*t4635;
  t12884 = t12870 + t12882 + t12883;
  t12886 = Power(t295,2);
  t12887 = -0.24*t12886;
  t12888 = t12871 + t12887;
  t12899 = 3.2*t12874*t12057;
  t12900 = 3.2*t12878*t4638;
  t12890 = -1.*t12551*t2865;
  t12891 = 0.24*t295*t2865;
  t12892 = t12890 + t12891;
  t12889 = 3.2*t12888*t4580;
  t12893 = 3.2*t12892*t4594;
  t12894 = t12889 + t12882 + t12893 + t12883;
  t12903 = 3.2*t12888*t4575;
  t12904 = 3.2*t12892*t4638;
  t12905 = t12903 + t12899 + t12900 + t12904;
  t12922 = 0.748*t4660;
  t12927 = 3.2*t12878*t4575;
  t12928 = 3.2*t12874*t4638;
  t12923 = 3.2*t12878*t4580;
  t12924 = 3.2*t12874*t4594;
  t12925 = t12922 + t12923 + t12924;
  t12929 = t12922 + t12927 + t12928;
  t12931 = 3.2*t12892*t4575;
  t12932 = 3.2*t12888*t4611;
  t12933 = t12927 + t12931 + t12932 + t12928;
  t12944 = -0.384*var2[2]*t4635;
  t12945 = -0.384*var2[3]*t12057;
  t12946 = -0.384*var2[4]*t12057;
  t12947 = t12944 + t12945 + t12946;
  t12948 = var2[0]*t12947;
  t12954 = -0.384*var2[0]*t4638;
  t12955 = 0.748*t6031;
  t12962 = -0.63*t6546;
  t12963 = -0.24*t6504*t6546;
  t12964 = t12627*t6546;
  t12965 = t12962 + t12963 + t12964;
  t12956 = -0.63*t6504;
  t12957 = t6504*t12627;
  t12958 = Power(t6546,2);
  t12959 = 0.24*t12958;
  t12960 = t12956 + t12957 + t12959;
  t12969 = 3.2*t12965*t11951;
  t12970 = 3.2*t12960*t12031;
  t12971 = t12955 + t12969 + t12970;
  t12973 = Power(t6504,2);
  t12974 = -0.24*t12973;
  t12975 = t12956 + t12974 + t12957;
  t12987 = 3.2*t12960*t12162;
  t12977 = 0.63*t6546;
  t12978 = 0.24*t6504*t6546;
  t12979 = -1.*t12627*t6546;
  t12980 = t12977 + t12978 + t12979;
  t12988 = 3.2*t12965*t12037;
  t12976 = 3.2*t12975*t9688;
  t12981 = 3.2*t12980*t11951;
  t12982 = t12976 + t12981 + t12969 + t12970;
  t12991 = 3.2*t12975*t9331;
  t12992 = 3.2*t12980*t12037;
  t12993 = t12991 + t12987 + t12992 + t12988;
  t13011 = 0.748*t4852;
  t13016 = 3.2*t12965*t9331;
  t13017 = 3.2*t12960*t12037;
  t13012 = 3.2*t12965*t9688;
  t13013 = 3.2*t12960*t11951;
  t13014 = t13011 + t13012 + t13013;
  t13018 = t13011 + t13016 + t13017;
  t13020 = 3.2*t12980*t9331;
  t13021 = 3.2*t12975*t11992;
  t13022 = t13020 + t13016 + t13021 + t13017;
  t13033 = -0.384*var2[2]*t12031;
  t13034 = -0.384*var2[5]*t12162;
  t13035 = -0.384*var2[6]*t12162;
  t13036 = t13033 + t13034 + t13035;
  t13037 = var2[0]*t13036;
  t13043 = -0.384*var2[0]*t12037;
  p_output1[0]=var2[0]*(-0.5*(6.4*t11968 + 6.4*t11975*t11992 + t4666 + t4704 + t4731 + t4811 + 6.4*t4575*t4820 + 6.4*t4825 + 6.4*t4828 + 6.4*t4611*t4839 + t4855 + t4859 + t5883 + t6113 + 6.4*t9144*t9331 + 6.4*t9706)*var2[2] - 0.5*t4812*var2[3] - 0.5*t4648*var2[4] - 0.5*t12042*var2[5] - 0.5*t12039*var2[6]);
  p_output1[1]=var2[0]*(t12112 - 0.5*t4812*var2[2] - 0.5*(t12054 + t12058 + t12065 + t12100 + t4666 + t4704 + t4731 + t4811)*var2[3]);
  p_output1[2]=var2[0]*(t12112 - 0.5*t4648*var2[2] - 0.5*t12108*var2[3]);
  p_output1[3]=var2[0]*(t12175 - 0.5*t12042*var2[2] - 0.5*(t12155 + t12163 + t12166 + t12170 + t4855 + t4859 + t5883 + t6113)*var2[5]);
  p_output1[4]=var2[0]*(t12175 - 0.5*t12039*var2[2] - 0.5*t12174*var2[5]);
  p_output1[5]=-0.5*t12245*var2[2] - 0.5*t12224*var2[3] - 0.5*t12209*var2[4] - 0.5*t12276*var2[5] - 0.5*t12262*var2[6];
  p_output1[6]=-0.5*t12245*var2[0];
  p_output1[7]=-0.5*t12224*var2[0];
  p_output1[8]=-0.5*t12209*var2[0];
  p_output1[9]=-0.5*t12276*var2[0];
  p_output1[10]=-0.5*t12262*var2[0];
  p_output1[11]=var2[0]*(-0.5*(t12320 + t12321 + t12322 + t12323 + t12364 + t12366 + t12367 + t12369 + 3.2*t4575*(t12313 + t4596) + 3.2*t4611*(t12056 + t4814) + 9.6*t4594*t4820 + 9.6*t4580*t4839 + 3.2*t11992*(t12157 + t9107) + 9.6*t11951*t9144 + 3.2*(t11984 + t12372)*t9331 + 9.6*t11975*t9688)*var2[2] - 0.5*t12324*var2[3] - 0.5*t12318*var2[4] - 0.5*t12417*var2[5] - 0.5*t12412*var2[6]);
  p_output1[12]=var2[0]*(t12444 - 0.5*t12324*var2[2] - 0.5*(t12228 + t12320 + t12321 + t12322 + t12323 + t12431 + t12432 + t12437 + t12438 + t12439)*var2[3]);
  p_output1[13]=var2[0]*(t12444 - 0.5*t12318*var2[2] - 0.5*t12443*var2[3]);
  p_output1[14]=var2[0]*(t12471 - 0.5*t12417*var2[2] - 0.5*(t12238 + t12364 + t12366 + t12367 + t12369 + t12459 + t12460 + t12462 + t12463 + t12469)*var2[5]);
  p_output1[15]=var2[0]*(t12471 - 0.5*t12412*var2[2] - 0.5*t12470*var2[5]);
  p_output1[16]=-0.5*t12513*var2[2] - 0.5*t12499*var2[3] - 0.5*t12488*var2[4] - 0.5*t12533*var2[5] - 0.5*t12519*var2[6];
  p_output1[17]=-0.5*t12513*var2[0];
  p_output1[18]=-0.5*t12499*var2[0];
  p_output1[19]=-0.5*t12488*var2[0];
  p_output1[20]=-0.5*t12533*var2[0];
  p_output1[21]=-0.5*t12519*var2[0];
  p_output1[22]=var2[0]*(-0.5*(t12546 + t12616 + t12621 + 3.2*t11975*t12636 - 2.88*t3220 + 3.2*t12577*t4820 + 3.2*t12564*t4839 + 3.2*t12640*t9144)*var2[2] - 0.5*t12585*var2[3] - 0.5*t12603*var2[4] - 0.5*t12686*var2[5] - 0.5*t12663*var2[6]);
  p_output1[23]=var2[0]*(-0.5*t12585*var2[2] - 0.5*(t12546 + t12691 + t12692 + 6.4*t12583*t4575 + 3.2*t4575*(t12707 + t12711 + 2.*t12568*t3087 + 2.*t12562*t4541 + t12699*t4541 + t12568*t4578) + 3.2*t4611*(t12696 + t12702 - 2.*t12562*t3087 - 1.*t12699*t3087 - 1.*t12568*t4541 - 2.*t12568*t4627) + 6.4*t12573*t4638)*var2[3] - 0.5*t12736*var2[4]);
  p_output1[24]=var2[0]*(-0.5*t12603*var2[2] - 0.5*t12736*var2[3] - 0.5*(t12691 + t12692 + 6.4*t12601*t4575 + 3.2*(t12707 + t12711 + t12731 + t12733 + 2.*t12590*t3087 + 2.*t12595*t4541)*t4575 + 3.2*t4611*(t12696 + t12702 + t12718 + t12722 - 2.*t12595*t3087 - 2.*t12590*t4627) + 6.4*t12597*t4638)*var2[4]);
  p_output1[25]=var2[0]*(-0.5*t12686*var2[2] - 0.5*(t12616 + t12621 + 6.4*t12037*t12680 + t12757 + t12758 + 13.6*t12667*t4852 + 6.8*t12667*t4858 + 13.6*t12671*t4875 + 6.8*(0.11*t12669 - 1.*t12612*t4843)*t4875 + 3.2*t11992*(-2.*t12026*t12675 + t12763 + t12771 - 2.*t12678*t6684 - 1.*t12800*t6684 - 1.*t12675*t8669) + 6.4*t12684*t9331 + 3.2*t9331*(t12778 + t12783 + 2.*t12675*t6684 + 2.*t12678*t8669 + t12800*t8669 + t12675*t9556))*var2[5] - 0.5*t12786*var2[6]);
  p_output1[26]=var2[0]*(-0.5*t12663*var2[2] - 0.5*t12786*var2[5] - 0.5*(6.4*t12037*t12654 + t12757 + t12758 + 3.2*t11992*(-2.*t12026*t12647 + t12761 + t12763 + t12768 + t12771 - 2.*t12651*t6684) + 6.4*t12661*t9331 + 3.2*(t12778 + t12779 + t12782 + t12783 + 2.*t12647*t6684 + 2.*t12651*t8669)*t9331)*var2[6]);
  p_output1[27]=-0.5*t12850*var2[2] - 0.5*t12837*var2[3] - 0.5*t12841*var2[4] - 0.5*t12862*var2[5] - 0.5*t12856*var2[6];
  p_output1[28]=-0.5*t12850*var2[0];
  p_output1[29]=-0.5*t12837*var2[0];
  p_output1[30]=-0.5*t12841*var2[0];
  p_output1[31]=-0.5*t12862*var2[0];
  p_output1[32]=-0.5*t12856*var2[0];
  p_output1[33]=var2[0]*(-0.5*(t12870 + 3.2*t12874*t4820 + 3.2*t12878*t4839)*var2[2] - 0.5*t12884*var2[3] - 0.5*t12894*var2[4]);
  p_output1[34]=var2[0]*(-0.5*t12884*var2[2] - 0.5*(t12870 + t12899 + t12900)*var2[3] - 0.5*t12905*var2[4]);
  p_output1[35]=var2[0]*(-0.5*t12894*var2[2] - 0.5*t12905*var2[3] - 0.5*(t12899 + t12900 + 6.4*t12888*t4575 + 3.2*(0.24*t12886 - 1.*t12551*t295)*t4575 + 3.2*t12892*t4611 + 6.4*t12892*t4638)*var2[4]);
  p_output1[36]=-0.5*t12925*var2[2] - 0.5*t12929*var2[3] - 0.5*t12933*var2[4];
  p_output1[37]=-0.5*t12925*var2[0];
  p_output1[38]=-0.5*t12929*var2[0];
  p_output1[39]=-0.5*t12933*var2[0];
  p_output1[40]=var2[0]*(-0.384*t4820*var2[2] - 0.384*t4635*var2[3] - 0.384*t4635*var2[4]);
  p_output1[41]=t12948;
  p_output1[42]=t12948;
  p_output1[43]=-0.384*t4594*var2[2] - 0.384*t4638*var2[3] - 0.384*t4638*var2[4];
  p_output1[44]=-0.384*t4594*var2[0];
  p_output1[45]=t12954;
  p_output1[46]=t12954;
  p_output1[47]=var2[0]*(-0.5*(t12955 + 3.2*t11975*t12965 + 3.2*t12960*t9144)*var2[2] - 0.5*t12971*var2[5] - 0.5*t12982*var2[6]);
  p_output1[48]=var2[0]*(-0.5*t12971*var2[2] - 0.5*(t12955 + t12987 + t12988)*var2[5] - 0.5*t12993*var2[6]);
  p_output1[49]=var2[0]*(-0.5*t12982*var2[2] - 0.5*t12993*var2[5] - 0.5*(3.2*t11992*t12980 + 6.4*t12037*t12980 + t12987 + t12988 + 6.4*t12975*t9331 + 3.2*(0.24*t12973 + 0.63*t6504 - 1.*t12627*t6504)*t9331)*var2[6]);
  p_output1[50]=-0.5*t13014*var2[2] - 0.5*t13018*var2[5] - 0.5*t13022*var2[6];
  p_output1[51]=-0.5*t13014*var2[0];
  p_output1[52]=-0.5*t13018*var2[0];
  p_output1[53]=-0.5*t13022*var2[0];
  p_output1[54]=var2[0]*(-0.384*t9144*var2[2] - 0.384*t12031*var2[5] - 0.384*t12031*var2[6]);
  p_output1[55]=t13037;
  p_output1[56]=t13037;
  p_output1[57]=-0.384*t11951*var2[2] - 0.384*t12037*var2[5] - 0.384*t12037*var2[6];
  p_output1[58]=-0.384*t11951*var2[0];
  p_output1[59]=t13043;
  p_output1[60]=t13043;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec1_five_link_walker.hh"

namespace LeftStance
{

void J_Ce1_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
