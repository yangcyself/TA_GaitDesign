/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:56:11 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2113;
  double t1832;
  double t1833;
  double t2694;
  double t4363;
  double t166;
  double t4467;
  double t4528;
  double t4584;
  double t4747;
  double t4748;
  double t4813;
  double t4646;
  double t1933;
  double t2822;
  double t2852;
  double t4826;
  double t4824;
  double t4832;
  double t6417;
  double t4854;
  double t5605;
  double t6748;
  double t8396;
  double t8411;
  double t6542;
  double t6549;
  double t8572;
  double t8574;
  double t8575;
  double t8558;
  double t8563;
  double t8564;
  double t8579;
  double t8580;
  double t8583;
  double t8604;
  double t8605;
  double t8610;
  double t2954;
  double t4649;
  double t4842;
  double t5991;
  double t6079;
  double t6101;
  double t6628;
  double t6664;
  double t6665;
  double t6727;
  double t8459;
  double t8460;
  double t8466;
  double t8474;
  double t8478;
  double t8482;
  double t8487;
  double t8488;
  double t8493;
  double t8503;
  double t8578;
  double t8584;
  double t8612;
  double t8615;
  double t8637;
  double t8656;
  double t8661;
  double t8887;
  double t8888;
  double t8638;
  double t8657;
  double t8660;
  double t8890;
  double t8903;
  double t8904;
  double t8921;
  double t8922;
  double t8924;
  double t8945;
  double t8949;
  double t8946;
  double t8953;
  double t8955;
  double t8958;
  double t8964;
  double t8965;
  double t8993;
  double t8994;
  double t8995;
  double t8986;
  double t8997;
  double t8966;
  double t9020;
  double t8996;
  double t9004;
  double t8985;
  double t8987;
  double t9008;
  double t9012;
  double t9005;
  double t9006;
  double t8956;
  double t8980;
  double t9049;
  double t9051;
  double t9019;
  double t9063;
  double t9064;
  double t9066;
  double t8889;
  double t8920;
  double t8927;
  double t8928;
  double t9059;
  double t9061;
  double t9062;
  double t9072;
  double t9073;
  double t9074;
  double t9075;
  double t9076;
  double t9077;
  double t9078;
  double t9152;
  double t9155;
  double t8617;
  double t8634;
  double t9586;
  double t9640;
  double t9671;
  double t9707;
  double t9722;
  double t9731;
  double t9824;
  double t9873;
  double t8504;
  double t9951;
  double t9957;
  double t9231;
  double t9047;
  double t12052;
  double t12118;
  double t12119;
  double t12127;
  double t12131;
  double t12137;
  double t12141;
  double t12147;
  double t9164;
  double t12148;
  double t12152;
  double t12212;
  double t12226;
  double t12246;
  double t12265;
  double t12289;
  double t12290;
  double t12291;
  double t12292;
  double t12295;
  double t12319;
  double t12371;
  double t12373;
  double t12383;
  double t12384;
  double t12388;
  double t12389;
  double t12449;
  double t12450;
  double t12451;
  double t12455;
  double t12346;
  double t12351;
  double t12353;
  double t12358;
  double t12359;
  double t12370;
  double t12392;
  double t12413;
  double t12418;
  double t12421;
  double t12422;
  double t12423;
  double t12445;
  double t12333;
  double t12277;
  double t12458;
  double t12456;
  double t12483;
  double t12489;
  double t12500;
  double t12514;
  double t12535;
  double t12536;
  double t12537;
  double t12538;
  double t12539;
  double t8635;
  double t8632;
  double t9048;
  double t9022;
  double t12642;
  double t12643;
  double t12664;
  double t12687;
  double t12688;
  double t12704;
  double t12705;
  double t12706;
  double t12708;
  double t12540;
  double t12738;
  double t12739;
  double t12740;
  double t12741;
  double t12742;
  double t12520;
  double t12743;
  double t12744;
  double t12712;
  double t12754;
  double t12755;
  double t12756;
  double t12787;
  double t12788;
  double t12709;
  double t12789;
  double t12790;
  double t12804;
  double t12805;
  double t12810;
  double t12811;
  double t12808;
  double t12809;
  double t12812;
  double t12813;
  double t12814;
  double t12806;
  double t12802;
  double t12818;
  double t12816;
  double t12838;
  double t12842;
  double t12851;
  double t12857;
  double t12863;
  double t12864;
  double t12865;
  double t12866;
  double t12868;
  double t12869;
  double t12875;
  double t12885;
  double t12895;
  double t12896;
  double t12867;
  double t12879;
  double t12880;
  double t12881;
  double t12898;
  double t12901;
  double t12908;
  double t12909;
  double t12910;
  double t12911;
  double t12920;
  double t12921;
  double t12913;
  double t12930;
  double t12934;
  double t12915;
  double t12826;
  double t12827;
  double t12828;
  double t12829;
  double t12830;
  double t12831;
  double t12952;
  double t12953;
  double t12961;
  double t12966;
  double t12967;
  double t12996;
  double t12997;
  double t12998;
  double t12999;
  double t13000;
  double t12995;
  double t13001;
  double t13002;
  double t13003;
  double t13005;
  double t13006;
  double t13007;
  double t13004;
  double t13008;
  double t13009;
  double t13015;
  double t13019;
  double t13023;
  double t13028;
  double t13029;
  double t13030;
  double t13038;
  double t13039;
  double t12985;
  double t12968;
  double t12972;
  double t12983;
  double t12984;
  double t12986;
  double t12989;
  double t12990;
  double t12994;
  double t13027;
  double t13032;
  double t13041;
  double t13045;
  double t13062;
  double t13063;
  double t13064;
  double t13047;
  double t13066;
  double t13067;
  double t13049;
  double t12897;
  double t12902;
  double t12906;
  double t12907;
  double t12912;
  double t12914;
  double t12916;
  double t12917;
  double t12918;
  double t13086;
  double t13087;
  double t13088;
  double t13080;
  double t12926;
  double t12935;
  double t12936;
  double t13082;
  double t13085;
  double t13091;
  double t12938;
  double t12939;
  double t12940;
  double t13096;
  double t13109;
  double t13110;
  double t13100;
  double t12937;
  double t12941;
  double t12942;
  double t13105;
  double t13106;
  double t13107;
  double t13108;
  double t13111;
  double t13112;
  double t13113;
  double t13114;
  double t13115;
  double t13116;
  double t13117;
  double t13118;
  double t13119;
  double t13120;
  double t13121;
  double t13122;
  double t13123;
  double t13124;
  double t13125;
  double t13054;
  double t13055;
  double t13056;
  double t13057;
  double t13058;
  double t13059;
  double t13060;
  double t13061;
  double t13065;
  double t13068;
  double t13069;
  double t13070;
  double t13071;
  double t13072;
  double t13073;
  double t13074;
  double t13075;
  double t13031;
  double t13040;
  double t13042;
  double t13046;
  double t13048;
  double t13050;
  double t13154;
  double t13155;
  double t13156;
  double t13146;
  double t13149;
  double t13152;
  double t13160;
  double t13167;
  double t13187;
  double t13188;
  double t13189;
  double t13172;
  double t13044;
  double t13051;
  double t13052;
  double t13150;
  double t13157;
  double t13168;
  double t13171;
  double t13147;
  double t13148;
  double t13151;
  double t13153;
  double t13158;
  double t13159;
  double t13161;
  double t13162;
  double t13163;
  double t13164;
  double t13165;
  double t13166;
  double t13169;
  double t13170;
  double t13173;
  double t13174;
  double t13175;
  double t13222;
  double t13224;
  double t13221;
  double t13235;
  double t13236;
  double t13241;
  double t13243;
  double t13232;
  double t13233;
  double t13234;
  double t13237;
  double t13238;
  double t13239;
  double t13223;
  double t13225;
  double t13226;
  double t13228;
  double t13229;
  double t13230;
  double t13247;
  double t13248;
  double t13249;
  double t13250;
  double t13251;
  double t13242;
  double t13244;
  double t13245;
  double t13259;
  double t13260;
  double t13261;
  double t13262;
  double t13264;
  double t13265;
  double t13266;
  double t13267;
  double t13271;
  double t13272;
  double t13273;
  double t13279;
  double t13280;
  double t13281;
  double t13288;
  double t13275;
  double t13276;
  double t13277;
  double t13289;
  double t13278;
  double t13282;
  double t13283;
  double t13292;
  double t13293;
  double t13294;
  double t13311;
  double t13316;
  double t13317;
  double t13312;
  double t13313;
  double t13314;
  double t13318;
  double t13320;
  double t13321;
  double t13322;
  double t13333;
  double t13334;
  double t13335;
  double t13336;
  double t13337;
  double t13343;
  double t13344;
  double t13345;
  double t13346;
  double t13347;
  double t13348;
  double t13350;
  double t13351;
  double t13352;
  double t13353;
  double t13354;
  double t13358;
  double t13359;
  double t13360;
  double t13367;
  double t13368;
  double t13369;
  double t13362;
  double t13363;
  double t13364;
  double t13365;
  double t13376;
  double t13377;
  double t13366;
  double t13370;
  double t13371;
  double t13380;
  double t13381;
  double t13382;
  double t13400;
  double t13405;
  double t13406;
  double t13401;
  double t13402;
  double t13403;
  double t13407;
  double t13409;
  double t13410;
  double t13411;
  double t13422;
  double t13423;
  double t13424;
  double t13425;
  double t13426;
  double t13432;
  t2113 = Cos(var1[3]);
  t1832 = Cos(var1[4]);
  t1833 = Sin(var1[3]);
  t2694 = Sin(var1[4]);
  t4363 = Cos(var1[2]);
  t166 = Sin(var1[2]);
  t4467 = t2113*t1832;
  t4528 = -1.*t1833*t2694;
  t4584 = t4467 + t4528;
  t4747 = -1.*t1832*t1833;
  t4748 = -1.*t2113*t2694;
  t4813 = t4747 + t4748;
  t4646 = t4363*t4584;
  t1933 = t1832*t1833;
  t2822 = t2113*t2694;
  t2852 = t1933 + t2822;
  t4826 = -1.*t166*t4584;
  t4824 = t4363*t4813;
  t4832 = t4824 + t4826;
  t6417 = -1.*t166*t4813;
  t4854 = t166*t4813;
  t5605 = t4854 + t4646;
  t6748 = -1.*t2113*t1832;
  t8396 = t1833*t2694;
  t8411 = t6748 + t8396;
  t6542 = -1.*t4363*t4584;
  t6549 = t6417 + t6542;
  t8572 = t4363*t2113;
  t8574 = -1.*t166*t1833;
  t8575 = t8572 + t8574;
  t8558 = -1.*t2113*t166;
  t8563 = -1.*t4363*t1833;
  t8564 = t8558 + t8563;
  t8579 = t2113*t166;
  t8580 = t4363*t1833;
  t8583 = t8579 + t8580;
  t8604 = -1.*t4363*t2113;
  t8605 = t166*t1833;
  t8610 = t8604 + t8605;
  t2954 = -1.*t166*t2852;
  t4649 = t2954 + t4646;
  t4842 = 6.4*t4649*t4832;
  t5991 = -1.*t4363*t2852;
  t6079 = t5991 + t4826;
  t6101 = 3.2*t5605*t6079;
  t6628 = t4363*t2852;
  t6664 = t166*t4584;
  t6665 = t6628 + t6664;
  t6727 = 3.2*t6549*t6665;
  t8459 = t4363*t8411;
  t8460 = t6417 + t8459;
  t8466 = 6.4*t4832*t8460;
  t8474 = -1.*t4363*t4813;
  t8478 = -1.*t166*t8411;
  t8482 = t8474 + t8478;
  t8487 = 3.2*t5605*t8482;
  t8488 = t166*t8411;
  t8493 = t4824 + t8488;
  t8503 = 3.2*t6549*t8493;
  t8578 = 20.4*t8564*t8575;
  t8584 = 6.8*t8583*t8575;
  t8612 = 20.4*t8564*t8610;
  t8615 = 6.8*t8583*t8610;
  t8637 = Cos(var1[5]);
  t8656 = Sin(var1[5]);
  t8661 = t4363*t8637;
  t8887 = -1.*t166*t8656;
  t8888 = t8661 + t8887;
  t8638 = -1.*t8637*t166;
  t8657 = -1.*t4363*t8656;
  t8660 = t8638 + t8657;
  t8890 = t8637*t166;
  t8903 = t4363*t8656;
  t8904 = t8890 + t8903;
  t8921 = -1.*t4363*t8637;
  t8922 = t166*t8656;
  t8924 = t8921 + t8922;
  t8945 = Cos(var1[6]);
  t8949 = Sin(var1[6]);
  t8946 = -1.*t8945*t8656;
  t8953 = -1.*t8637*t8949;
  t8955 = t8946 + t8953;
  t8958 = t8637*t8945;
  t8964 = -1.*t8656*t8949;
  t8965 = t8958 + t8964;
  t8993 = t8945*t8656;
  t8994 = t8637*t8949;
  t8995 = t8993 + t8994;
  t8986 = -1.*t166*t8965;
  t8997 = t4363*t8965;
  t8966 = -1.*t4363*t8965;
  t9020 = t166*t8965;
  t8996 = -1.*t166*t8995;
  t9004 = t8996 + t8997;
  t8985 = t4363*t8955;
  t8987 = t8985 + t8986;
  t9008 = t166*t8955;
  t9012 = t9008 + t8997;
  t9005 = -1.*t4363*t8995;
  t9006 = t9005 + t8986;
  t8956 = -1.*t166*t8955;
  t8980 = t8956 + t8966;
  t9049 = t4363*t8995;
  t9051 = t9049 + t9020;
  t9019 = -1.*t4363*t8955;
  t9063 = -1.*t8637*t8945;
  t9064 = t8656*t8949;
  t9066 = t9063 + t9064;
  t8889 = 20.4*t8660*t8888;
  t8920 = 6.8*t8904*t8888;
  t8927 = 20.4*t8660*t8924;
  t8928 = 6.8*t8904*t8924;
  t9059 = 6.4*t9004*t8987;
  t9061 = 3.2*t9012*t9006;
  t9062 = 3.2*t8980*t9051;
  t9072 = t4363*t9066;
  t9073 = t8956 + t9072;
  t9074 = 6.4*t8987*t9073;
  t9075 = -1.*t166*t9066;
  t9076 = t9019 + t9075;
  t9077 = 3.2*t9012*t9076;
  t9078 = t166*t9066;
  t9152 = t8985 + t9078;
  t9155 = 3.2*t8980*t9152;
  t8617 = t8578 + t8584 + t8612 + t8615 + t4842 + t6101 + t6727 + t8466 + t8487 + t8503;
  t8634 = t166*t2852;
  t9586 = 6.4*t5605*t4832;
  t9640 = 3.2*t6665*t8460;
  t9671 = t8634 + t8459;
  t9707 = 3.2*t4832*t9671;
  t9722 = t6628 + t8478;
  t9731 = 3.2*t5605*t9722;
  t9824 = 3.2*t4649*t8493;
  t9873 = 6.4*t8460*t8493;
  t8504 = t4842 + t6101 + t6727 + t8466 + t8487 + t8503;
  t9951 = t9586 + t9640 + t9707 + t9731 + t9824 + t9873;
  t9957 = -0.5*var2[4]*t9951;
  t9231 = t8889 + t8920 + t8927 + t8928 + t9059 + t9061 + t9062 + t9074 + t9077 + t9155;
  t9047 = t166*t8995;
  t12052 = 6.4*t9012*t8987;
  t12118 = 3.2*t9051*t9073;
  t12119 = t9047 + t9072;
  t12127 = 3.2*t8987*t12119;
  t12131 = t9049 + t9075;
  t12137 = 3.2*t9012*t12131;
  t12141 = 3.2*t9004*t9152;
  t12147 = 6.4*t9073*t9152;
  t9164 = t9059 + t9061 + t9062 + t9074 + t9077 + t9155;
  t12148 = t12052 + t12118 + t12127 + t12137 + t12141 + t12147;
  t12152 = -0.5*var2[6]*t12148;
  t12212 = 3.2*t5605*t4649;
  t12226 = 3.2*t4832*t6665;
  t12246 = 3.2*t5605*t8460;
  t12265 = 3.2*t4832*t8493;
  t12289 = Power(t8564,2);
  t12290 = 6.8*t12289;
  t12291 = 6.8*t8564*t8583;
  t12292 = Power(t8575,2);
  t12295 = 6.8*t12292;
  t12319 = 6.8*t8575*t8610;
  t12371 = Power(t8660,2);
  t12373 = 6.8*t12371;
  t12383 = 6.8*t8660*t8904;
  t12384 = Power(t8888,2);
  t12388 = 6.8*t12384;
  t12389 = 6.8*t8888*t8924;
  t12449 = 3.2*t9012*t9004;
  t12450 = 3.2*t8987*t9051;
  t12451 = 3.2*t9012*t9073;
  t12455 = 3.2*t8987*t9152;
  t12346 = 3.2*t6549*t5605;
  t12351 = Power(t4649,2);
  t12353 = 3.2*t12351;
  t12358 = Power(t4832,2);
  t12359 = 3.2*t12358;
  t12370 = 3.2*t6079*t6665;
  t12392 = 3.2*t8980*t9012;
  t12413 = Power(t9004,2);
  t12418 = 3.2*t12413;
  t12421 = Power(t8987,2);
  t12422 = 3.2*t12421;
  t12423 = 3.2*t9006*t9051;
  t12445 = t12290 + t12291 + t12295 + t12319 + t12346 + t12353 + t12359 + t12370 + t12373 + t12383 + t12388 + t12389 + t12392 + t12418 + t12422 + t12423;
  t12333 = t12290 + t12291 + t12295 + t12319 + t12212 + t12226 + t12246 + t12265;
  t12277 = t12212 + t12226 + t12246 + t12265;
  t12458 = t12373 + t12383 + t12388 + t12389 + t12449 + t12450 + t12451 + t12455;
  t12456 = t12449 + t12450 + t12451 + t12455;
  t12483 = 6.4*t6549*t4649;
  t12489 = 6.4*t4832*t6079;
  t12500 = 6.4*t6549*t8460;
  t12514 = 6.4*t4832*t8482;
  t12535 = 13.6*t12289;
  t12536 = 13.6*t8564*t8583;
  t12537 = 13.6*t8575*t8610;
  t12538 = Power(t8610,2);
  t12539 = 13.6*t12538;
  t8635 = t8634 + t6542;
  t8632 = t8474 + t6664;
  t9048 = t9047 + t8966;
  t9022 = t9019 + t9020;
  t12642 = 13.6*t12371;
  t12643 = 13.6*t8660*t8904;
  t12664 = 13.6*t8888*t8924;
  t12687 = Power(t8924,2);
  t12688 = 13.6*t12687;
  t12704 = 6.4*t8980*t9004;
  t12705 = 6.4*t8987*t9006;
  t12706 = 6.4*t8980*t9073;
  t12708 = 6.4*t8987*t9076;
  t12540 = t12535 + t12536 + t12537 + t12539 + t12483 + t12489 + t12500 + t12514;
  t12738 = 6.4*t12358;
  t12739 = 6.4*t4649*t8460;
  t12740 = Power(t8460,2);
  t12741 = 6.4*t12740;
  t12742 = 6.4*t4832*t9722;
  t12520 = t12483 + t12489 + t12500 + t12514;
  t12743 = t12738 + t12739 + t12741 + t12742;
  t12744 = -0.5*var2[4]*t12743;
  t12712 = t12642 + t12643 + t12664 + t12688 + t12704 + t12705 + t12706 + t12708;
  t12754 = 6.4*t12421;
  t12755 = 6.4*t9004*t9073;
  t12756 = Power(t9073,2);
  t12787 = 6.4*t12756;
  t12788 = 6.4*t8987*t12131;
  t12709 = t12704 + t12705 + t12706 + t12708;
  t12789 = t12754 + t12755 + t12787 + t12788;
  t12790 = -0.5*var2[6]*t12789;
  t12804 = 13.6*t8564*t8575;
  t12805 = 13.6*t8564*t8610;
  t12810 = 13.6*t8660*t8888;
  t12811 = 13.6*t8660*t8924;
  t12808 = 6.4*t6549*t4832;
  t12809 = 6.4*t4649*t6079;
  t12812 = 6.4*t8980*t8987;
  t12813 = 6.4*t9004*t9006;
  t12814 = t12804 + t12805 + t12808 + t12809 + t12810 + t12811 + t12812 + t12813;
  t12806 = t12804 + t12805 + t4842 + t8466;
  t12802 = t4842 + t8466;
  t12818 = t12810 + t12811 + t9059 + t9074;
  t12816 = t9059 + t9074;
  t12838 = -1.*t1832;
  t12842 = 1. + t12838;
  t12851 = 0.4*t12842;
  t12857 = 0.64*t1832;
  t12863 = t12851 + t12857;
  t12864 = t12863*t1833;
  t12865 = 0.24*t2113*t2694;
  t12866 = t12864 + t12865;
  t12868 = t2113*t12863;
  t12869 = -0.24*t1833*t2694;
  t12875 = t12868 + t12869;
  t12885 = -1.*t12863*t1833;
  t12895 = -0.24*t2113*t2694;
  t12896 = t12885 + t12895;
  t12867 = -1.*t12866*t4584;
  t12879 = -1.*t4813*t12875;
  t12880 = t12867 + t12879;
  t12881 = 3.2*t6549*t12880;
  t12898 = t12866*t4584;
  t12901 = t4813*t12875;
  t12908 = t12866*t2852;
  t12909 = t4584*t12875;
  t12910 = t12908 + t12909;
  t12911 = 3.2*t12910*t8482;
  t12920 = -0.24*t1832*t1833;
  t12921 = t12920 + t12895;
  t12913 = -1.*t4813*t12866;
  t12930 = 0.24*t2113*t1832;
  t12934 = t12930 + t12869;
  t12915 = -1.*t12875*t8411;
  t12826 = Power(t2113,2);
  t12827 = 0.11*t12826;
  t12828 = Power(t1833,2);
  t12829 = 0.11*t12828;
  t12830 = t12827 + t12829;
  t12831 = 6.8*t8583*t12830;
  t12952 = -1.*t8637;
  t12953 = 1. + t12952;
  t12961 = 0.63*t12953;
  t12966 = 0.74*t8637;
  t12967 = t12961 + t12966;
  t12996 = -1.*t8945;
  t12997 = 1. + t12996;
  t12998 = 1.03*t12997;
  t12999 = 1.27*t8945;
  t13000 = t12998 + t12999;
  t12995 = -0.63*t8656;
  t13001 = t13000*t8656;
  t13002 = 0.24*t8637*t8949;
  t13003 = t12995 + t13001 + t13002;
  t13005 = t8637*t13000;
  t13006 = -0.24*t8656*t8949;
  t13007 = t12961 + t13005 + t13006;
  t13004 = -1.*t13003*t8965;
  t13008 = -1.*t8955*t13007;
  t13009 = t13004 + t13008;
  t13015 = t13003*t8995;
  t13019 = t8965*t13007;
  t13023 = t13015 + t13019;
  t13028 = -0.24*t8945*t8656;
  t13029 = -0.24*t8637*t8949;
  t13030 = t13028 + t13029;
  t13038 = 0.24*t8637*t8945;
  t13039 = t13038 + t13006;
  t12985 = t12967*t8637;
  t12968 = t12967*t8656;
  t12972 = -0.11*t8637*t8656;
  t12983 = t12968 + t12972;
  t12984 = 6.8*t12983*t8924;
  t12986 = Power(t8656,2);
  t12989 = 0.11*t12986;
  t12990 = t12985 + t12989;
  t12994 = 6.8*t8904*t12990;
  t13027 = 3.2*t8980*t13009;
  t13032 = t13003*t8965;
  t13041 = t8955*t13007;
  t13045 = 3.2*t13023*t9076;
  t13062 = 0.63*t8656;
  t13063 = -1.*t13000*t8656;
  t13064 = t13062 + t13063 + t13029;
  t13047 = -1.*t8955*t13003;
  t13066 = -0.63*t8637;
  t13067 = t13066 + t13005 + t13006;
  t13049 = -1.*t13007*t9066;
  t12897 = t12896*t4584;
  t12902 = t2852*t12875;
  t12906 = t12897 + t12898 + t12901 + t12902;
  t12907 = 3.2*t6549*t12906;
  t12912 = -1.*t4813*t12896;
  t12914 = -1.*t4584*t12875;
  t12916 = t12912 + t12913 + t12914 + t12915;
  t12917 = 3.2*t6079*t12916;
  t12918 = t12831 + t12881 + t12907 + t12911 + t12917;
  t13086 = -1.*t2113*t12863;
  t13087 = 0.24*t1833*t2694;
  t13088 = t13086 + t13087;
  t13080 = 3.2*t12880*t8460;
  t12926 = t12921*t4584;
  t12935 = t2852*t12934;
  t12936 = t12926 + t12898 + t12901 + t12935;
  t13082 = 3.2*t12910*t9722;
  t13085 = -1.*t2852*t12875;
  t13091 = -1.*t12866*t8411;
  t12938 = -1.*t4813*t12921;
  t12939 = -1.*t4584*t12934;
  t12940 = t12938 + t12913 + t12939 + t12915;
  t13096 = t4813*t12866;
  t13109 = -0.24*t2113*t1832;
  t13110 = t13109 + t13087;
  t13100 = t12875*t8411;
  t12937 = 3.2*t6549*t12936;
  t12941 = 3.2*t6079*t12940;
  t12942 = t12881 + t12937 + t12911 + t12941;
  t13105 = 3.2*t12906*t8460;
  t13106 = 3.2*t12936*t8460;
  t13107 = -1.*t12921*t4584;
  t13108 = -1.*t4813*t12934;
  t13111 = -1.*t4813*t13110;
  t13112 = -1.*t12896*t8411;
  t13113 = -1.*t12921*t8411;
  t13114 = t13107 + t12879 + t13085 + t13108 + t13111 + t13112 + t13113 + t13091;
  t13115 = 3.2*t4649*t13114;
  t13116 = 3.2*t4832*t12916;
  t13117 = 3.2*t4832*t12940;
  t13118 = t4813*t12896;
  t13119 = t4813*t12921;
  t13120 = t12921*t2852;
  t13121 = t4584*t12934;
  t13122 = t4584*t13110;
  t13123 = t13118 + t13119 + t13096 + t13120 + t12909 + t13121 + t13122 + t13100;
  t13124 = 3.2*t4832*t13123;
  t13125 = t13080 + t13105 + t13106 + t13082 + t13115 + t13116 + t13117 + t13124;
  t13054 = Power(t8637,2);
  t13055 = -0.11*t13054;
  t13056 = t12985 + t13055;
  t13057 = 6.8*t13056*t8660;
  t13058 = -1.*t12967*t8656;
  t13059 = 0.11*t8637*t8656;
  t13060 = t13058 + t13059;
  t13061 = 6.8*t13060*t8924;
  t13065 = t13064*t8965;
  t13068 = t8995*t13067;
  t13069 = t13065 + t13032 + t13041 + t13068;
  t13070 = 3.2*t8980*t13069;
  t13071 = -1.*t8955*t13064;
  t13072 = -1.*t8965*t13067;
  t13073 = t13071 + t13047 + t13072 + t13049;
  t13074 = 3.2*t9006*t13073;
  t13075 = t13057 + t12984 + t13061 + t12994 + t13027 + t13070 + t13045 + t13074;
  t13031 = t13030*t8965;
  t13040 = t8995*t13039;
  t13042 = t13031 + t13032 + t13040 + t13041;
  t13046 = -1.*t8955*t13030;
  t13048 = -1.*t8965*t13039;
  t13050 = t13046 + t13047 + t13048 + t13049;
  t13154 = -0.24*t8637*t8945;
  t13155 = 0.24*t8656*t8949;
  t13156 = t13154 + t13155;
  t13146 = 3.2*t13009*t9073;
  t13149 = 3.2*t13023*t12131;
  t13152 = -1.*t8995*t13007;
  t13160 = -1.*t13003*t9066;
  t13167 = t8955*t13003;
  t13187 = 0.63*t8637;
  t13188 = -1.*t8637*t13000;
  t13189 = t13187 + t13188 + t13155;
  t13172 = t13007*t9066;
  t13044 = 3.2*t8980*t13042;
  t13051 = 3.2*t9006*t13050;
  t13052 = t13027 + t13044 + t13045 + t13051;
  t13150 = -1.*t13030*t8965;
  t13157 = -1.*t8955*t13156;
  t13168 = t13030*t8995;
  t13171 = t8965*t13156;
  t13147 = 3.2*t13042*t9073;
  t13148 = 3.2*t13069*t9073;
  t13151 = -1.*t8955*t13039;
  t13153 = -1.*t8955*t13067;
  t13158 = -1.*t13030*t9066;
  t13159 = -1.*t13064*t9066;
  t13161 = t13150 + t13151 + t13152 + t13153 + t13157 + t13158 + t13159 + t13160;
  t13162 = 3.2*t9004*t13161;
  t13163 = 3.2*t8987*t13050;
  t13164 = 3.2*t8987*t13073;
  t13165 = t8955*t13030;
  t13166 = t8955*t13064;
  t13169 = t8965*t13039;
  t13170 = t8965*t13067;
  t13173 = t13165 + t13166 + t13167 + t13168 + t13169 + t13170 + t13171 + t13172;
  t13174 = 3.2*t8987*t13173;
  t13175 = t13146 + t13147 + t13148 + t13149 + t13162 + t13163 + t13164 + t13174;
  t13222 = 3.2*t4832*t12880;
  t13224 = 3.2*t12910*t8460;
  t13221 = 6.8*t8610*t12830;
  t13235 = 6.8*t8660*t12983;
  t13236 = 6.8*t8924*t12990;
  t13241 = 3.2*t8987*t13009;
  t13243 = 3.2*t13023*t9073;
  t13232 = -2.88*t4363;
  t13233 = 3.2*t6079*t12880;
  t13234 = 3.2*t6549*t12910;
  t13237 = 3.2*t9006*t13009;
  t13238 = 3.2*t8980*t13023;
  t13239 = t13232 + t13221 + t13233 + t13234 + t13235 + t13236 + t13237 + t13238;
  t13223 = 3.2*t4832*t12906;
  t13225 = 3.2*t4649*t12916;
  t13226 = t13221 + t13222 + t13223 + t13224 + t13225;
  t13228 = 3.2*t4832*t12936;
  t13229 = 3.2*t4649*t12940;
  t13230 = t13222 + t13228 + t13224 + t13229;
  t13247 = 6.8*t8660*t13060;
  t13248 = 6.8*t13056*t8888;
  t13249 = 3.2*t8987*t13069;
  t13250 = 3.2*t9004*t13073;
  t13251 = t13235 + t13247 + t13248 + t13236 + t13241 + t13249 + t13243 + t13250;
  t13242 = 3.2*t8987*t13042;
  t13244 = 3.2*t9004*t13050;
  t13245 = t13241 + t13242 + t13243 + t13244;
  t13259 = 0.748*t8583;
  t13260 = t12863*t2694;
  t13261 = -0.24*t1832*t2694;
  t13262 = t13260 + t13261;
  t13264 = t12863*t1832;
  t13265 = Power(t2694,2);
  t13266 = 0.24*t13265;
  t13267 = t13264 + t13266;
  t13271 = 3.2*t13262*t6549;
  t13272 = 3.2*t13267*t8482;
  t13273 = t13259 + t13271 + t13272;
  t13279 = Power(t1832,2);
  t13280 = -0.24*t13279;
  t13281 = t13264 + t13280;
  t13288 = 3.2*t13262*t8460;
  t13275 = -1.*t12863*t2694;
  t13276 = 0.24*t1832*t2694;
  t13277 = t13275 + t13276;
  t13289 = 3.2*t13267*t9722;
  t13278 = 3.2*t13277*t6549;
  t13282 = 3.2*t13281*t6079;
  t13283 = t13271 + t13278 + t13282 + t13272;
  t13292 = 3.2*t13281*t4832;
  t13293 = 3.2*t13277*t8460;
  t13294 = t13292 + t13288 + t13293 + t13289;
  t13311 = 0.748*t8610;
  t13316 = 3.2*t13262*t4832;
  t13317 = 3.2*t13267*t8460;
  t13312 = 3.2*t13267*t6549;
  t13313 = 3.2*t13262*t6079;
  t13314 = t13311 + t13312 + t13313;
  t13318 = t13311 + t13316 + t13317;
  t13320 = 3.2*t13281*t4649;
  t13321 = 3.2*t13277*t4832;
  t13322 = t13320 + t13316 + t13321 + t13317;
  t13333 = -0.384*var2[2]*t8482;
  t13334 = -0.384*var2[3]*t9722;
  t13335 = -0.384*var2[4]*t9722;
  t13336 = t13333 + t13334 + t13335;
  t13337 = var2[1]*t13336;
  t13343 = -0.384*var2[1]*t8460;
  t13344 = 0.748*t8904;
  t13345 = -0.63*t8949;
  t13346 = -0.24*t8945*t8949;
  t13347 = t13000*t8949;
  t13348 = t13345 + t13346 + t13347;
  t13350 = -0.63*t8945;
  t13351 = t8945*t13000;
  t13352 = Power(t8949,2);
  t13353 = 0.24*t13352;
  t13354 = t13350 + t13351 + t13353;
  t13358 = 3.2*t13348*t8980;
  t13359 = 3.2*t13354*t9076;
  t13360 = t13344 + t13358 + t13359;
  t13367 = Power(t8945,2);
  t13368 = -0.24*t13367;
  t13369 = t13350 + t13368 + t13351;
  t13362 = 0.63*t8949;
  t13363 = 0.24*t8945*t8949;
  t13364 = -1.*t13000*t8949;
  t13365 = t13362 + t13363 + t13364;
  t13376 = 3.2*t13348*t9073;
  t13377 = 3.2*t13354*t12131;
  t13366 = 3.2*t13365*t8980;
  t13370 = 3.2*t13369*t9006;
  t13371 = t13366 + t13358 + t13370 + t13359;
  t13380 = 3.2*t13369*t8987;
  t13381 = 3.2*t13365*t9073;
  t13382 = t13380 + t13381 + t13376 + t13377;
  t13400 = 0.748*t8924;
  t13405 = 3.2*t13348*t8987;
  t13406 = 3.2*t13354*t9073;
  t13401 = 3.2*t13354*t8980;
  t13402 = 3.2*t13348*t9006;
  t13403 = t13400 + t13401 + t13402;
  t13407 = t13400 + t13405 + t13406;
  t13409 = 3.2*t13369*t9004;
  t13410 = 3.2*t13365*t8987;
  t13411 = t13409 + t13410 + t13405 + t13406;
  t13422 = -0.384*var2[2]*t9076;
  t13423 = -0.384*var2[5]*t12131;
  t13424 = -0.384*var2[6]*t12131;
  t13425 = t13422 + t13423 + t13424;
  t13426 = var2[1]*t13425;
  t13432 = -0.384*var2[1]*t9073;
  p_output1[0]=var2[1]*(-0.5*(9.6*t4649*t6079 + 9.6*t4832*t6549 + t8578 + t8584 + t8612 + t8615 + 3.2*t5605*t8632 + 3.2*t6665*t8635 + t8889 + t8920 + t8927 + t8928 + 9.6*t8980*t8987 + 9.6*t9004*t9006 + 3.2*t9012*t9022 + 3.2*t9048*t9051)*var2[2] - 0.5*t8617*var2[3] - 0.5*t8504*var2[4] - 0.5*t9231*var2[5] - 0.5*t9164*var2[6]);
  p_output1[1]=var2[1]*(t9957 - 0.5*t8617*var2[2] - 0.5*(t8578 + t8584 + t8612 + t8615 + t9586 + t9640 + t9707 + t9731 + t9824 + t9873)*var2[3]);
  p_output1[2]=var2[1]*(t9957 - 0.5*t8504*var2[2] - 0.5*t9951*var2[3]);
  p_output1[3]=var2[1]*(t12152 - 0.5*t9231*var2[2] - 0.5*(t12052 + t12118 + t12127 + t12137 + t12141 + t12147 + t8889 + t8920 + t8927 + t8928)*var2[5]);
  p_output1[4]=var2[1]*(t12152 - 0.5*t9164*var2[2] - 0.5*t12148*var2[5]);
  p_output1[5]=-0.5*t12445*var2[2] - 0.5*t12333*var2[3] - 0.5*t12277*var2[4] - 0.5*t12458*var2[5] - 0.5*t12456*var2[6];
  p_output1[6]=-0.5*t12445*var2[1];
  p_output1[7]=-0.5*t12333*var2[1];
  p_output1[8]=-0.5*t12277*var2[1];
  p_output1[9]=-0.5*t12458*var2[1];
  p_output1[10]=-0.5*t12456*var2[1];
  p_output1[11]=var2[1]*(-0.5*(t12535 + t12536 + t12537 + t12539 + t12642 + t12643 + t12664 + t12688 + 6.4*Power(t6079,2) + 6.4*Power(t6549,2) + 6.4*t4832*t8632 + 6.4*t4649*t8635 + 6.4*Power(t8980,2) + 6.4*Power(t9006,2) + 6.4*t8987*t9022 + 6.4*t9004*t9048)*var2[2] - 0.5*t12540*var2[3] - 0.5*t12520*var2[4] - 0.5*t12712*var2[5] - 0.5*t12709*var2[6]);
  p_output1[12]=var2[1]*(t12744 - 0.5*t12540*var2[2] - 0.5*(t12535 + t12536 + t12537 + t12539 + t12738 + t12739 + t12741 + t12742)*var2[3]);
  p_output1[13]=var2[1]*(t12744 - 0.5*t12520*var2[2] - 0.5*t12743*var2[3]);
  p_output1[14]=var2[1]*(t12790 - 0.5*t12712*var2[2] - 0.5*(t12642 + t12643 + t12664 + t12688 + t12754 + t12755 + t12787 + t12788)*var2[5]);
  p_output1[15]=var2[1]*(t12790 - 0.5*t12709*var2[2] - 0.5*t12789*var2[5]);
  p_output1[16]=-0.5*t12814*var2[2] - 0.5*t12806*var2[3] - 0.5*t12802*var2[4] - 0.5*t12818*var2[5] - 0.5*t12816*var2[6];
  p_output1[17]=-0.5*t12814*var2[1];
  p_output1[18]=-0.5*t12806*var2[1];
  p_output1[19]=-0.5*t12802*var2[1];
  p_output1[20]=-0.5*t12818*var2[1];
  p_output1[21]=-0.5*t12816*var2[1];
  p_output1[22]=var2[1]*(-0.5*(t12831 + t12984 + t12994 + 2.88*t166 + 3.2*t12910*t8632 + 3.2*t12880*t8635 + 3.2*t13023*t9022 + 3.2*t13009*t9048)*var2[2] - 0.5*t12918*var2[3] - 0.5*t12942*var2[4] - 0.5*t13075*var2[5] - 0.5*t13052*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t12918*var2[2] - 0.5*(t12831 + t13080 + t13082 + 6.4*t12916*t4832 + 3.2*(t13096 + t13100 + t12896*t2852 + 2.*t12875*t4584 + t13088*t4584 + 2.*t12896*t4813)*t4832 + 3.2*t4649*(t13085 + t13091 - 1.*t12896*t4584 - 2.*t12875*t4813 - 1.*t13088*t4813 - 2.*t12896*t8411) + 6.4*t12906*t8460)*var2[3] - 0.5*t13125*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t12942*var2[2] - 0.5*t13125*var2[3] - 0.5*(t13080 + t13082 + 6.4*t12940*t4832 + 3.2*(t13096 + t13100 + t13120 + t13122 + 2.*t12934*t4584 + 2.*t12921*t4813)*t4832 + 3.2*t4649*(t13085 + t13091 + t13107 + t13111 - 2.*t12934*t4813 - 2.*t12921*t8411) + 6.4*t12936*t8460)*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t13075*var2[2] - 0.5*(t12984 + t12994 + t13146 + t13149 + 13.6*t13056*t8660 + 6.8*(0.11*t13054 - 1.*t12967*t8637)*t8660 + 6.8*t13060*t8888 + 13.6*t13060*t8924 + 6.4*t13073*t8987 + 3.2*t8987*(t13167 + t13172 + 2.*t13064*t8955 + 2.*t13067*t8965 + t13189*t8965 + t13064*t8995) + 3.2*t9004*(t13152 + t13160 - 2.*t13067*t8955 - 1.*t13189*t8955 - 1.*t13064*t8965 - 2.*t13064*t9066) + 6.4*t13069*t9073)*var2[5] - 0.5*t13175*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t13052*var2[2] - 0.5*t13175*var2[5] - 0.5*(t13146 + t13149 + 6.4*t13050*t8987 + 3.2*(t13167 + t13168 + t13171 + t13172 + 2.*t13030*t8955 + 2.*t13039*t8965)*t8987 + 3.2*t9004*(t13150 + t13152 + t13157 + t13160 - 2.*t13039*t8955 - 2.*t13030*t9066) + 6.4*t13042*t9073)*var2[6]);
  p_output1[27]=-0.5*t13239*var2[2] - 0.5*t13226*var2[3] - 0.5*t13230*var2[4] - 0.5*t13251*var2[5] - 0.5*t13245*var2[6];
  p_output1[28]=-0.5*t13239*var2[1];
  p_output1[29]=-0.5*t13226*var2[1];
  p_output1[30]=-0.5*t13230*var2[1];
  p_output1[31]=-0.5*t13251*var2[1];
  p_output1[32]=-0.5*t13245*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t13259 + 3.2*t13267*t8632 + 3.2*t13262*t8635)*var2[2] - 0.5*t13273*var2[3] - 0.5*t13283*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t13273*var2[2] - 0.5*(t13259 + t13288 + t13289)*var2[3] - 0.5*t13294*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t13283*var2[2] - 0.5*t13294*var2[3] - 0.5*(t13288 + t13289 + 3.2*t13277*t4649 + 6.4*t13281*t4832 + 3.2*(0.24*t13279 - 1.*t12863*t1832)*t4832 + 6.4*t13277*t8460)*var2[4]);
  p_output1[36]=-0.5*t13314*var2[2] - 0.5*t13318*var2[3] - 0.5*t13322*var2[4];
  p_output1[37]=-0.5*t13314*var2[1];
  p_output1[38]=-0.5*t13318*var2[1];
  p_output1[39]=-0.5*t13322*var2[1];
  p_output1[40]=var2[1]*(-0.384*t8632*var2[2] - 0.384*t8482*var2[3] - 0.384*t8482*var2[4]);
  p_output1[41]=t13337;
  p_output1[42]=t13337;
  p_output1[43]=-0.384*t6549*var2[2] - 0.384*t8460*var2[3] - 0.384*t8460*var2[4];
  p_output1[44]=-0.384*t6549*var2[1];
  p_output1[45]=t13343;
  p_output1[46]=t13343;
  p_output1[47]=var2[1]*(-0.5*(t13344 + 3.2*t13354*t9022 + 3.2*t13348*t9048)*var2[2] - 0.5*t13360*var2[5] - 0.5*t13371*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t13360*var2[2] - 0.5*(t13344 + t13376 + t13377)*var2[5] - 0.5*t13382*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t13371*var2[2] - 0.5*t13382*var2[5] - 0.5*(t13376 + t13377 + 6.4*t13369*t8987 + 3.2*(0.24*t13367 + 0.63*t8945 - 1.*t13000*t8945)*t8987 + 3.2*t13365*t9004 + 6.4*t13365*t9073)*var2[6]);
  p_output1[50]=-0.5*t13403*var2[2] - 0.5*t13407*var2[5] - 0.5*t13411*var2[6];
  p_output1[51]=-0.5*t13403*var2[1];
  p_output1[52]=-0.5*t13407*var2[1];
  p_output1[53]=-0.5*t13411*var2[1];
  p_output1[54]=var2[1]*(-0.384*t9022*var2[2] - 0.384*t9076*var2[5] - 0.384*t9076*var2[6]);
  p_output1[55]=t13426;
  p_output1[56]=t13426;
  p_output1[57]=-0.384*t8980*var2[2] - 0.384*t9073*var2[5] - 0.384*t9073*var2[6];
  p_output1[58]=-0.384*t8980*var2[1];
  p_output1[59]=t13432;
  p_output1[60]=t13432;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace LeftStance
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
