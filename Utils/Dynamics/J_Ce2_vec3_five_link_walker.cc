/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:56:44 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t9313;
  double t1929;
  double t6499;
  double t9426;
  double t13483;
  double t1871;
  double t9037;
  double t9506;
  double t9694;
  double t12427;
  double t13560;
  double t13563;
  double t13570;
  double t13571;
  double t13572;
  double t13613;
  double t13614;
  double t13625;
  double t13626;
  double t13627;
  double t13838;
  double t13830;
  double t13831;
  double t13842;
  double t13837;
  double t13843;
  double t13844;
  double t13845;
  double t13846;
  double t13847;
  double t13848;
  double t13849;
  double t13850;
  double t13857;
  double t13858;
  double t13859;
  double t13860;
  double t13861;
  double t13883;
  double t13884;
  double t13885;
  double t13880;
  double t13881;
  double t13882;
  double t13591;
  double t13592;
  double t13608;
  double t13887;
  double t13888;
  double t13889;
  double t13825;
  double t13821;
  double t13822;
  double t13823;
  double t13824;
  double t13826;
  double t13897;
  double t13903;
  double t13914;
  double t13915;
  double t13916;
  double t13911;
  double t13912;
  double t13913;
  double t13852;
  double t13853;
  double t13854;
  double t13918;
  double t13919;
  double t13920;
  double t13875;
  double t13871;
  double t13872;
  double t13873;
  double t13874;
  double t13876;
  double t13928;
  double t13934;
  double t13900;
  double t13901;
  double t13896;
  double t13898;
  double t13893;
  double t13894;
  double t13908;
  double t13909;
  double t13931;
  double t13932;
  double t13927;
  double t13929;
  double t13924;
  double t13925;
  double t13939;
  double t13940;
  double t13977;
  double t13978;
  double t13979;
  double t13981;
  double t13982;
  double t13983;
  double t13991;
  double t13992;
  double t13993;
  double t13994;
  double t13995;
  double t14005;
  double t14006;
  double t14007;
  double t14008;
  double t14010;
  double t14011;
  double t14012;
  double t13609;
  double t13813;
  double t13814;
  double t13820;
  double t13808;
  double t13809;
  double t13810;
  double t13811;
  double t14024;
  double t14025;
  double t14026;
  double t14027;
  double t14028;
  double t13886;
  double t13890;
  double t13891;
  double t13892;
  double t13902;
  double t13944;
  double t13945;
  double t13946;
  double t13947;
  double t13948;
  double t13949;
  double t14041;
  double t14042;
  double t13971;
  double t13972;
  double t13973;
  double t13974;
  double t13975;
  double t13976;
  double t13980;
  double t13984;
  double t13985;
  double t13987;
  double t13988;
  double t13989;
  double t14053;
  double t14054;
  double t14055;
  double t14029;
  double t14030;
  double t14031;
  double t14034;
  double t14035;
  double t14036;
  double t14037;
  double t14038;
  double t14039;
  double t14040;
  double t14043;
  double t14046;
  double t14047;
  double t14048;
  double t14049;
  double t14052;
  double t14057;
  double t14058;
  double t14062;
  double t14087;
  double t14088;
  double t14064;
  double t14090;
  double t14091;
  double t14066;
  double t13855;
  double t13867;
  double t13868;
  double t13869;
  double t13870;
  double t13856;
  double t13862;
  double t13863;
  double t13864;
  double t13865;
  double t14103;
  double t14104;
  double t14105;
  double t14106;
  double t14107;
  double t13917;
  double t13921;
  double t13922;
  double t13923;
  double t13933;
  double t13956;
  double t13957;
  double t13958;
  double t13959;
  double t13960;
  double t13961;
  double t14120;
  double t14121;
  double t13996;
  double t13997;
  double t13998;
  double t13999;
  double t14000;
  double t14001;
  double t14002;
  double t14003;
  double t14004;
  double t14009;
  double t14013;
  double t14014;
  double t14016;
  double t14017;
  double t14018;
  double t14140;
  double t14141;
  double t14142;
  double t14143;
  double t14147;
  double t14148;
  double t14108;
  double t14109;
  double t14110;
  double t14113;
  double t14114;
  double t14115;
  double t14116;
  double t14117;
  double t14118;
  double t14119;
  double t14122;
  double t14125;
  double t14126;
  double t14127;
  double t14128;
  double t14139;
  double t14145;
  double t14146;
  double t14152;
  double t14178;
  double t14179;
  double t14154;
  double t14181;
  double t14182;
  double t14156;
  double t13951;
  double t13953;
  double t13963;
  double t13965;
  double t14194;
  double t14195;
  double t14196;
  double t14197;
  double t14198;
  double t14199;
  double t14200;
  double t14201;
  double t14202;
  double t14204;
  double t14205;
  double t14206;
  double t14207;
  double t14208;
  double t14209;
  double t14210;
  double t14211;
  double t14212;
  double t14213;
  double t14214;
  double t14215;
  double t14216;
  double t14217;
  double t14218;
  double t14219;
  double t14220;
  double t14223;
  double t14224;
  double t14225;
  double t14226;
  double t14229;
  double t14230;
  double t14231;
  double t14232;
  double t13904;
  double t13906;
  double t13907;
  double t13935;
  double t13937;
  double t13938;
  double t13895;
  double t13899;
  double t13905;
  double t13910;
  double t13926;
  double t13930;
  double t13936;
  double t13941;
  double t13942;
  double t14252;
  double t14263;
  double t14264;
  double t14044;
  double t14283;
  double t14056;
  double t14059;
  double t14060;
  double t14063;
  double t14065;
  double t14067;
  double t14294;
  double t14295;
  double t14077;
  double t14078;
  double t14079;
  double t14073;
  double t14074;
  double t14075;
  double t14296;
  double t14299;
  double t14300;
  double t14301;
  double t14302;
  double t14083;
  double t14306;
  double t14089;
  double t14092;
  double t14093;
  double t14308;
  double t14095;
  double t14096;
  double t14097;
  double t14258;
  double t14271;
  double t14272;
  double t14123;
  double t14135;
  double t14136;
  double t14137;
  double t14286;
  double t14131;
  double t14132;
  double t14133;
  double t14287;
  double t14144;
  double t14149;
  double t14150;
  double t14153;
  double t14155;
  double t14157;
  double t14327;
  double t14167;
  double t14168;
  double t14169;
  double t14170;
  double t14328;
  double t14163;
  double t14164;
  double t14165;
  double t14329;
  double t14332;
  double t14333;
  double t14334;
  double t14335;
  double t14174;
  double t14341;
  double t14180;
  double t14183;
  double t14184;
  double t14343;
  double t14186;
  double t14187;
  double t14188;
  double t14221;
  double t13582;
  double t13812;
  double t13827;
  double t13828;
  double t13829;
  double t13851;
  double t13866;
  double t13877;
  double t13878;
  double t13879;
  double t14362;
  double t14363;
  double t14364;
  double t14365;
  double t14366;
  double t14367;
  double t14368;
  double t13970;
  double t13986;
  double t13990;
  double t14015;
  double t14019;
  double t14020;
  double t14282;
  double t14284;
  double t14285;
  double t14288;
  double t14289;
  double t14290;
  double t14061;
  double t14068;
  double t14069;
  double t14307;
  double t14309;
  double t14310;
  double t14094;
  double t14098;
  double t14099;
  double t14321;
  double t14322;
  double t14323;
  double t14134;
  double t14138;
  double t14151;
  double t14158;
  double t14159;
  double t14339;
  double t14340;
  double t14342;
  double t14344;
  double t14345;
  double t14185;
  double t14189;
  double t14190;
  double t14356;
  double t14357;
  double t14358;
  double t14236;
  double t14237;
  double t14238;
  double t14239;
  double t14240;
  double t14241;
  double t14242;
  double t14243;
  double t14244;
  double t14021;
  double t14253;
  double t14254;
  double t14255;
  double t14032;
  double t14297;
  double t14076;
  double t14080;
  double t14081;
  double t14314;
  double t14315;
  double t14316;
  double t14247;
  double t14374;
  double t14421;
  double t14422;
  double t14423;
  double t14424;
  double t14248;
  double t14375;
  double t14259;
  double t14260;
  double t14261;
  double t14111;
  double t14330;
  double t14166;
  double t14171;
  double t14172;
  double t14349;
  double t14350;
  double t14351;
  double t14249;
  double t14376;
  double t14447;
  double t14448;
  double t14449;
  double t14450;
  double t14250;
  double t14377;
  t9313 = Cos(var1[3]);
  t1929 = Cos(var1[4]);
  t6499 = Sin(var1[3]);
  t9426 = Sin(var1[4]);
  t13483 = Cos(var1[2]);
  t1871 = Sin(var1[2]);
  t9037 = -1.*t1929*t6499;
  t9506 = -1.*t9313*t9426;
  t9694 = t9037 + t9506;
  t12427 = -1.*t1871*t9694;
  t13560 = t9313*t1929;
  t13563 = -1.*t6499*t9426;
  t13570 = t13560 + t13563;
  t13571 = -1.*t13483*t13570;
  t13572 = t12427 + t13571;
  t13613 = -1.*t1929;
  t13614 = 1. + t13613;
  t13625 = 0.4*t13614;
  t13626 = 0.64*t1929;
  t13627 = t13625 + t13626;
  t13838 = Cos(var1[5]);
  t13830 = Cos(var1[6]);
  t13831 = Sin(var1[5]);
  t13842 = Sin(var1[6]);
  t13837 = -1.*t13830*t13831;
  t13843 = -1.*t13838*t13842;
  t13844 = t13837 + t13843;
  t13845 = -1.*t1871*t13844;
  t13846 = t13838*t13830;
  t13847 = -1.*t13831*t13842;
  t13848 = t13846 + t13847;
  t13849 = -1.*t13483*t13848;
  t13850 = t13845 + t13849;
  t13857 = -1.*t13830;
  t13858 = 1. + t13857;
  t13859 = 1.03*t13858;
  t13860 = 1.27*t13830;
  t13861 = t13859 + t13860;
  t13883 = t13483*t9313;
  t13884 = -1.*t1871*t6499;
  t13885 = t13883 + t13884;
  t13880 = -1.*t9313*t1871;
  t13881 = -1.*t13483*t6499;
  t13882 = t13880 + t13881;
  t13591 = -1.*t13483*t9313;
  t13592 = t1871*t6499;
  t13608 = t13591 + t13592;
  t13887 = t9313*t1871;
  t13888 = t13483*t6499;
  t13889 = t13887 + t13888;
  t13825 = -1.*t1871*t13570;
  t13821 = t1929*t6499;
  t13822 = t9313*t9426;
  t13823 = t13821 + t13822;
  t13824 = -1.*t13483*t13823;
  t13826 = t13824 + t13825;
  t13897 = t13483*t13570;
  t13903 = t1871*t13570;
  t13914 = t13483*t13838;
  t13915 = -1.*t1871*t13831;
  t13916 = t13914 + t13915;
  t13911 = -1.*t13838*t1871;
  t13912 = -1.*t13483*t13831;
  t13913 = t13911 + t13912;
  t13852 = -1.*t13483*t13838;
  t13853 = t1871*t13831;
  t13854 = t13852 + t13853;
  t13918 = t13838*t1871;
  t13919 = t13483*t13831;
  t13920 = t13918 + t13919;
  t13875 = -1.*t1871*t13848;
  t13871 = t13830*t13831;
  t13872 = t13838*t13842;
  t13873 = t13871 + t13872;
  t13874 = -1.*t13483*t13873;
  t13876 = t13874 + t13875;
  t13928 = t13483*t13848;
  t13934 = t1871*t13848;
  t13900 = t1871*t9694;
  t13901 = t13900 + t13897;
  t13896 = -1.*t1871*t13823;
  t13898 = t13896 + t13897;
  t13893 = t13483*t9694;
  t13894 = t13893 + t13825;
  t13908 = t13483*t13823;
  t13909 = t13908 + t13903;
  t13931 = t1871*t13844;
  t13932 = t13931 + t13928;
  t13927 = -1.*t1871*t13873;
  t13929 = t13927 + t13928;
  t13924 = t13483*t13844;
  t13925 = t13924 + t13875;
  t13939 = t13483*t13873;
  t13940 = t13939 + t13934;
  t13977 = t13627*t6499;
  t13978 = 0.24*t9313*t9426;
  t13979 = t13977 + t13978;
  t13981 = t9313*t13627;
  t13982 = -0.24*t6499*t9426;
  t13983 = t13981 + t13982;
  t13991 = -1.*t13838;
  t13992 = 1. + t13991;
  t13993 = 0.63*t13992;
  t13994 = 0.74*t13838;
  t13995 = t13993 + t13994;
  t14005 = -0.63*t13831;
  t14006 = t13861*t13831;
  t14007 = 0.24*t13838*t13842;
  t14008 = t14005 + t14006 + t14007;
  t14010 = t13838*t13861;
  t14011 = -0.24*t13831*t13842;
  t14012 = t13993 + t14010 + t14011;
  t13609 = 0.748*t13608;
  t13813 = t13627*t9426;
  t13814 = -0.24*t1929*t9426;
  t13820 = t13813 + t13814;
  t13808 = t13627*t1929;
  t13809 = Power(t9426,2);
  t13810 = 0.24*t13809;
  t13811 = t13808 + t13810;
  t14024 = -1.*t9313*t1929;
  t14025 = t6499*t9426;
  t14026 = t14024 + t14025;
  t14027 = t13483*t14026;
  t14028 = t12427 + t14027;
  t13886 = 20.4*t13882*t13885;
  t13890 = 6.8*t13889*t13885;
  t13891 = 20.4*t13882*t13608;
  t13892 = 6.8*t13889*t13608;
  t13902 = -1.*t13483*t9694;
  t13944 = Power(t13882,2);
  t13945 = 13.6*t13944;
  t13946 = 13.6*t13882*t13889;
  t13947 = Power(t13885,2);
  t13948 = 13.6*t13947;
  t13949 = 13.6*t13885*t13608;
  t14041 = t1871*t14026;
  t14042 = t13893 + t14041;
  t13971 = Power(t9313,2);
  t13972 = 0.11*t13971;
  t13973 = Power(t6499,2);
  t13974 = 0.11*t13973;
  t13975 = t13972 + t13974;
  t13976 = 6.8*t13608*t13975;
  t13980 = -1.*t13979*t13570;
  t13984 = -1.*t9694*t13983;
  t13985 = t13980 + t13984;
  t13987 = t13979*t13823;
  t13988 = t13570*t13983;
  t13989 = t13987 + t13988;
  t14053 = -1.*t13627*t6499;
  t14054 = -0.24*t9313*t9426;
  t14055 = t14053 + t14054;
  t14029 = -0.384*var2[4]*t14028;
  t14030 = 3.2*t13820*t13894;
  t14031 = 3.2*t13811*t14028;
  t14034 = 6.4*t13898*t13894;
  t14035 = 3.2*t13901*t13826;
  t14036 = 3.2*t13572*t13909;
  t14037 = 6.4*t13894*t14028;
  t14038 = -1.*t1871*t14026;
  t14039 = t13902 + t14038;
  t14040 = 3.2*t13901*t14039;
  t14043 = 3.2*t13572*t14042;
  t14046 = 6.4*t13901*t13898;
  t14047 = 6.4*t13894*t13909;
  t14048 = 6.4*t13901*t14028;
  t14049 = 6.4*t13894*t14042;
  t14052 = 3.2*t13894*t13985;
  t14057 = t13979*t13570;
  t14058 = t9694*t13983;
  t14062 = 3.2*t13989*t14028;
  t14087 = -0.24*t1929*t6499;
  t14088 = t14087 + t14054;
  t14064 = -1.*t9694*t13979;
  t14090 = 0.24*t9313*t1929;
  t14091 = t14090 + t13982;
  t14066 = -1.*t13983*t14026;
  t13855 = 0.748*t13854;
  t13867 = -0.63*t13842;
  t13868 = -0.24*t13830*t13842;
  t13869 = t13861*t13842;
  t13870 = t13867 + t13868 + t13869;
  t13856 = -0.63*t13830;
  t13862 = t13830*t13861;
  t13863 = Power(t13842,2);
  t13864 = 0.24*t13863;
  t13865 = t13856 + t13862 + t13864;
  t14103 = -1.*t13838*t13830;
  t14104 = t13831*t13842;
  t14105 = t14103 + t14104;
  t14106 = t13483*t14105;
  t14107 = t13845 + t14106;
  t13917 = 20.4*t13913*t13916;
  t13921 = 6.8*t13920*t13916;
  t13922 = 20.4*t13913*t13854;
  t13923 = 6.8*t13920*t13854;
  t13933 = -1.*t13483*t13844;
  t13956 = Power(t13913,2);
  t13957 = 13.6*t13956;
  t13958 = 13.6*t13913*t13920;
  t13959 = Power(t13916,2);
  t13960 = 13.6*t13959;
  t13961 = 13.6*t13916*t13854;
  t14120 = t1871*t14105;
  t14121 = t13924 + t14120;
  t13996 = t13995*t13831;
  t13997 = -0.11*t13838*t13831;
  t13998 = t13996 + t13997;
  t13999 = 6.8*t13913*t13998;
  t14000 = t13995*t13838;
  t14001 = Power(t13831,2);
  t14002 = 0.11*t14001;
  t14003 = t14000 + t14002;
  t14004 = 6.8*t13854*t14003;
  t14009 = -1.*t14008*t13848;
  t14013 = -1.*t13844*t14012;
  t14014 = t14009 + t14013;
  t14016 = t14008*t13873;
  t14017 = t13848*t14012;
  t14018 = t14016 + t14017;
  t14140 = 0.63*t13831;
  t14141 = -1.*t13861*t13831;
  t14142 = -0.24*t13838*t13842;
  t14143 = t14140 + t14141 + t14142;
  t14147 = -0.63*t13838;
  t14148 = t14147 + t14010 + t14011;
  t14108 = -0.384*var2[6]*t14107;
  t14109 = 3.2*t13870*t13925;
  t14110 = 3.2*t13865*t14107;
  t14113 = 6.4*t13929*t13925;
  t14114 = 3.2*t13932*t13876;
  t14115 = 3.2*t13850*t13940;
  t14116 = 6.4*t13925*t14107;
  t14117 = -1.*t1871*t14105;
  t14118 = t13933 + t14117;
  t14119 = 3.2*t13932*t14118;
  t14122 = 3.2*t13850*t14121;
  t14125 = 6.4*t13932*t13929;
  t14126 = 6.4*t13925*t13940;
  t14127 = 6.4*t13932*t14107;
  t14128 = 6.4*t13925*t14121;
  t14139 = 3.2*t13925*t14014;
  t14145 = t14008*t13848;
  t14146 = t13844*t14012;
  t14152 = 3.2*t14018*t14107;
  t14178 = -0.24*t13830*t13831;
  t14179 = t14178 + t14142;
  t14154 = -1.*t13844*t14008;
  t14181 = 0.24*t13838*t13830;
  t14182 = t14181 + t14011;
  t14156 = -1.*t14012*t14105;
  t13951 = Power(t13898,2);
  t13953 = Power(t13894,2);
  t13963 = Power(t13929,2);
  t13965 = Power(t13925,2);
  t14194 = 13.6*t13882*t13885;
  t14195 = 13.6*t13889*t13885;
  t14196 = 6.4*t13901*t13894;
  t14197 = 6.4*t13898*t13909;
  t14198 = 13.6*t13913*t13916;
  t14199 = 13.6*t13920*t13916;
  t14200 = 6.4*t13932*t13925;
  t14201 = 6.4*t13929*t13940;
  t14202 = t14194 + t14195 + t14196 + t14197 + t14198 + t14199 + t14200 + t14201;
  t14204 = 6.8*t13944;
  t14205 = 6.8*t13882*t13889;
  t14206 = 6.8*t13947;
  t14207 = 6.8*t13885*t13608;
  t14208 = 3.2*t13572*t13901;
  t14209 = 3.2*t13951;
  t14210 = 3.2*t13953;
  t14211 = 3.2*t13826*t13909;
  t14212 = 6.8*t13956;
  t14213 = 6.8*t13913*t13920;
  t14214 = 6.8*t13959;
  t14215 = 6.8*t13916*t13854;
  t14216 = 3.2*t13850*t13932;
  t14217 = 3.2*t13963;
  t14218 = 3.2*t13965;
  t14219 = 3.2*t13876*t13940;
  t14220 = t14204 + t14205 + t14206 + t14207 + t14208 + t14209 + t14210 + t14211 + t14212 + t14213 + t14214 + t14215 + t14216 + t14217 + t14218 + t14219;
  t14223 = 0.748*t13882;
  t14224 = 3.2*t13820*t13898;
  t14225 = 3.2*t13811*t13894;
  t14226 = t14223 + t14224 + t14225;
  t14229 = 0.748*t13913;
  t14230 = 3.2*t13870*t13929;
  t14231 = 3.2*t13865*t13925;
  t14232 = t14229 + t14230 + t14231;
  t13904 = t13902 + t13903;
  t13906 = t1871*t13823;
  t13907 = t13906 + t13571;
  t13935 = t13933 + t13934;
  t13937 = t1871*t13873;
  t13938 = t13937 + t13849;
  t13895 = 9.6*t13572*t13894;
  t13899 = 9.6*t13898*t13826;
  t13905 = 3.2*t13901*t13904;
  t13910 = 3.2*t13907*t13909;
  t13926 = 9.6*t13850*t13925;
  t13930 = 9.6*t13929*t13876;
  t13936 = 3.2*t13932*t13935;
  t13941 = 3.2*t13938*t13940;
  t13942 = t13886 + t13890 + t13891 + t13892 + t13895 + t13899 + t13905 + t13910 + t13917 + t13921 + t13922 + t13923 + t13926 + t13930 + t13936 + t13941;
  t14252 = 0.748*t13889;
  t14263 = Power(t13608,2);
  t14264 = 13.6*t14263;
  t14044 = t13886 + t13890 + t13891 + t13892 + t14034 + t14035 + t14036 + t14037 + t14040 + t14043;
  t14283 = 6.8*t13889*t13975;
  t14056 = t14055*t13570;
  t14059 = t13823*t13983;
  t14060 = t14056 + t14057 + t14058 + t14059;
  t14063 = -1.*t9694*t14055;
  t14065 = -1.*t13570*t13983;
  t14067 = t14063 + t14064 + t14065 + t14066;
  t14294 = -0.384*var2[4]*t14039;
  t14295 = 3.2*t13820*t13572;
  t14077 = -1.*t13627*t9426;
  t14078 = 0.24*t1929*t9426;
  t14079 = t14077 + t14078;
  t14073 = Power(t1929,2);
  t14074 = -0.24*t14073;
  t14075 = t13808 + t14074;
  t14296 = 3.2*t13811*t14039;
  t14299 = 6.4*t13572*t13898;
  t14300 = 6.4*t13894*t13826;
  t14301 = 6.4*t13572*t14028;
  t14302 = 6.4*t13894*t14039;
  t14083 = t14034 + t14035 + t14036 + t14037 + t14040 + t14043;
  t14306 = 3.2*t13572*t13985;
  t14089 = t14088*t13570;
  t14092 = t13823*t14091;
  t14093 = t14089 + t14057 + t14058 + t14092;
  t14308 = 3.2*t13989*t14039;
  t14095 = -1.*t9694*t14088;
  t14096 = -1.*t13570*t14091;
  t14097 = t14095 + t14064 + t14096 + t14066;
  t14258 = 0.748*t13920;
  t14271 = Power(t13854,2);
  t14272 = 13.6*t14271;
  t14123 = t13917 + t13921 + t13922 + t13923 + t14113 + t14114 + t14115 + t14116 + t14119 + t14122;
  t14135 = Power(t13838,2);
  t14136 = -0.11*t14135;
  t14137 = t14000 + t14136;
  t14286 = 6.8*t13998*t13854;
  t14131 = -1.*t13995*t13831;
  t14132 = 0.11*t13838*t13831;
  t14133 = t14131 + t14132;
  t14287 = 6.8*t13920*t14003;
  t14144 = t14143*t13848;
  t14149 = t13873*t14148;
  t14150 = t14144 + t14145 + t14146 + t14149;
  t14153 = -1.*t13844*t14143;
  t14155 = -1.*t13848*t14148;
  t14157 = t14153 + t14154 + t14155 + t14156;
  t14327 = -0.384*var2[6]*t14118;
  t14167 = 0.63*t13842;
  t14168 = 0.24*t13830*t13842;
  t14169 = -1.*t13861*t13842;
  t14170 = t14167 + t14168 + t14169;
  t14328 = 3.2*t13870*t13850;
  t14163 = Power(t13830,2);
  t14164 = -0.24*t14163;
  t14165 = t13856 + t14164 + t13862;
  t14329 = 3.2*t13865*t14118;
  t14332 = 6.4*t13850*t13929;
  t14333 = 6.4*t13925*t13876;
  t14334 = 6.4*t13850*t14107;
  t14335 = 6.4*t13925*t14118;
  t14174 = t14113 + t14114 + t14115 + t14116 + t14119 + t14122;
  t14341 = 3.2*t13850*t14014;
  t14180 = t14179*t13848;
  t14183 = t13873*t14182;
  t14184 = t14180 + t14145 + t14183 + t14146;
  t14343 = 3.2*t14018*t14118;
  t14186 = -1.*t13844*t14179;
  t14187 = -1.*t13848*t14182;
  t14188 = t14186 + t14154 + t14187 + t14156;
  t14221 = -0.5*var2[2]*t14220;
  t13582 = -0.384*var2[4]*t13572;
  t13812 = 3.2*t13811*t13572;
  t13827 = 3.2*t13820*t13826;
  t13828 = t13609 + t13812 + t13827;
  t13829 = -0.5*var2[3]*t13828;
  t13851 = -0.384*var2[6]*t13850;
  t13866 = 3.2*t13865*t13850;
  t13877 = 3.2*t13870*t13876;
  t13878 = t13855 + t13866 + t13877;
  t13879 = -0.5*var2[5]*t13878;
  t14362 = 13.6*t13882*t13608;
  t14363 = 6.4*t13572*t13894;
  t14364 = 6.4*t13898*t13826;
  t14365 = 13.6*t13913*t13854;
  t14366 = 6.4*t13850*t13925;
  t14367 = 6.4*t13929*t13876;
  t14368 = t14194 + t14362 + t14363 + t14364 + t14198 + t14365 + t14366 + t14367;
  t13970 = -2.88*t13483;
  t13986 = 3.2*t13826*t13985;
  t13990 = 3.2*t13572*t13989;
  t14015 = 3.2*t13876*t14014;
  t14019 = 3.2*t13850*t14018;
  t14020 = t13970 + t13976 + t13986 + t13990 + t13999 + t14004 + t14015 + t14019;
  t14282 = 2.88*t1871;
  t14284 = 3.2*t13907*t13985;
  t14285 = 3.2*t13904*t13989;
  t14288 = 3.2*t13938*t14014;
  t14289 = 3.2*t13935*t14018;
  t14290 = t14282 + t14283 + t14284 + t14285 + t14286 + t14287 + t14288 + t14289;
  t14061 = 3.2*t13894*t14060;
  t14068 = 3.2*t13898*t14067;
  t14069 = t13976 + t14052 + t14061 + t14062 + t14068;
  t14307 = 3.2*t13572*t14060;
  t14309 = 3.2*t13826*t14067;
  t14310 = t14283 + t14306 + t14307 + t14308 + t14309;
  t14094 = 3.2*t13894*t14093;
  t14098 = 3.2*t13898*t14097;
  t14099 = t14052 + t14094 + t14062 + t14098;
  t14321 = 3.2*t13572*t14093;
  t14322 = 3.2*t13826*t14097;
  t14323 = t14306 + t14321 + t14308 + t14322;
  t14134 = 6.8*t13913*t14133;
  t14138 = 6.8*t14137*t13916;
  t14151 = 3.2*t13925*t14150;
  t14158 = 3.2*t13929*t14157;
  t14159 = t13999 + t14134 + t14138 + t14004 + t14139 + t14151 + t14152 + t14158;
  t14339 = 6.8*t14137*t13913;
  t14340 = 6.8*t14133*t13854;
  t14342 = 3.2*t13850*t14150;
  t14344 = 3.2*t13876*t14157;
  t14345 = t14339 + t14286 + t14340 + t14287 + t14341 + t14342 + t14343 + t14344;
  t14185 = 3.2*t13925*t14184;
  t14189 = 3.2*t13929*t14188;
  t14190 = t14139 + t14185 + t14152 + t14189;
  t14356 = 3.2*t13850*t14184;
  t14357 = 3.2*t13876*t14188;
  t14358 = t14341 + t14356 + t14343 + t14357;
  t14236 = -2.88*t1871;
  t14237 = 6.8*t13882*t13975;
  t14238 = 3.2*t13898*t13985;
  t14239 = 3.2*t13894*t13989;
  t14240 = 6.8*t13998*t13916;
  t14241 = 6.8*t13913*t14003;
  t14242 = 3.2*t13929*t14014;
  t14243 = 3.2*t13925*t14018;
  t14244 = t14236 + t14237 + t14238 + t14239 + t14240 + t14241 + t14242 + t14243;
  t14021 = -0.5*var2[2]*t14020;
  t14253 = 3.2*t13820*t13907;
  t14254 = 3.2*t13811*t13904;
  t14255 = t14252 + t14253 + t14254;
  t14032 = t13609 + t14030 + t14031;
  t14297 = t14252 + t14295 + t14296;
  t14076 = 3.2*t14075*t13898;
  t14080 = 3.2*t14079*t13894;
  t14081 = t14076 + t14030 + t14080 + t14031;
  t14314 = 3.2*t14079*t13572;
  t14315 = 3.2*t14075*t13826;
  t14316 = t14295 + t14314 + t14315 + t14296;
  t14247 = -0.5*var2[2]*t14226;
  t14374 = -0.5*var2[2]*t13828;
  t14421 = -0.384*var2[0]*t14028;
  t14422 = -0.384*var2[1]*t14039;
  t14423 = t14421 + t14422;
  t14424 = var2[2]*t14423;
  t14248 = -0.384*var2[2]*t13894;
  t14375 = -0.384*var2[2]*t13572;
  t14259 = 3.2*t13870*t13938;
  t14260 = 3.2*t13865*t13935;
  t14261 = t14258 + t14259 + t14260;
  t14111 = t13855 + t14109 + t14110;
  t14330 = t14258 + t14328 + t14329;
  t14166 = 3.2*t14165*t13929;
  t14171 = 3.2*t14170*t13925;
  t14172 = t14166 + t14171 + t14109 + t14110;
  t14349 = 3.2*t14170*t13850;
  t14350 = 3.2*t14165*t13876;
  t14351 = t14349 + t14328 + t14350 + t14329;
  t14249 = -0.5*var2[2]*t14232;
  t14376 = -0.5*var2[2]*t13878;
  t14447 = -0.384*var2[0]*t14107;
  t14448 = -0.384*var2[1]*t14118;
  t14449 = t14447 + t14448;
  t14450 = var2[2]*t14449;
  t14250 = -0.384*var2[2]*t13925;
  t14377 = -0.384*var2[2]*t13850;
  p_output1[0]=(t13582 + t13829 + t13851 + t13879 + t14021 - 0.5*(6.4*t13572*t13901 + 6.4*t13826*t13909 + 6.4*t13850*t13932 + 6.4*t13876*t13940 + t13945 + t13946 + t13948 + t13949 + 6.4*t13951 + 6.4*t13953 + t13957 + t13958 + t13960 + t13961 + 6.4*t13963 + 6.4*t13965)*var2[0] - 0.5*t13942*var2[1])*var2[2];
  p_output1[1]=var2[2]*(t14029 - 0.5*(t13945 + t13946 + t13948 + t13949 + t14046 + t14047 + t14048 + t14049)*var2[0] - 0.5*t14044*var2[1] - 0.5*t14069*var2[2] - 0.5*t14032*var2[3]);
  p_output1[2]=var2[2]*(t14029 - 0.5*(t14046 + t14047 + t14048 + t14049)*var2[0] - 0.5*t14083*var2[1] - 0.5*t14099*var2[2] - 0.5*t14081*var2[3]);
  p_output1[3]=var2[2]*(t14108 - 0.5*(t13957 + t13958 + t13960 + t13961 + t14125 + t14126 + t14127 + t14128)*var2[0] - 0.5*t14123*var2[1] - 0.5*t14159*var2[2] - 0.5*t14111*var2[5]);
  p_output1[4]=var2[2]*(t14108 - 0.5*(t14125 + t14126 + t14127 + t14128)*var2[0] - 0.5*t14174*var2[1] - 0.5*t14190*var2[2] - 0.5*t14172*var2[5]);
  p_output1[5]=-0.5*t14202*var2[2];
  p_output1[6]=t14221;
  p_output1[7]=-0.5*t14202*var2[0] - 0.5*t14220*var2[1] - 1.*t14244*var2[2] - 0.5*t14226*var2[3] - 0.384*t13894*var2[4] - 0.5*t14232*var2[5] - 0.384*t13925*var2[6];
  p_output1[8]=t14247;
  p_output1[9]=t14248;
  p_output1[10]=t14249;
  p_output1[11]=t14250;
  p_output1[12]=var2[2]*(-0.5*t13942*var2[0] - 0.5*(6.4*Power(t13572,2) + 6.4*Power(t13826,2) + 6.4*Power(t13850,2) + 6.4*Power(t13876,2) + 6.4*t13894*t13904 + 6.4*t13898*t13907 + 6.4*t13925*t13935 + 6.4*t13929*t13938 + t13945 + t13946 + t13949 + t13957 + t13958 + t13961 + t14264 + t14272)*var2[1] - 0.5*t14290*var2[2] - 0.5*t14255*var2[3] - 0.384*t13904*var2[4] - 0.5*t14261*var2[5] - 0.384*t13935*var2[6]);
  p_output1[13]=var2[2]*(t14294 - 0.5*t14044*var2[0] - 0.5*(t13945 + t13946 + t13949 + t14264 + t14299 + t14300 + t14301 + t14302)*var2[1] - 0.5*t14310*var2[2] - 0.5*t14297*var2[3]);
  p_output1[14]=var2[2]*(t14294 - 0.5*t14083*var2[0] - 0.5*(t14299 + t14300 + t14301 + t14302)*var2[1] - 0.5*t14323*var2[2] - 0.5*t14316*var2[3]);
  p_output1[15]=var2[2]*(t14327 - 0.5*t14123*var2[0] - 0.5*(t13957 + t13958 + t13961 + t14272 + t14332 + t14333 + t14334 + t14335)*var2[1] - 0.5*t14345*var2[2] - 0.5*t14330*var2[5]);
  p_output1[16]=var2[2]*(t14327 - 0.5*t14174*var2[0] - 0.5*(t14332 + t14333 + t14334 + t14335)*var2[1] - 0.5*t14358*var2[2] - 0.5*t14351*var2[5]);
  p_output1[17]=t14221;
  p_output1[18]=-0.5*t14368*var2[2];
  p_output1[19]=t13582 + t13829 + t13851 + t13879 - 0.5*t14220*var2[0] - 0.5*t14368*var2[1] - 1.*t14020*var2[2];
  p_output1[20]=t14374;
  p_output1[21]=t14375;
  p_output1[22]=t14376;
  p_output1[23]=t14377;
  p_output1[24]=(-0.5*t14020*var2[0] - 0.5*t14290*var2[1])*var2[2];
  p_output1[25]=(-0.5*t14069*var2[0] - 0.5*t14310*var2[1])*var2[2];
  p_output1[26]=(-0.5*t14099*var2[0] - 0.5*t14323*var2[1])*var2[2];
  p_output1[27]=(-0.5*t14159*var2[0] - 0.5*t14345*var2[1])*var2[2];
  p_output1[28]=(-0.5*t14190*var2[0] - 0.5*t14358*var2[1])*var2[2];
  p_output1[29]=-0.5*t14244*var2[2];
  p_output1[30]=t14021;
  p_output1[31]=-0.5*t14244*var2[0] - 0.5*t14020*var2[1];
  p_output1[32]=(-0.5*t13828*var2[0] - 0.5*t14255*var2[1])*var2[2];
  p_output1[33]=(-0.5*t14032*var2[0] - 0.5*t14297*var2[1])*var2[2];
  p_output1[34]=(-0.5*t14081*var2[0] - 0.5*t14316*var2[1])*var2[2];
  p_output1[35]=t14247;
  p_output1[36]=t14374;
  p_output1[37]=-0.5*t14226*var2[0] - 0.5*t13828*var2[1];
  p_output1[38]=(-0.384*t13572*var2[0] - 0.384*t13904*var2[1])*var2[2];
  p_output1[39]=t14424;
  p_output1[40]=t14424;
  p_output1[41]=t14248;
  p_output1[42]=t14375;
  p_output1[43]=-0.384*t13894*var2[0] - 0.384*t13572*var2[1];
  p_output1[44]=(-0.5*t13878*var2[0] - 0.5*t14261*var2[1])*var2[2];
  p_output1[45]=(-0.5*t14111*var2[0] - 0.5*t14330*var2[1])*var2[2];
  p_output1[46]=(-0.5*t14172*var2[0] - 0.5*t14351*var2[1])*var2[2];
  p_output1[47]=t14249;
  p_output1[48]=t14376;
  p_output1[49]=-0.5*t14232*var2[0] - 0.5*t13878*var2[1];
  p_output1[50]=(-0.384*t13850*var2[0] - 0.384*t13935*var2[1])*var2[2];
  p_output1[51]=t14450;
  p_output1[52]=t14450;
  p_output1[53]=t14250;
  p_output1[54]=t14377;
  p_output1[55]=-0.384*t13925*var2[0] - 0.384*t13850*var2[1];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 56, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec3_five_link_walker.hh"

namespace LeftStance
{

void J_Ce2_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
