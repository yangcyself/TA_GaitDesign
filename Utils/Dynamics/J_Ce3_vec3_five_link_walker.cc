/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 17:57:13 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t13;
  double t5885;
  double t6758;
  double t6732;
  double t7033;
  double t7054;
  double t7135;
  double t7136;
  double t7144;
  double t7179;
  double t7181;
  double t7184;
  double t7206;
  double t7209;
  double t7280;
  double t7286;
  double t7287;
  double t7219;
  double t7257;
  double t7273;
  double t7038;
  double t7067;
  double t7068;
  double t7288;
  double t7290;
  double t7352;
  double t9691;
  double t9816;
  double t10627;
  double t10716;
  double t10723;
  double t10726;
  double t10743;
  double t10813;
  double t10839;
  double t10905;
  double t12019;
  double t12079;
  double t12379;
  double t12426;
  double t12435;
  double t12442;
  double t12497;
  double t15533;
  double t15536;
  double t15537;
  double t12305;
  double t15508;
  double t15509;
  double t15526;
  double t10838;
  double t10850;
  double t10862;
  double t15540;
  double t15541;
  double t15542;
  double t6819;
  double t6872;
  double t6901;
  double t6905;
  double t6913;
  double t9053;
  double t7274;
  double t7365;
  double t8406;
  double t9275;
  double t9281;
  double t9341;
  double t10765;
  double t10769;
  double t10770;
  double t10776;
  double t10780;
  double t10784;
  double t10785;
  double t10791;
  double t10795;
  double t10806;
  double t15560;
  double t15527;
  double t15543;
  double t15544;
  double t15565;
  double t15566;
  double t15567;
  double t6530;
  double t6763;
  double t6777;
  double t6942;
  double t7155;
  double t15670;
  double t15671;
  double t8950;
  double t15674;
  double t15675;
  double t15676;
  double t15683;
  double t15684;
  double t15685;
  double t15588;
  double t15589;
  double t15591;
  double t15593;
  double t9067;
  double t15677;
  double t15678;
  double t15679;
  double t15680;
  double t15681;
  double t15602;
  double t7081;
  double t7158;
  double t15692;
  double t15693;
  double t15694;
  double t15695;
  double t15697;
  double t15673;
  double t15686;
  double t15687;
  double t15688;
  double t15689;
  double t15690;
  double t15691;
  double t15733;
  double t15734;
  double t15736;
  double t15737;
  double t15704;
  double t15735;
  double t15738;
  double t15739;
  double t15709;
  double t15710;
  double t15711;
  double t15742;
  double t15744;
  double t15746;
  double t9740;
  double t9841;
  double t10598;
  double t10773;
  double t10812;
  double t12173;
  double t15824;
  double t15825;
  double t15558;
  double t15827;
  double t15829;
  double t15830;
  double t15831;
  double t15835;
  double t15836;
  double t15840;
  double t15841;
  double t15842;
  double t15767;
  double t15768;
  double t15808;
  double t15607;
  double t15763;
  double t15764;
  double t15765;
  double t15608;
  double t15609;
  double t15611;
  double t15612;
  double t15564;
  double t15832;
  double t15833;
  double t15834;
  double t15837;
  double t15838;
  double t15616;
  double t10891;
  double t12287;
  double t15849;
  double t15850;
  double t15851;
  double t15852;
  double t15854;
  double t15826;
  double t15843;
  double t15844;
  double t15845;
  double t15846;
  double t15847;
  double t15848;
  double t15876;
  double t15877;
  double t15879;
  double t15880;
  double t15866;
  double t15878;
  double t15881;
  double t15882;
  double t15868;
  double t15869;
  double t15870;
  double t15884;
  double t15885;
  double t15886;
  double t15813;
  double t15814;
  double t15815;
  double t245;
  double t8687;
  double t9384;
  double t15557;
  double t15572;
  double t15573;
  double t15896;
  double t15897;
  double t15898;
  double t15899;
  double t15900;
  double t15901;
  double t15902;
  double t15903;
  double t15904;
  double t15905;
  double t15906;
  double t15907;
  double t15682;
  double t15701;
  double t15702;
  double t15703;
  double t15708;
  double t15716;
  double t15717;
  double t15723;
  double t15724;
  double t15732;
  double t15917;
  double t15918;
  double t15919;
  double t15913;
  double t15914;
  double t15915;
  double t15916;
  double t15920;
  double t15921;
  double t15922;
  double t15594;
  double t15944;
  double t15945;
  double t15603;
  double t15927;
  double t15928;
  double t15929;
  double t15930;
  double t15931;
  double t15932;
  double t15933;
  double t15951;
  double t15952;
  double t15948;
  double t15924;
  double t15925;
  double t15926;
  double t15980;
  double t15981;
  double t15935;
  double t15936;
  double t15937;
  double t15938;
  double t15976;
  double t15977;
  double t15978;
  double t15979;
  double t15982;
  double t15983;
  double t15942;
  double t15943;
  double t15946;
  double t15949;
  double t15989;
  double t15990;
  double t15991;
  double t15992;
  double t15993;
  double t15994;
  double t15957;
  double t15959;
  double t15960;
  double t16027;
  double t16028;
  double t16029;
  double t16030;
  double t16031;
  double t16035;
  double t16036;
  double t16037;
  double t15740;
  double t15751;
  double t15752;
  double t15754;
  double t15755;
  double t15756;
  double t15757;
  double t15759;
  double t15760;
  double t15761;
  double t15984;
  double t15985;
  double t15986;
  double t15987;
  double t15988;
  double t15995;
  double t15996;
  double t15997;
  double t15998;
  double t15999;
  double t16000;
  double t16001;
  double t16002;
  double t16003;
  double t16004;
  double t16005;
  double t16006;
  double t16007;
  double t16008;
  double t16009;
  double t16010;
  double t16011;
  double t16012;
  double t16013;
  double t16014;
  double t16015;
  double t16016;
  double t16017;
  double t16018;
  double t16019;
  double t16020;
  double t16021;
  double t16022;
  double t16023;
  double t16024;
  double t16025;
  double t16026;
  double t16048;
  double t16049;
  double t16050;
  double t16058;
  double t16059;
  double t16060;
  double t16088;
  double t16089;
  double t16090;
  double t16094;
  double t16095;
  double t16096;
  double t16097;
  double t16098;
  double t15766;
  double t15816;
  double t15839;
  double t15858;
  double t15859;
  double t15860;
  double t15861;
  double t15865;
  double t15867;
  double t15871;
  double t15872;
  double t15873;
  double t15874;
  double t15875;
  double t16113;
  double t16114;
  double t16115;
  double t16116;
  double t16109;
  double t16110;
  double t16111;
  double t16112;
  double t16117;
  double t16118;
  double t16119;
  double t16121;
  double t16122;
  double t16123;
  double t15613;
  double t16151;
  double t16152;
  double t15654;
  double t16129;
  double t16130;
  double t16131;
  double t16132;
  double t16133;
  double t16134;
  double t16135;
  double t16158;
  double t16159;
  double t16155;
  double t16125;
  double t16126;
  double t16127;
  double t16128;
  double t16198;
  double t16199;
  double t16137;
  double t16138;
  double t16139;
  double t16140;
  double t16141;
  double t16193;
  double t16194;
  double t16195;
  double t16196;
  double t16197;
  double t16200;
  double t16201;
  double t16149;
  double t16150;
  double t16153;
  double t16156;
  double t16208;
  double t16209;
  double t16210;
  double t16211;
  double t16212;
  double t16213;
  double t16214;
  double t16168;
  double t16170;
  double t16171;
  double t16166;
  double t16247;
  double t16248;
  double t16249;
  double t16250;
  double t16251;
  double t16252;
  double t16256;
  double t16257;
  double t16258;
  double t16259;
  double t15883;
  double t15887;
  double t15888;
  double t15889;
  double t15890;
  double t15891;
  double t15892;
  double t15893;
  double t15894;
  double t15895;
  double t16202;
  double t16203;
  double t16204;
  double t16205;
  double t16206;
  double t16207;
  double t16215;
  double t16216;
  double t16217;
  double t16218;
  double t16219;
  double t16220;
  double t16221;
  double t16222;
  double t16223;
  double t16224;
  double t16225;
  double t16226;
  double t16227;
  double t16228;
  double t16229;
  double t16230;
  double t16231;
  double t16232;
  double t16233;
  double t16234;
  double t16235;
  double t16236;
  double t16237;
  double t16238;
  double t16239;
  double t16240;
  double t16241;
  double t16242;
  double t16243;
  double t16244;
  double t16245;
  double t16246;
  double t16272;
  double t16273;
  double t16274;
  double t16283;
  double t16284;
  double t16285;
  double t16313;
  double t16314;
  double t16315;
  double t16319;
  double t16320;
  double t16321;
  double t16322;
  double t16323;
  t13 = Cos(var1[2]);
  t5885 = Cos(var1[3]);
  t6758 = Sin(var1[3]);
  t6732 = Sin(var1[2]);
  t7033 = Cos(var1[4]);
  t7054 = Sin(var1[4]);
  t7135 = t5885*t7033;
  t7136 = -1.*t6758*t7054;
  t7144 = t7135 + t7136;
  t7179 = -1.*t7033;
  t7181 = 1. + t7179;
  t7184 = 0.4*t7181;
  t7206 = 0.64*t7033;
  t7209 = t7184 + t7206;
  t7280 = -1.*t7033*t6758;
  t7286 = -1.*t5885*t7054;
  t7287 = t7280 + t7286;
  t7219 = t7209*t6758;
  t7257 = 0.24*t5885*t7054;
  t7273 = t7219 + t7257;
  t7038 = t7033*t6758;
  t7067 = t5885*t7054;
  t7068 = t7038 + t7067;
  t7288 = t5885*t7209;
  t7290 = -0.24*t6758*t7054;
  t7352 = t7288 + t7290;
  t9691 = Cos(var1[5]);
  t9816 = Sin(var1[5]);
  t10627 = -1.*t9691;
  t10716 = 1. + t10627;
  t10723 = 0.63*t10716;
  t10726 = 0.74*t9691;
  t10743 = t10723 + t10726;
  t10813 = Cos(var1[6]);
  t10839 = Sin(var1[6]);
  t10905 = t9691*t10813;
  t12019 = -1.*t9816*t10839;
  t12079 = t10905 + t12019;
  t12379 = -1.*t10813;
  t12426 = 1. + t12379;
  t12435 = 1.03*t12426;
  t12442 = 1.27*t10813;
  t12497 = t12435 + t12442;
  t15533 = -1.*t10813*t9816;
  t15536 = -1.*t9691*t10839;
  t15537 = t15533 + t15536;
  t12305 = -0.63*t9816;
  t15508 = t12497*t9816;
  t15509 = 0.24*t9691*t10839;
  t15526 = t12305 + t15508 + t15509;
  t10838 = t10813*t9816;
  t10850 = t9691*t10839;
  t10862 = t10838 + t10850;
  t15540 = t9691*t12497;
  t15541 = -0.24*t9816*t10839;
  t15542 = t10723 + t15540 + t15541;
  t6819 = Power(t5885,2);
  t6872 = 0.11*t6819;
  t6901 = Power(t6758,2);
  t6905 = 0.11*t6901;
  t6913 = t6872 + t6905;
  t9053 = -1.*t13*t7144;
  t7274 = -1.*t7273*t7144;
  t7365 = -1.*t7287*t7352;
  t8406 = t7274 + t7365;
  t9275 = t7273*t7068;
  t9281 = t7144*t7352;
  t9341 = t9275 + t9281;
  t10765 = t10743*t9816;
  t10769 = -0.11*t9691*t9816;
  t10770 = t10765 + t10769;
  t10776 = -1.*t13*t9691;
  t10780 = t6732*t9816;
  t10784 = t10776 + t10780;
  t10785 = t10743*t9691;
  t10791 = Power(t9816,2);
  t10795 = 0.11*t10791;
  t10806 = t10785 + t10795;
  t15560 = -1.*t13*t12079;
  t15527 = -1.*t15526*t12079;
  t15543 = -1.*t15537*t15542;
  t15544 = t15527 + t15543;
  t15565 = t15526*t10862;
  t15566 = t12079*t15542;
  t15567 = t15565 + t15566;
  t6530 = -1.*t13*t5885;
  t6763 = t6732*t6758;
  t6777 = t6530 + t6763;
  t6942 = -6.8*t6777*t6913;
  t7155 = -1.*t6732*t7144;
  t15670 = t13*t7287;
  t15671 = t15670 + t7155;
  t8950 = -1.*t6732*t7287;
  t15674 = -1.*t7209*t6758;
  t15675 = -0.24*t5885*t7054;
  t15676 = t15674 + t15675;
  t15683 = -1.*t5885*t7033;
  t15684 = t6758*t7054;
  t15685 = t15683 + t15684;
  t15588 = t5885*t6732;
  t15589 = t13*t6758;
  t15591 = t15588 + t15589;
  t15593 = -6.8*t15591*t6913;
  t9067 = t8950 + t9053;
  t15677 = t15676*t7144;
  t15678 = t7273*t7144;
  t15679 = t7287*t7352;
  t15680 = t7068*t7352;
  t15681 = t15677 + t15678 + t15679 + t15680;
  t15602 = -1.*t13*t7287;
  t7081 = -1.*t13*t7068;
  t7158 = t7081 + t7155;
  t15692 = -1.*t7287*t15676;
  t15693 = -1.*t7287*t7273;
  t15694 = -1.*t7144*t7352;
  t15695 = -1.*t7352*t15685;
  t15697 = t15692 + t15693 + t15694 + t15695;
  t15673 = -3.2*t15671*t8406;
  t15686 = t13*t15685;
  t15687 = t8950 + t15686;
  t15688 = -3.2*t9341*t15687;
  t15689 = -1.*t6732*t7068;
  t15690 = t13*t7144;
  t15691 = t15689 + t15690;
  t15733 = -0.24*t7033*t6758;
  t15734 = t15733 + t15675;
  t15736 = 0.24*t5885*t7033;
  t15737 = t15736 + t7290;
  t15704 = -3.2*t9067*t8406;
  t15735 = t15734*t7144;
  t15738 = t7068*t15737;
  t15739 = t15735 + t15678 + t15679 + t15738;
  t15709 = -1.*t6732*t15685;
  t15710 = t15602 + t15709;
  t15711 = -3.2*t9341*t15710;
  t15742 = -1.*t7287*t15734;
  t15744 = -1.*t7144*t15737;
  t15746 = t15742 + t15693 + t15744 + t15695;
  t9740 = -1.*t9691*t6732;
  t9841 = -1.*t13*t9816;
  t10598 = t9740 + t9841;
  t10773 = -6.8*t10598*t10770;
  t10812 = -6.8*t10784*t10806;
  t12173 = -1.*t6732*t12079;
  t15824 = t13*t15537;
  t15825 = t15824 + t12173;
  t15558 = -1.*t6732*t15537;
  t15827 = 0.63*t9816;
  t15829 = -1.*t12497*t9816;
  t15830 = -0.24*t9691*t10839;
  t15831 = t15827 + t15829 + t15830;
  t15835 = -0.63*t9691;
  t15836 = t15835 + t15540 + t15541;
  t15840 = -1.*t9691*t10813;
  t15841 = t9816*t10839;
  t15842 = t15840 + t15841;
  t15767 = Power(t9691,2);
  t15768 = -0.11*t15767;
  t15808 = t10785 + t15768;
  t15607 = -6.8*t10770*t10784;
  t15763 = -1.*t10743*t9816;
  t15764 = 0.11*t9691*t9816;
  t15765 = t15763 + t15764;
  t15608 = t9691*t6732;
  t15609 = t13*t9816;
  t15611 = t15608 + t15609;
  t15612 = -6.8*t15611*t10806;
  t15564 = t15558 + t15560;
  t15832 = t15831*t12079;
  t15833 = t15526*t12079;
  t15834 = t15537*t15542;
  t15837 = t10862*t15836;
  t15838 = t15832 + t15833 + t15834 + t15837;
  t15616 = -1.*t13*t15537;
  t10891 = -1.*t13*t10862;
  t12287 = t10891 + t12173;
  t15849 = -1.*t15537*t15831;
  t15850 = -1.*t15537*t15526;
  t15851 = -1.*t12079*t15836;
  t15852 = -1.*t15542*t15842;
  t15854 = t15849 + t15850 + t15851 + t15852;
  t15826 = -3.2*t15825*t15544;
  t15843 = t13*t15842;
  t15844 = t15558 + t15843;
  t15845 = -3.2*t15567*t15844;
  t15846 = -1.*t6732*t10862;
  t15847 = t13*t12079;
  t15848 = t15846 + t15847;
  t15876 = -0.24*t10813*t9816;
  t15877 = t15876 + t15830;
  t15879 = 0.24*t9691*t10813;
  t15880 = t15879 + t15541;
  t15866 = -3.2*t15564*t15544;
  t15878 = t15877*t12079;
  t15881 = t10862*t15880;
  t15882 = t15878 + t15833 + t15881 + t15834;
  t15868 = -1.*t6732*t15842;
  t15869 = t15616 + t15868;
  t15870 = -3.2*t15567*t15869;
  t15884 = -1.*t15537*t15877;
  t15885 = -1.*t12079*t15880;
  t15886 = t15884 + t15850 + t15885 + t15852;
  t15813 = t13*t9691;
  t15814 = -1.*t6732*t9816;
  t15815 = t15813 + t15814;
  t245 = 2.88*t13;
  t8687 = -3.2*t7158*t8406;
  t9384 = -3.2*t9067*t9341;
  t15557 = -3.2*t12287*t15544;
  t15572 = -3.2*t15564*t15567;
  t15573 = t245 + t6942 + t8687 + t9384 + t10773 + t10812 + t15557 + t15572;
  t15896 = 2.88*t6732;
  t15897 = -1.*t5885*t6732;
  t15898 = -1.*t13*t6758;
  t15899 = t15897 + t15898;
  t15900 = -6.8*t15899*t6913;
  t15901 = -3.2*t15691*t8406;
  t15902 = -3.2*t15671*t9341;
  t15903 = -6.8*t10770*t15815;
  t15904 = -6.8*t10598*t10806;
  t15905 = -3.2*t15848*t15544;
  t15906 = -3.2*t15825*t15567;
  t15907 = t15896 + t15900 + t15901 + t15902 + t15903 + t15904 + t15905 + t15906;
  t15682 = -3.2*t15671*t15681;
  t15701 = -3.2*t15691*t15697;
  t15702 = t6942 + t15673 + t15682 + t15688 + t15701;
  t15703 = -0.5*var2[0]*t15702;
  t15708 = -3.2*t9067*t15681;
  t15716 = -3.2*t7158*t15697;
  t15717 = t15593 + t15704 + t15708 + t15711 + t15716;
  t15723 = -0.5*var2[1]*t15717;
  t15724 = t15703 + t15723;
  t15732 = var2[2]*t15724;
  t15917 = -1.*t5885*t7209;
  t15918 = 0.24*t6758*t7054;
  t15919 = t15917 + t15918;
  t15913 = 2.*t7287*t15676;
  t15914 = t7287*t7273;
  t15915 = t15676*t7068;
  t15916 = 2.*t7144*t7352;
  t15920 = t7144*t15919;
  t15921 = t7352*t15685;
  t15922 = t15913 + t15914 + t15915 + t15916 + t15920 + t15921;
  t15594 = t6732*t7068;
  t15944 = t6732*t15685;
  t15945 = t15670 + t15944;
  t15603 = t6732*t7144;
  t15927 = -1.*t15676*t7144;
  t15928 = -2.*t7287*t7352;
  t15929 = -1.*t7068*t7352;
  t15930 = -1.*t7287*t15919;
  t15931 = -2.*t15676*t15685;
  t15932 = -1.*t7273*t15685;
  t15933 = t15927 + t15928 + t15929 + t15930 + t15931 + t15932;
  t15951 = t6732*t7287;
  t15952 = t15951 + t15690;
  t15948 = t13*t7068;
  t15924 = t7209*t7054;
  t15925 = -0.24*t7033*t7054;
  t15926 = t15924 + t15925;
  t15980 = -0.24*t5885*t7033;
  t15981 = t15980 + t15918;
  t15935 = t7209*t7033;
  t15936 = Power(t7054,2);
  t15937 = 0.24*t15936;
  t15938 = t15935 + t15937;
  t15976 = t7287*t15676;
  t15977 = t7287*t15734;
  t15978 = t15734*t7068;
  t15979 = t7144*t15737;
  t15982 = t7144*t15981;
  t15983 = t15976 + t15977 + t15914 + t15978 + t9281 + t15979 + t15982 + t15921;
  t15942 = t15594 + t15686;
  t15943 = -3.2*t9341*t15942;
  t15946 = -3.2*t8406*t15945;
  t15949 = t15948 + t15603;
  t15989 = -1.*t15734*t7144;
  t15990 = -1.*t7287*t15737;
  t15991 = -1.*t7287*t15981;
  t15992 = -1.*t15676*t15685;
  t15993 = -1.*t15734*t15685;
  t15994 = t15989 + t7365 + t15929 + t15990 + t15991 + t15992 + t15993 + t15932;
  t15957 = -3.2*t8406*t15687;
  t15959 = t15948 + t15709;
  t15960 = -3.2*t9341*t15959;
  t16027 = -3.2*t15952*t8406;
  t16028 = -3.2*t15952*t15681;
  t16029 = -3.2*t9341*t15945;
  t16030 = -3.2*t15949*t15697;
  t16031 = t15900 + t16027 + t16028 + t16029 + t16030;
  t16035 = -3.2*t15938*t15681;
  t16036 = -3.2*t15926*t15697;
  t16037 = t16035 + t16036;
  t15740 = -3.2*t15671*t15739;
  t15751 = -3.2*t15691*t15746;
  t15752 = t15673 + t15740 + t15688 + t15751;
  t15754 = -0.5*var2[0]*t15752;
  t15755 = -3.2*t9067*t15739;
  t15756 = -3.2*t7158*t15746;
  t15757 = t15704 + t15755 + t15711 + t15756;
  t15759 = -0.5*var2[1]*t15757;
  t15760 = t15754 + t15759;
  t15761 = var2[2]*t15760;
  t15984 = 0.384*var2[4]*t15983;
  t15985 = -1.*t7209*t7054;
  t15986 = 0.24*t7033*t7054;
  t15987 = t15985 + t15986;
  t15988 = -3.2*t15987*t15681;
  t15995 = -3.2*t15926*t15994;
  t15996 = Power(t7033,2);
  t15997 = -0.24*t15996;
  t15998 = t15935 + t15997;
  t15999 = -3.2*t15998*t15697;
  t16000 = -3.2*t15938*t15983;
  t16001 = t15988 + t15995 + t15999 + t16000;
  t16002 = -0.5*var2[3]*t16001;
  t16003 = -3.2*t15681*t15945;
  t16004 = -3.2*t15739*t15945;
  t16005 = -3.2*t15949*t15994;
  t16006 = -3.2*t15952*t15697;
  t16007 = -3.2*t15952*t15746;
  t16008 = -3.2*t15952*t15983;
  t16009 = t15943 + t15946 + t16003 + t16004 + t16005 + t16006 + t16007 + t16008;
  t16010 = -0.5*var2[0]*t16009;
  t16011 = -3.2*t15681*t15687;
  t16012 = -3.2*t15739*t15687;
  t16013 = -3.2*t15691*t15994;
  t16014 = -3.2*t15671*t15697;
  t16015 = -3.2*t15671*t15746;
  t16016 = -3.2*t15671*t15983;
  t16017 = t15957 + t16011 + t16012 + t15960 + t16013 + t16014 + t16015 + t16016;
  t16018 = -0.5*var2[1]*t16017;
  t16019 = -6.4*t15681*t15739;
  t16020 = -6.4*t8406*t15994;
  t16021 = -6.4*t15697*t15746;
  t16022 = -6.4*t9341*t15983;
  t16023 = t16019 + t16020 + t16021 + t16022;
  t16024 = -0.5*var2[2]*t16023;
  t16025 = t15984 + t16002 + t16010 + t16018 + t16024;
  t16026 = var2[2]*t16025;
  t16048 = 2.*t7287*t15734;
  t16049 = 2.*t7144*t15737;
  t16050 = t16048 + t15914 + t15978 + t16049 + t15982 + t15921;
  t16058 = -2.*t7287*t15737;
  t16059 = -2.*t15734*t15685;
  t16060 = t15989 + t15929 + t16058 + t15991 + t16059 + t15932;
  t16088 = -3.2*t15952*t15739;
  t16089 = -3.2*t15949*t15746;
  t16090 = t16027 + t16088 + t16029 + t16089;
  t16094 = -3.2*t15998*t8406;
  t16095 = -3.2*t15987*t9341;
  t16096 = -3.2*t15938*t15739;
  t16097 = -3.2*t15926*t15746;
  t16098 = t16094 + t16095 + t16096 + t16097;
  t15766 = -6.8*t10598*t15765;
  t15816 = -6.8*t15808*t15815;
  t15839 = -3.2*t15825*t15838;
  t15858 = -3.2*t15848*t15854;
  t15859 = t10773 + t15766 + t15816 + t10812 + t15826 + t15839 + t15845 + t15858;
  t15860 = -0.5*var2[0]*t15859;
  t15861 = -6.8*t15808*t10598;
  t15865 = -6.8*t15765*t10784;
  t15867 = -3.2*t15564*t15838;
  t15871 = -3.2*t12287*t15854;
  t15872 = t15861 + t15607 + t15865 + t15612 + t15866 + t15867 + t15870 + t15871;
  t15873 = -0.5*var2[1]*t15872;
  t15874 = t15860 + t15873;
  t15875 = var2[2]*t15874;
  t16113 = 0.63*t9691;
  t16114 = -1.*t9691*t12497;
  t16115 = 0.24*t9816*t10839;
  t16116 = t16113 + t16114 + t16115;
  t16109 = 2.*t15537*t15831;
  t16110 = t15537*t15526;
  t16111 = t15831*t10862;
  t16112 = 2.*t12079*t15836;
  t16117 = t12079*t16116;
  t16118 = t15542*t15842;
  t16119 = t16109 + t16110 + t16111 + t16112 + t16117 + t16118;
  t16121 = -1.*t10743*t9691;
  t16122 = 0.11*t15767;
  t16123 = t16121 + t16122;
  t15613 = t6732*t10862;
  t16151 = t6732*t15842;
  t16152 = t15824 + t16151;
  t15654 = t6732*t12079;
  t16129 = -1.*t15831*t12079;
  t16130 = -1.*t10862*t15542;
  t16131 = -2.*t15537*t15836;
  t16132 = -1.*t15537*t16116;
  t16133 = -2.*t15831*t15842;
  t16134 = -1.*t15526*t15842;
  t16135 = t16129 + t16130 + t16131 + t16132 + t16133 + t16134;
  t16158 = t6732*t15537;
  t16159 = t16158 + t15847;
  t16155 = t13*t10862;
  t16125 = -0.63*t10839;
  t16126 = -0.24*t10813*t10839;
  t16127 = t12497*t10839;
  t16128 = t16125 + t16126 + t16127;
  t16198 = -0.24*t9691*t10813;
  t16199 = t16198 + t16115;
  t16137 = -0.63*t10813;
  t16138 = t10813*t12497;
  t16139 = Power(t10839,2);
  t16140 = 0.24*t16139;
  t16141 = t16137 + t16138 + t16140;
  t16193 = t15537*t15877;
  t16194 = t15537*t15831;
  t16195 = t15877*t10862;
  t16196 = t12079*t15880;
  t16197 = t12079*t15836;
  t16200 = t12079*t16199;
  t16201 = t16193 + t16194 + t16110 + t16195 + t16196 + t16197 + t16200 + t16118;
  t16149 = t15613 + t15843;
  t16150 = -3.2*t15567*t16149;
  t16153 = -3.2*t15544*t16152;
  t16156 = t16155 + t15654;
  t16208 = -1.*t15877*t12079;
  t16209 = -1.*t15537*t15880;
  t16210 = -1.*t15537*t15836;
  t16211 = -1.*t15537*t16199;
  t16212 = -1.*t15877*t15842;
  t16213 = -1.*t15831*t15842;
  t16214 = t16208 + t16209 + t16130 + t16210 + t16211 + t16212 + t16213 + t16134;
  t16168 = -3.2*t15544*t15844;
  t16170 = t16155 + t15868;
  t16171 = -3.2*t15567*t16170;
  t16166 = -6.8*t15765*t15815;
  t16247 = -6.8*t15808*t15611;
  t16248 = -3.2*t16159*t15544;
  t16249 = -3.2*t16159*t15838;
  t16250 = -3.2*t15567*t16152;
  t16251 = -3.2*t16156*t15854;
  t16252 = t16247 + t15903 + t16166 + t15904 + t16248 + t16249 + t16250 + t16251;
  t16256 = -0.748*t15765;
  t16257 = -3.2*t16141*t15838;
  t16258 = -3.2*t16128*t15854;
  t16259 = t16256 + t16257 + t16258;
  t15883 = -3.2*t15825*t15882;
  t15887 = -3.2*t15848*t15886;
  t15888 = t15826 + t15883 + t15845 + t15887;
  t15889 = -0.5*var2[0]*t15888;
  t15890 = -3.2*t15564*t15882;
  t15891 = -3.2*t12287*t15886;
  t15892 = t15866 + t15890 + t15870 + t15891;
  t15893 = -0.5*var2[1]*t15892;
  t15894 = t15889 + t15893;
  t15895 = var2[2]*t15894;
  t16202 = 0.384*var2[6]*t16201;
  t16203 = 0.63*t10839;
  t16204 = 0.24*t10813*t10839;
  t16205 = -1.*t12497*t10839;
  t16206 = t16203 + t16204 + t16205;
  t16207 = -3.2*t16206*t15838;
  t16215 = -3.2*t16128*t16214;
  t16216 = Power(t10813,2);
  t16217 = -0.24*t16216;
  t16218 = t16137 + t16217 + t16138;
  t16219 = -3.2*t16218*t15854;
  t16220 = -3.2*t16141*t16201;
  t16221 = t16207 + t16215 + t16219 + t16220;
  t16222 = -0.5*var2[5]*t16221;
  t16223 = -3.2*t15882*t16152;
  t16224 = -3.2*t15838*t16152;
  t16225 = -3.2*t16156*t16214;
  t16226 = -3.2*t16159*t15886;
  t16227 = -3.2*t16159*t15854;
  t16228 = -3.2*t16159*t16201;
  t16229 = t16150 + t16153 + t16223 + t16224 + t16225 + t16226 + t16227 + t16228;
  t16230 = -0.5*var2[0]*t16229;
  t16231 = -3.2*t15882*t15844;
  t16232 = -3.2*t15838*t15844;
  t16233 = -3.2*t15848*t16214;
  t16234 = -3.2*t15825*t15886;
  t16235 = -3.2*t15825*t15854;
  t16236 = -3.2*t15825*t16201;
  t16237 = t16168 + t16231 + t16232 + t16171 + t16233 + t16234 + t16235 + t16236;
  t16238 = -0.5*var2[1]*t16237;
  t16239 = -6.4*t15882*t15838;
  t16240 = -6.4*t15544*t16214;
  t16241 = -6.4*t15886*t15854;
  t16242 = -6.4*t15567*t16201;
  t16243 = t16239 + t16240 + t16241 + t16242;
  t16244 = -0.5*var2[2]*t16243;
  t16245 = t16202 + t16222 + t16230 + t16238 + t16244;
  t16246 = var2[2]*t16245;
  t16272 = 2.*t15537*t15877;
  t16273 = 2.*t12079*t15880;
  t16274 = t16272 + t16110 + t16195 + t16273 + t16200 + t16118;
  t16283 = -2.*t15537*t15880;
  t16284 = -2.*t15877*t15842;
  t16285 = t16208 + t16283 + t16130 + t16211 + t16284 + t16134;
  t16313 = -3.2*t16159*t15882;
  t16314 = -3.2*t16156*t15886;
  t16315 = t16248 + t16313 + t16250 + t16314;
  t16319 = -3.2*t16218*t15544;
  t16320 = -3.2*t16141*t15882;
  t16321 = -3.2*t16206*t15567;
  t16322 = -3.2*t16128*t15886;
  t16323 = t16319 + t16320 + t16321 + t16322;
  p_output1[0]=(-0.5*t15573*var2[0] - 0.5*(t15593 + t15607 + t15612 - 3.2*t15544*(t15560 + t15613) - 3.2*t15567*(t15616 + t15654) - 2.88*t6732 - 3.2*t8406*(t15594 + t9053) - 3.2*(t15602 + t15603)*t9341)*var2[1])*var2[2];
  p_output1[1]=t15732;
  p_output1[2]=t15761;
  p_output1[3]=t15875;
  p_output1[4]=t15895;
  p_output1[5]=-0.5*t15907*var2[2];
  p_output1[6]=-0.5*t15573*var2[2];
  p_output1[7]=-0.5*t15907*var2[0] - 0.5*t15573*var2[1];
  p_output1[8]=t15732;
  p_output1[9]=var2[2]*(-0.5*(t15943 - 6.4*t15681*t15945 + t15946 - 3.2*t15933*t15949 - 6.4*t15697*t15952 - 3.2*t15922*t15952 + t6942)*var2[0] - 0.5*(t15593 - 6.4*t15681*t15687 - 6.4*t15671*t15697 - 3.2*t15671*t15922 - 3.2*t15691*t15933 + t15957 + t15960)*var2[1] - 0.5*(-6.4*Power(t15681,2) - 6.4*Power(t15697,2) - 6.4*t15933*t8406 - 6.4*t15922*t9341)*var2[2] - 0.5*(-3.2*t15926*t15933 - 3.2*t15922*t15938)*var2[3] + 0.384*t15922*var2[4]);
  p_output1[10]=t16026;
  p_output1[11]=-0.5*t16031*var2[2];
  p_output1[12]=-0.5*t15702*var2[2];
  p_output1[13]=-0.5*t16031*var2[0] - 0.5*t15702*var2[1] - 1.*(-6.4*t15697*t8406 - 6.4*t15681*t9341)*var2[2] - 0.5*t16037*var2[3] + 0.384*t15681*var2[4];
  p_output1[14]=-0.5*t16037*var2[2];
  p_output1[15]=0.384*t15681*var2[2];
  p_output1[16]=t15761;
  p_output1[17]=t16026;
  p_output1[18]=var2[2]*(-0.5*(t15943 - 6.4*t15739*t15945 + t15946 - 6.4*t15746*t15952 - 3.2*t15952*t16050 - 3.2*t15949*t16060)*var2[0] - 0.5*(-6.4*t15687*t15739 - 6.4*t15671*t15746 + t15957 + t15960 - 3.2*t15671*t16050 - 3.2*t15691*t16060)*var2[1] - 0.5*(-6.4*Power(t15739,2) - 6.4*Power(t15746,2) - 6.4*t16060*t8406 - 6.4*t16050*t9341)*var2[2] - 0.5*(-6.4*t15739*t15987 - 6.4*t15746*t15998 - 3.2*t15938*t16050 - 3.2*t15926*t16060 - 3.2*t15987*t8406 - 3.2*(0.24*t15996 - 1.*t7033*t7209)*t9341)*var2[3] + 0.384*t16050*var2[4]);
  p_output1[19]=-0.5*t16090*var2[2];
  p_output1[20]=-0.5*t15752*var2[2];
  p_output1[21]=-0.5*t16090*var2[0] - 0.5*t15752*var2[1] - 1.*(-6.4*t15746*t8406 - 6.4*t15739*t9341)*var2[2] - 0.5*t16098*var2[3] + 0.384*t15739*var2[4];
  p_output1[22]=-0.5*t16098*var2[2];
  p_output1[23]=0.384*t15739*var2[2];
  p_output1[24]=t15875;
  p_output1[25]=var2[2]*(-0.5*(t10773 + t10812 - 13.6*t10598*t15765 - 6.8*t15611*t15765 - 13.6*t15808*t15815 - 6.8*t15815*t16123 + t16150 - 6.4*t15838*t16152 + t16153 - 3.2*t16135*t16156 - 6.4*t15854*t16159 - 3.2*t16119*t16159)*var2[0] - 0.5*(t15607 + t15612 - 13.6*t10784*t15765 - 13.6*t10598*t15808 - 6.4*t15838*t15844 - 6.4*t15825*t15854 - 3.2*t15825*t16119 - 6.8*t10598*t16123 - 3.2*t15848*t16135 + t16166 + t16168 + t16171)*var2[1] - 0.5*(-13.6*t10770*t15765 - 13.6*Power(t15765,2) - 13.6*Power(t15808,2) - 6.4*Power(t15838,2) - 6.4*Power(t15854,2) - 6.4*t15567*t16119 - 13.6*t10806*t16123 - 6.4*t15544*t16135)*var2[2] - 0.5*(-0.748*t16123 - 3.2*t16128*t16135 - 3.2*t16119*t16141)*var2[5] + 0.384*t16119*var2[6]);
  p_output1[26]=t16246;
  p_output1[27]=-0.5*t16252*var2[2];
  p_output1[28]=-0.5*t15859*var2[2];
  p_output1[29]=-0.5*t16252*var2[0] - 0.5*t15859*var2[1] - 1.*(-13.6*t10806*t15765 - 13.6*t10770*t15808 - 6.4*t15567*t15838 - 6.4*t15544*t15854)*var2[2] - 0.5*t16259*var2[5] + 0.384*t15838*var2[6];
  p_output1[30]=-0.5*t16259*var2[2];
  p_output1[31]=0.384*t15838*var2[2];
  p_output1[32]=t15895;
  p_output1[33]=t16246;
  p_output1[34]=var2[2]*(-0.5*(t16150 - 6.4*t15882*t16152 + t16153 - 6.4*t15886*t16159 - 3.2*t16159*t16274 - 3.2*t16156*t16285)*var2[0] - 0.5*(-6.4*t15844*t15882 - 6.4*t15825*t15886 + t16168 + t16171 - 3.2*t15825*t16274 - 3.2*t15848*t16285)*var2[1] - 0.5*(-6.4*Power(t15882,2) - 6.4*Power(t15886,2) - 6.4*t15567*t16274 - 6.4*t15544*t16285)*var2[2] - 0.5*(-3.2*t15544*t16206 - 6.4*t15882*t16206 - 3.2*t15567*(0.63*t10813 - 1.*t10813*t12497 + 0.24*t16216) - 6.4*t15886*t16218 - 3.2*t16141*t16274 - 3.2*t16128*t16285)*var2[5] + 0.384*t16274*var2[6]);
  p_output1[35]=-0.5*t16315*var2[2];
  p_output1[36]=-0.5*t15888*var2[2];
  p_output1[37]=-0.5*t16315*var2[0] - 0.5*t15888*var2[1] - 1.*(-6.4*t15567*t15882 - 6.4*t15544*t15886)*var2[2] - 0.5*t16323*var2[5] + 0.384*t15882*var2[6];
  p_output1[38]=-0.5*t16323*var2[2];
  p_output1[39]=0.384*t15882*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 40, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec3_five_link_walker.hh"

namespace LeftStance
{

void J_Ce3_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
